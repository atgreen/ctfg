# SPDX-FileCopyrightText:  Copyright 2025 Anthony Green
# SPDX-License-Identifier: MIT
#
# Project:  ctfg
# File:     build.yaml
# Date:     2025-06-20
#
# ==============================================================================

name: Build

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SBCL, ocicl, and gcc (Linux)
        if: runner.os == 'Linux'
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install sbcl ocicl gcc@11
          ocicl setup >> ~/.sbclrc
          patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 --set-rpath /lib64 /home/linuxbrew/.linuxbrew/Cellar/sbcl/*/libexec/bin/sbcl

      - name: Setup SBCL and ocicl (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install sbcl ocicl
          ocicl setup >> ~/.sbclrc

      - name: Install LISP dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          ocicl install

      - name: Install LISP dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          ocicl install

      - name: Install libfixposix (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libfixposix-dev

      - name: Install libfixposix (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install libfixposix

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          make
          mv ctfg ctfg-linux-x86_64

      - name: Build (macOS)
        if: runner.os == 'macOS'
        run: |
          make
          cp ctfg ctfg-macos-$(uname -m)
          
      - name: Debug - Test macOS binary and check dependencies
        if: runner.os == 'macOS'
        run: |
          echo "=== Testing if binary runs ==="
          ./ctfg --help || true
          
          echo "=== Getting binary info ==="
          file ./ctfg
          otool -L ./ctfg | head -20 || true
          
          echo "=== Checking ocicl systems location ==="
          ls -la ocicl/ | head -20
          
          echo "=== Checking SBCL location and dependencies ==="
          which sbcl
          otool -L $(which sbcl) || true
          
          echo "=== Checking for libfixposix (should be in homebrew) ==="
          brew list libfixposix || true
          find /opt/homebrew -name "*fixposix*" 2>/dev/null | head -10 || true
          find /usr/local -name "*fixposix*" 2>/dev/null | head -10 || true
          
          echo "=== Checking working directory and required files ==="
          pwd
          ls -la index.html challenges.json credentials.csv
          
          echo "=== Installing coreutils for gtimeout ==="
          brew install coreutils
          
          echo "=== Testing ASDF system loading in SBCL ==="
          sbcl --non-interactive \
               --eval "(asdf:load-system :ctfg)" \
               --eval "(format t \"~%System loaded successfully~%\")" \
               2>&1 || true
          
          echo "=== Testing by running main directly in SBCL (not as saved binary) ==="
          # Run with simpler error handling
          sbcl --eval "(asdf:load-system :ctfg)" \
               --eval "(handler-bind ((error (lambda (c) (format t \"~%ERROR: ~A~%\" c) (sb-debug:print-backtrace :count 50) (sb-ext:exit :code 1)))) (ctfg:main))" 2>&1 &
          SBCL_PID=$!
          echo "Waiting for server to start..."
          sleep 5
          echo "Server PID: $SBCL_PID"
          ps aux | grep $SBCL_PID | grep -v grep || true
          echo "=== Testing if server is listening ==="
          netstat -an | grep 8080 || lsof -i :8080 || true
          echo "=== Testing HTTP request to SBCL-run server ==="
          curl -v --max-time 5 http://localhost:8080 2>&1 || true
          echo "=== Checking if SBCL process is still running ==="
          ps aux | grep $SBCL_PID | grep -v grep || true
          kill $SBCL_PID 2>/dev/null || true
          wait $SBCL_PID 2>/dev/null || true
          
          echo "=== Testing binary without developer mode ==="
          ./ctfg &
          CTFG_PID=$!
          sleep 3
          echo "=== Testing HTTP request to binary (non-dev mode) ==="
          curl -v http://localhost:8080 2>&1 || true
          kill $CTFG_PID 2>/dev/null || true
          wait $CTFG_PID 2>/dev/null || true
          
          echo "=== Testing binary with developer mode ==="
          ./ctfg --developer-mode &
          CTFG_PID=$!
          sleep 3
          echo "=== Testing HTTP request to binary (dev mode) ==="
          curl -v http://localhost:8080 2>&1 || true
          echo "=== Testing /challenges endpoint (dev mode) ==="
          curl -v http://localhost:8080/challenges 2>&1 || true
          kill $CTFG_PID 2>/dev/null || true
          wait $CTFG_PID 2>/dev/null || true

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Playwright Dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright Tests (Linux)
        if: runner.os == 'Linux'
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          make check

      - name: Run Playwright Tests (macOS) with debugging
        if: runner.os == 'macOS'
        run: |
          # Run tests but capture more output on failure
          if ! make check; then
            echo "=== Test failed, checking for diagnostics ==="
            
            echo "=== Checking for crash reports ==="
            ls -la ~/Library/Logs/DiagnosticReports/ 2>/dev/null | tail -5 || true
            
            echo "=== Testing if ctfg binary still works after failure ==="
            ./ctfg --help || true
            
            echo "=== Trying to start ctfg in foreground to see error ==="
            # Use background process with sleep instead of timeout
            ./ctfg -d 2>&1 &
            CTFG_PID=$!
            sleep 3
            kill $CTFG_PID 2>/dev/null || true
            wait $CTFG_PID 2>/dev/null || true
            
            echo "=== Checking if it's a file/path issue ==="
            echo "Current directory: $(pwd)"
            echo "Files present:"
            ls -la *.html *.json *.csv 2>/dev/null || true
            
            exit 1
          fi

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload Scoreboard Screenshots
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: scoreboard
          path: scoreboard-*.png
          retention-days: 30

      - name: Upload `ctfg` Binary (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          path: ./ctfg-linux-x86_64
          name: ctfg-linux-x86_64
          retention-days: 30

      - name: Upload `ctfg` Binary (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          path: ./ctfg-macos-*
          name: ctfg-macos-${{ runner.arch }}
          retention-days: 30
