{
  "startTime": 1757893966855,
  "endTime": 1757894006297,
  "players": [
    {
      "id": 1,
      "username": "player2",
      "password": "iNAk7p82",
      "displayName": "Player_player2_861",
      "sessionCookie": "hunchentoot-session=40:510F1668805AED4F1FC38E194495C18A; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player2`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player2`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player2` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481957264B595CE3742480\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player2_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player2` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player2\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player2&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player2\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player2` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player2. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player2&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph\n- **your QR tile**: https://station-zero-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player2` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph\n- **numbers-station route**: https://numbers-station-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player2`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player2`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph\n- **numbers-station route**: https://numbers-station-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player2` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player2.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player2`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player2?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893983900,
        "wsConnectTime": 1757893984130,
        "firstChallengeTime": 1757893984568,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 2,
      "username": "player3",
      "password": "qoomBnlP",
      "displayName": "Player_player3_861",
      "sessionCookie": "hunchentoot-session=50:65A6E70CEAC6FBA4263080F963440393; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player3`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player3`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player3` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481956264B595CDE140D30\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player3_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player3` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player3\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player3&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player3\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player3` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player3. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player3&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph\n- **your QR tile**: https://station-zero-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player3` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph\n- **numbers-station route**: https://numbers-station-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player3`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player3`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph\n- **numbers-station route**: https://numbers-station-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player3` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player3.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player3`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player3?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985567,
        "wsConnectTime": 1757893985798,
        "firstChallengeTime": 1757893986423,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 3,
      "username": "player4",
      "password": "09wTiwd4",
      "displayName": "Player_player4_861",
      "sessionCookie": "hunchentoot-session=12:3FB3173ECC1D20007936C8C9A4AAE99F; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player4`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player4`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player4` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481951264B595C6C34D120\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player4_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player4` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player4\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player4&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player4\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player4` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player4. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player4&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph\n- **your QR tile**: https://station-zero-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player4` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph\n- **numbers-station route**: https://numbers-station-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player4`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player4`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph\n- **numbers-station route**: https://numbers-station-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player4` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player4.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player4`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player4?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893977032,
        "wsConnectTime": 1757893977281,
        "firstChallengeTime": 1757893977672,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 4,
      "username": "player5",
      "password": "zB8K4VYA",
      "displayName": "Player_player5_861",
      "sessionCookie": "hunchentoot-session=2:76A231E424F1A0188741C022D90206D7; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player5`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player5`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player5` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481950264B595C5154F890\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player5_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player5` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player5\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player5&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player5\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player5` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player5. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player5&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph\n- **your QR tile**: https://station-zero-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player5` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph\n- **numbers-station route**: https://numbers-station-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player5`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player5`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph\n- **numbers-station route**: https://numbers-station-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player5` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player5.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player5`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player5?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893975422,
        "wsConnectTime": 1757893975692,
        "firstChallengeTime": 1757893976089,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 5,
      "username": "player6",
      "password": "otE3tMY8",
      "displayName": "Player_player6_861",
      "sessionCookie": "hunchentoot-session=11:97B8A9E21300A72C5D1F8ECCF029AEB1; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player6`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player6`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player6` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481953264B595C16F48240\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player6_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player6` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player6\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player6&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player6\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player6` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player6. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player6&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph\n- **your QR tile**: https://station-zero-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player6` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph\n- **numbers-station route**: https://numbers-station-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player6`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player6`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph\n- **numbers-station route**: https://numbers-station-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player6` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player6.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player6`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player6?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893977025,
        "wsConnectTime": 1757893977275,
        "firstChallengeTime": 1757893977635,
        "challengesSolved": 15,
        "flagsSubmitted": 17,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 6,
      "username": "player7",
      "password": "c25FmQ5K",
      "displayName": "Player_player7_861",
      "sessionCookie": "hunchentoot-session=3:0605E3695E3F00968FD837698C63F0C3; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player7`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player7`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player7` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481952264B595C2B94ABF0\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player7_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player7` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player7\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player7&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player7\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player7` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player7. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player7&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph\n- **your QR tile**: https://station-zero-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player7` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph\n- **numbers-station route**: https://numbers-station-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player7`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player7`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph\n- **numbers-station route**: https://numbers-station-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player7` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player7.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player7`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player7?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893975826,
        "wsConnectTime": 1757893976038,
        "firstChallengeTime": 1757893976743,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 7,
      "username": "player8",
      "password": "AFg8BQN2",
      "displayName": "Player_player8_861",
      "sessionCookie": "hunchentoot-session=25:75CA00C2766061EB8C864C94DFE101CC; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player8`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player8`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player8` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D264B595CA9C43C21\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player8_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player8` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player8\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player8&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player8\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player8` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player8. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player8&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph\n- **your QR tile**: https://station-zero-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player8` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph\n- **numbers-station route**: https://numbers-station-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player8`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player8`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph\n- **numbers-station route**: https://numbers-station-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player8` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player8.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player8`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player8?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893981367,
        "wsConnectTime": 1757893981573,
        "firstChallengeTime": 1757893981946,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 8,
      "username": "player9",
      "password": "egq1CWwK",
      "displayName": "Player_player9_861",
      "sessionCookie": "hunchentoot-session=28:32860D2D987401055540E3BA6AF2D07C; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player9`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player9`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player9` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C264B595C94A41591\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player9_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player9` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player9\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player9&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player9\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player9` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player9. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player9&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph\n- **your QR tile**: https://station-zero-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player9` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph\n- **numbers-station route**: https://numbers-station-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player9`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player9`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph\n- **numbers-station route**: https://numbers-station-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player9` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player9.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player9`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player9?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893982072,
        "wsConnectTime": 1757893982302,
        "firstChallengeTime": 1757893982661,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 9,
      "username": "player10",
      "password": "9Mjqwln9",
      "displayName": "Player_player10_861",
      "sessionCookie": "hunchentoot-session=35:989CB722B4C7169D1BB20AB731F673E4; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player10`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player10`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player10` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481954492C575B5400912331\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player10_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player10` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player10\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player10&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player10\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player10` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player10. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player10&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph\n- **your QR tile**: https://station-zero-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player10` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph\n- **numbers-station route**: https://numbers-station-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player10`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player10`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph\n- **numbers-station route**: https://numbers-station-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player10` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player10.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player10`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player10?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893983105,
        "wsConnectTime": 1757893983325,
        "firstChallengeTime": 1757893983700,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 10,
      "username": "player11",
      "password": "IV2gsWdg",
      "displayName": "Player_player11_861",
      "sessionCookie": "hunchentoot-session=17:0BB75DA79C4B789E017FE9EE06BD0531; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player11`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player11`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player11` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481954482C575B543DF10A81\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player11_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player11` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player11\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player11&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player11\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player11` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player11. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player11&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph\n- **your QR tile**: https://station-zero-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player11` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph\n- **numbers-station route**: https://numbers-station-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player11`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player11`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph\n- **numbers-station route**: https://numbers-station-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player11` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player11.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player11`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player11?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893979622,
        "wsConnectTime": 1757893979851,
        "firstChallengeTime": 1757893980490,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 11,
      "username": "player12",
      "password": "wtnsLYGu",
      "displayName": "Player_player12_861",
      "sessionCookie": "hunchentoot-session=57:8FEB71AF5A5E2C4C289BD0059162098B; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player12`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player12`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player12` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819544B2C575B547A517051\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player12_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player12` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player12\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player12&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player12\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player12` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player12. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player12&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph\n- **your QR tile**: https://station-zero-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player12` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph\n- **numbers-station route**: https://numbers-station-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player12`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player12`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph\n- **numbers-station route**: https://numbers-station-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player12` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player12.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player12`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player12?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986024,
        "wsConnectTime": 1757893986288,
        "firstChallengeTime": 1757893986668,
        "challengesSolved": 15,
        "flagsSubmitted": 21,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 12,
      "username": "player13",
      "password": "qU7hfAac",
      "displayName": "Player_player13_861",
      "sessionCookie": "hunchentoot-session=37:92FCC231F6A266333D27D2B1B35B9953; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player13`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player13`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player13` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819544A2C575B54473159E1\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player13_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player13` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player13\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player13&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player13\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player13` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player13. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player13&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph\n- **your QR tile**: https://station-zero-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player13` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph\n- **numbers-station route**: https://numbers-station-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player13`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player13`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph\n- **numbers-station route**: https://numbers-station-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player13` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player13.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player13`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player13?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893983666,
        "wsConnectTime": 1757893983911,
        "firstChallengeTime": 1757893984429,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 13,
      "username": "player14",
      "password": "EeZP5gNw",
      "displayName": "Player_player14_861",
      "sessionCookie": "hunchentoot-session=26:3289AF84BAA8E30D6B5C698197F68F50; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player14`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player14`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player14` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819544D2C575B54F51185F1\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player14_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player14` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player14\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player14&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player14\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player14` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player14. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player14&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph\n- **your QR tile**: https://station-zero-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player14` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph\n- **numbers-station route**: https://numbers-station-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player14`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player14`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph\n- **numbers-station route**: https://numbers-station-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player14` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player14.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player14`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player14?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893981703,
        "wsConnectTime": 1757893981943,
        "firstChallengeTime": 1757893982363,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 14,
      "username": "player15",
      "password": "qmlnHhc7",
      "displayName": "Player_player15_861",
      "sessionCookie": "hunchentoot-session=72:E73998AA04819E76B15C71D7248E1733; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player15`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player15`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player15` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819544C2C575B54C871AC41\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player15_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player15` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player15\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player15&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player15\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player15` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player15. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player15&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph\n- **your QR tile**: https://station-zero-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player15` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph\n- **numbers-station route**: https://numbers-station-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player15`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player15`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph\n- **numbers-station route**: https://numbers-station-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player15` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player15.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player15`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player15?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893987108,
        "wsConnectTime": 1757893987614,
        "firstChallengeTime": 1757893988241,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 15,
      "username": "player16",
      "password": "6pu1F9Ru",
      "displayName": "Player_player16_861",
      "sessionCookie": "hunchentoot-session=67:D2097A6C3B0265A72B9F962A0BAD4E09; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player16`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player16`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player16` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819544F2C575B548FD1D691\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player16_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player16` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player16\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player16&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player16\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player16` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player16. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player16&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph\n- **your QR tile**: https://station-zero-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player16` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph\n- **numbers-station route**: https://numbers-station-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player16`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player16`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph\n- **numbers-station route**: https://numbers-station-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player16` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player16.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player16`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player16?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986846,
        "wsConnectTime": 1757893987573,
        "firstChallengeTime": 1757893988175,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 16,
      "username": "player17",
      "password": "TXV9FycM",
      "displayName": "Player_player17_861",
      "sessionCookie": "hunchentoot-session=23:5D0F3108D78FD1670A7796592C05E0D1; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player17`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player17`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player17` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819544E2C575B54B2B1FF21\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player17_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player17` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player17\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player17&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player17\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player17` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player17. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player17&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph\n- **your QR tile**: https://station-zero-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player17` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph\n- **numbers-station route**: https://numbers-station-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player17`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player17`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph\n- **numbers-station route**: https://numbers-station-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player17` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player17.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player17`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player17?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893981188,
        "wsConnectTime": 1757893981474,
        "firstChallengeTime": 1757893982040,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 17,
      "username": "player18",
      "password": "XHkFdcNr",
      "displayName": "Player_player18_861",
      "sessionCookie": "hunchentoot-session=18:10E4E9A33E85F5FD77085B5A56B9EE2F; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player18`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player18`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player18` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481954412C575B5430E168F0\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player18_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player18` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player18\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player18&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player18\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player18` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player18. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player18&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph\n- **your QR tile**: https://station-zero-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player18` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph\n- **numbers-station route**: https://numbers-station-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player18`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player18`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph\n- **numbers-station route**: https://numbers-station-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player18` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player18.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player18`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player18?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893979600,
        "wsConnectTime": 1757893979833,
        "firstChallengeTime": 1757893980247,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 18,
      "username": "player19",
      "password": "7pdlkrn1",
      "displayName": "Player_player19_861",
      "sessionCookie": "hunchentoot-session=70:B913B04461983CF9C712AD90B0EFB251; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player19`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player19`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player19` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481954402C575B540D814140\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player19_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player19` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player19\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player19&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player19\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player19` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player19. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player19&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph\n- **your QR tile**: https://station-zero-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player19` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph\n- **numbers-station route**: https://numbers-station-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player19`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player19`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph\n- **numbers-station route**: https://numbers-station-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player19` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player19.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player19`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player19?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986970,
        "wsConnectTime": 1757893987222,
        "firstChallengeTime": 1757893987597,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 19,
      "username": "player20",
      "password": "PFENy7Nq",
      "displayName": "Player_player20_861",
      "sessionCookie": "hunchentoot-session=53:702912CBCBEA219C6CAE12F8A12A5EC6; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player20`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player20`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player20` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481957492C575B548605519F\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player20_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player20` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player20\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player20&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player20\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player20` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player20. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player20&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph\n- **your QR tile**: https://station-zero-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player20` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph\n- **numbers-station route**: https://numbers-station-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player20`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player20`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph\n- **numbers-station route**: https://numbers-station-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player20` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player20.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player20`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player20?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985768,
        "wsConnectTime": 1757893986022,
        "firstChallengeTime": 1757893986439,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 20,
      "username": "player21",
      "password": "ozL1Lato",
      "displayName": "Player_player21_861",
      "sessionCookie": "hunchentoot-session=71:A261BD738AB26F6DBFE92A386F425A73; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player21`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player21`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player21` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481957482C575B54BB65782F\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player21_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player21` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player21\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player21&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player21\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player21` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player21. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player21&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph\n- **your QR tile**: https://station-zero-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player21` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph\n- **numbers-station route**: https://numbers-station-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player21`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player21`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph\n- **numbers-station route**: https://numbers-station-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player21` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player21.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player21`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player21?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986983,
        "wsConnectTime": 1757893987220,
        "firstChallengeTime": 1757893987585,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 21,
      "username": "player22",
      "password": "tS3cNQOz",
      "displayName": "Player_player22_861",
      "sessionCookie": "hunchentoot-session=51:52C18D7C49CD76F4032F4BB1B4BD31BB; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player22`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player22`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player22` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819574B2C575B54FCC502FF\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player22_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player22` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player22\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player22&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player22\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player22` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player22. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player22&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph\n- **your QR tile**: https://station-zero-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player22` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph\n- **numbers-station route**: https://numbers-station-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player22`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player22`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph\n- **numbers-station route**: https://numbers-station-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player22` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player22.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player22`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player22?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985614,
        "wsConnectTime": 1757893985843,
        "firstChallengeTime": 1757893986285,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 22,
      "username": "player23",
      "password": "jvd94uM2",
      "displayName": "Player_player23_861",
      "sessionCookie": "hunchentoot-session=21:BA1C0328012EA46F620BF95048269DCE; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player23`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player23`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player23` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819574A2C575B54C1A52B4F\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player23_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player23` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player23\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player23&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player23\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player23` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player23. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player23&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph\n- **your QR tile**: https://station-zero-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player23` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph\n- **numbers-station route**: https://numbers-station-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player23`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player23`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph\n- **numbers-station route**: https://numbers-station-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player23` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player23.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player23`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player23?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893980273,
        "wsConnectTime": 1757893980501,
        "firstChallengeTime": 1757893980891,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 23,
      "username": "player24",
      "password": "bAbGtcED",
      "displayName": "Player_player24_861",
      "sessionCookie": "hunchentoot-session=48:912BD84402E71A6C12455B78C61AD2BA; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player24`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player24`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player24` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819574D2C575B547385F75F\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player24_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player24` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player24\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player24&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player24\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player24` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player24. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player24&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph\n- **your QR tile**: https://station-zero-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player24` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph\n- **numbers-station route**: https://numbers-station-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player24`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player24`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph\n- **numbers-station route**: https://numbers-station-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player24` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player24.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player24`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player24?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985541,
        "wsConnectTime": 1757893985761,
        "firstChallengeTime": 1757893986201,
        "challengesSolved": 15,
        "flagsSubmitted": 17,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 24,
      "username": "player25",
      "password": "1T7viNg8",
      "displayName": "Player_player25_861",
      "sessionCookie": "hunchentoot-session=14:E9B60DE3B4B468ABCE2C536C40AB5C6D; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player25`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player25`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player25` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819574C2C575B544EE5DEEF\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player25_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player25` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player25\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player25&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player25\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player25` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player25. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player25&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph\n- **your QR tile**: https://station-zero-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player25` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph\n- **numbers-station route**: https://numbers-station-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player25`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player25`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph\n- **numbers-station route**: https://numbers-station-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player25` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player25.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player25`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player25?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893977836,
        "wsConnectTime": 1757893978333,
        "firstChallengeTime": 1757893978848,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 25,
      "username": "player26",
      "password": "er0cTqZr",
      "displayName": "Player_player26_861",
      "sessionCookie": "hunchentoot-session=65:01B083EE78F2CAD81E6BF9C6FC1942DD; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player26`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player26`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player26` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819574F2C575B540945A43F\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player26_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player26` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player26\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player26&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player26\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player26` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player26. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player26&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph\n- **your QR tile**: https://station-zero-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player26` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph\n- **numbers-station route**: https://numbers-station-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player26`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player26`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph\n- **numbers-station route**: https://numbers-station-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player26` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player26.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player26`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player26?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986624,
        "wsConnectTime": 1757893986881,
        "firstChallengeTime": 1757893987254,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 26,
      "username": "player27",
      "password": "AYDJxaMS",
      "displayName": "Player_player27_861",
      "sessionCookie": "hunchentoot-session=22:8C059011A5632D3218980F1690C252D2; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player27`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player27`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player27` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819574E2C575B5434258D8F\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player27_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player27` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player27\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player27&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player27\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player27` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player27. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player27&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph\n- **your QR tile**: https://station-zero-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player27` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph\n- **numbers-station route**: https://numbers-station-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player27`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player27`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph\n- **numbers-station route**: https://numbers-station-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player27` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player27.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player27`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player27?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893981002,
        "wsConnectTime": 1757893981216,
        "firstChallengeTime": 1757893981655,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 27,
      "username": "player28",
      "password": "YHPQvLc5",
      "displayName": "Player_player28_861",
      "sessionCookie": "hunchentoot-session=78:DCD1469965E30D1A1E6DD16168BF0B58; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player28`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player28`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player28` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481957412C575B54B6751A5E\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player28_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player28` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player28\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player28&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player28\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player28` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player28. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player28&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph\n- **your QR tile**: https://station-zero-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player28` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph\n- **numbers-station route**: https://numbers-station-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player28`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player28`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph\n- **numbers-station route**: https://numbers-station-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player28` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player28.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player28`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player28?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893988414,
        "wsConnectTime": 1757893988695,
        "firstChallengeTime": 1757893989051,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 28,
      "username": "player29",
      "password": "Yuj1nQda",
      "displayName": "Player_player29_861",
      "sessionCookie": "hunchentoot-session=60:09D4E8A608F03EE5687BDE5105CEC67B; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player29`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player29`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player29` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481957402C575B548B1533EE\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player29_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player29` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player29\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player29&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player29\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player29` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player29. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player29&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph\n- **your QR tile**: https://station-zero-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player29` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph\n- **numbers-station route**: https://numbers-station-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player29`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player29`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph\n- **numbers-station route**: https://numbers-station-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player29` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player29.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player29`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player29?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986218,
        "wsConnectTime": 1757893986473,
        "firstChallengeTime": 1757893986971,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 29,
      "username": "player30",
      "password": "z3ddOka9",
      "displayName": "Player_player30_861",
      "sessionCookie": "hunchentoot-session=29:E7F0C4E9569BD04F38DC259D8228F828; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player30`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player30`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player30` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481956492C575B544D59823A\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player30_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player30` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player30\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player30&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player30\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player30` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player30. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player30&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph\n- **your QR tile**: https://station-zero-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player30` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph\n- **numbers-station route**: https://numbers-station-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player30`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player30`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph\n- **numbers-station route**: https://numbers-station-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player30` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player30.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player30`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player30?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893982276,
        "wsConnectTime": 1757893982493,
        "firstChallengeTime": 1757893982896,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 30,
      "username": "player31",
      "password": "qnMjHxJD",
      "displayName": "Player_player31_861",
      "sessionCookie": "hunchentoot-session=7:305A39EC784170175099DE3BF87C7A44; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player31`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player31`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player31` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481956482C575B547039AB8A\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player31_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player31` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player31\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player31&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player31\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player31` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player31. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player31&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph\n- **your QR tile**: https://station-zero-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player31` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph\n- **numbers-station route**: https://numbers-station-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player31`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player31`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph\n- **numbers-station route**: https://numbers-station-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player31` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player31.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player31`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player31?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893976066,
        "wsConnectTime": 1757893976286,
        "firstChallengeTime": 1757893976665,
        "challengesSolved": 15,
        "flagsSubmitted": 17,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 31,
      "username": "player32",
      "password": "3Q9kYxQs",
      "displayName": "Player_player32_861",
      "sessionCookie": "hunchentoot-session=20:57F2B31098B81EF32F76CFE0F9F14B8C; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player32`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player32`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player32` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819564B2C575B543799D15A\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player32_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player32` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player32\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player32&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player32\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player32` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player32. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player32&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph\n- **your QR tile**: https://station-zero-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player32` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph\n- **numbers-station route**: https://numbers-station-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player32`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player32`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph\n- **numbers-station route**: https://numbers-station-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player32` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player32.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player32`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player32?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893979946,
        "wsConnectTime": 1757893980163,
        "firstChallengeTime": 1757893980563,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 32,
      "username": "player33",
      "password": "u01mfjek",
      "displayName": "Player_player33_861",
      "sessionCookie": "hunchentoot-session=44:7DA25A4D2AED4D49CC70BBAB2944C845; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player33`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player33`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player33` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819564A2C575B540AF9F8EA\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player33_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player33` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player33\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player33&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player33\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player33` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player33. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player33&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph\n- **your QR tile**: https://station-zero-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player33` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph\n- **numbers-station route**: https://numbers-station-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player33`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player33`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph\n- **numbers-station route**: https://numbers-station-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player33` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player33.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player33`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player33?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893984953,
        "wsConnectTime": 1757893985176,
        "firstChallengeTime": 1757893985566,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 33,
      "username": "player34",
      "password": "oJeBOK36",
      "displayName": "Player_player34_861",
      "sessionCookie": "hunchentoot-session=30:CDF5F46EE5222E2AC9B9C524C5FFBD3D; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player34`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player34`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player34` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819564D2C575B54B8D924FA\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player34_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player34` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player34\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player34&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player34\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player34` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player34. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player34&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph\n- **your QR tile**: https://station-zero-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player34` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph\n- **numbers-station route**: https://numbers-station-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player34`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player34`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph\n- **numbers-station route**: https://numbers-station-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player34` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player34.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player34`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player34?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893982546,
        "wsConnectTime": 1757893983835,
        "firstChallengeTime": 1757893984417,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 34,
      "username": "player35",
      "password": "8DuI092V",
      "displayName": "Player_player35_861",
      "sessionCookie": "hunchentoot-session=93:BEE0CC197A87B50B8AF9793D08684157; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player35`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player35`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player35` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819564C2C575B5485B90D4A\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player35_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player35` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player35\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player35&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player35\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player35` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player35. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player35&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph\n- **your QR tile**: https://station-zero-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player35` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph\n- **numbers-station route**: https://numbers-station-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player35`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player35`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph\n- **numbers-station route**: https://numbers-station-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player35` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player35.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player35`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player35?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893991746,
        "wsConnectTime": 1757893992004,
        "firstChallengeTime": 1757893992423,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 35,
      "username": "player36",
      "password": "qO3s8LCX",
      "displayName": "Player_player36_861",
      "sessionCookie": "hunchentoot-session=27:EA17073548B30EDF4672723924AFAC9E; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player36`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player36`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player36` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819564F2C575B54C219779A\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player36_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player36` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player36\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player36&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player36\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player36` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player36. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player36&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph\n- **your QR tile**: https://station-zero-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player36` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph\n- **numbers-station route**: https://numbers-station-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player36`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player36`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph\n- **numbers-station route**: https://numbers-station-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player36` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player36.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player36`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player36?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893981817,
        "wsConnectTime": 1757893982045,
        "firstChallengeTime": 1757893982436,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 36,
      "username": "player37",
      "password": "oe8lEXfF",
      "displayName": "Player_player37_861",
      "sessionCookie": "hunchentoot-session=87:166364D642CE0449E572DC1CD6A91644; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player37`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player37`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player37` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819564E2C575B54FF795E2A\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player37_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player37` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player37\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player37&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player37\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player37` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player37. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player37&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph\n- **your QR tile**: https://station-zero-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player37` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph\n- **numbers-station route**: https://numbers-station-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player37`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player37`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph\n- **numbers-station route**: https://numbers-station-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player37` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player37.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player37`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player37?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893989798,
        "wsConnectTime": 1757893990007,
        "firstChallengeTime": 1757893990395,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 37,
      "username": "player38",
      "password": "Sj1JbIat",
      "displayName": "Player_player38_861",
      "sessionCookie": "hunchentoot-session=84:D271514AEF678F2FD624FBECAF60D34E; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player38`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player38`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player38` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481956412C575B547D29C9FB\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player38_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player38` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player38\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player38&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player38\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player38` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player38. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player38&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph\n- **your QR tile**: https://station-zero-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player38` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph\n- **numbers-station route**: https://numbers-station-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player38`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player38`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph\n- **numbers-station route**: https://numbers-station-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player38` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player38.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player38`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player38?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893989559,
        "wsConnectTime": 1757893990158,
        "firstChallengeTime": 1757893990551,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 38,
      "username": "player39",
      "password": "H5SZiKv7",
      "displayName": "Player_player39_861",
      "sessionCookie": "hunchentoot-session=80:74EF57E609BB8FC66DEE0565F92709A8; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player39`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player39`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player39` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481956402C575B544049E04B\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player39_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player39` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player39\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player39&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player39\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player39` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player39. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player39&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph\n- **your QR tile**: https://station-zero-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player39` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph\n- **numbers-station route**: https://numbers-station-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player39`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player39`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph\n- **numbers-station route**: https://numbers-station-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player39` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player39.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player39`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player39?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893988889,
        "wsConnectTime": 1757893989157,
        "firstChallengeTime": 1757893989540,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 39,
      "username": "player40",
      "password": "6JTLuJgK",
      "displayName": "Player_player40_861",
      "sessionCookie": "hunchentoot-session=66:94F157CBEA609D86C9649CA64CDCA62A; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player40`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player40`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player40` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481951492C575B54505CB282\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player40_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player40` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player40\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player40&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player40\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player40` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player40. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player40&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph\n- **your QR tile**: https://station-zero-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player40` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph\n- **numbers-station route**: https://numbers-station-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player40`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player40`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph\n- **numbers-station route**: https://numbers-station-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player40` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player40.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player40`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player40?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893987096,
        "wsConnectTime": 1757893987323,
        "firstChallengeTime": 1757893987672,
        "challengesSolved": 15,
        "flagsSubmitted": 17,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 40,
      "username": "player41",
      "password": "9PRXT8DO",
      "displayName": "Player_player41_861",
      "sessionCookie": "hunchentoot-session=19:586C3C63A8D78B3AAC9194230149B983; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player41`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player41`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player41` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481951482C575B546D3C9B32\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player41_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player41` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player41\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player41&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player41\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player41` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player41. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player41&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph\n- **your QR tile**: https://station-zero-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player41` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph\n- **numbers-station route**: https://numbers-station-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player41`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player41`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph\n- **numbers-station route**: https://numbers-station-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player41` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player41.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player41`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player41?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893979892,
        "wsConnectTime": 1757893980103,
        "firstChallengeTime": 1757893980497,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 41,
      "username": "player42",
      "password": "YdYI38t7",
      "displayName": "Player_player42_861",
      "sessionCookie": "hunchentoot-session=32:FC61674E98C04624E305F7F6A1CE665A; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player42`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player42`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player42` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819514B2C575B542A9CE1E2\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player42_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player42` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player42\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player42&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player42\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player42` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player42. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player42&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph\n- **your QR tile**: https://station-zero-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player42` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph\n- **numbers-station route**: https://numbers-station-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player42`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player42`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph\n- **numbers-station route**: https://numbers-station-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player42` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player42.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player42`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player42?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893982937,
        "wsConnectTime": 1757893983153,
        "firstChallengeTime": 1757893983745,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 42,
      "username": "player43",
      "password": "fzb7Neig",
      "displayName": "Player_player43_861",
      "sessionCookie": "hunchentoot-session=42:F605DBD61FCAF20F1AE9C8B774A803F9; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player43`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player43`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player43` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819514A2C575B5417FCC852\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player43_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player43` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player43\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player43&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player43\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player43` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player43. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player43&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph\n- **your QR tile**: https://station-zero-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player43` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph\n- **numbers-station route**: https://numbers-station-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player43`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player43`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph\n- **numbers-station route**: https://numbers-station-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player43` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player43.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player43`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player43?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893984600,
        "wsConnectTime": 1757893984837,
        "firstChallengeTime": 1757893985222,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 43,
      "username": "player44",
      "password": "VvRFfraz",
      "displayName": "Player_player44_861",
      "sessionCookie": "hunchentoot-session=52:C323FE89DB472A8A20729F00816EAB22; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player44`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player44`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player44` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819514D2C575B54A5DC1442\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player44_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player44` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player44\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player44&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player44\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player44` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player44. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player44&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph\n- **your QR tile**: https://station-zero-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player44` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph\n- **numbers-station route**: https://numbers-station-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player44`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player44`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph\n- **numbers-station route**: https://numbers-station-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player44` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player44.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player44`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player44?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985622,
        "wsConnectTime": 1757893985856,
        "firstChallengeTime": 1757893986255,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 44,
      "username": "player45",
      "password": "KuqKhXze",
      "displayName": "Player_player45_861",
      "sessionCookie": "hunchentoot-session=73:A169D85A3F6F8D6F1774584FCC3AD012; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player45`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player45`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player45` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819514C2C575B5498BC3DF2\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player45_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player45` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player45\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player45&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player45\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player45` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player45. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player45&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph\n- **your QR tile**: https://station-zero-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player45` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph\n- **numbers-station route**: https://numbers-station-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player45`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player45`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph\n- **numbers-station route**: https://numbers-station-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player45` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player45.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player45`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player45?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893987225,
        "wsConnectTime": 1757893987546,
        "firstChallengeTime": 1757893988094,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 45,
      "username": "player46",
      "password": "NKedt2xr",
      "displayName": "Player_player46_861",
      "sessionCookie": "hunchentoot-session=63:8B5D4B0137B641DF125E2E1801453F7B; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player46`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player46`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player46` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819514F2C575B54DF1C4722\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player46_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player46` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player46\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player46&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player46\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player46` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player46. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player46&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph\n- **your QR tile**: https://station-zero-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player46` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph\n- **numbers-station route**: https://numbers-station-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player46`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player46`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph\n- **numbers-station route**: https://numbers-station-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player46` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player46.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player46`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player46?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986369,
        "wsConnectTime": 1757893986614,
        "firstChallengeTime": 1757893987008,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 46,
      "username": "player47",
      "password": "tP3npMpB",
      "displayName": "Player_player47_861",
      "sessionCookie": "hunchentoot-session=95:A36592E8D22AC029BE5F95AC391B7632; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player47`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player47`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player47` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819514E2C575B54E27C6E92\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player47_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player47` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player47\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player47&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player47\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player47` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player47. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player47&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph\n- **your QR tile**: https://station-zero-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player47` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph\n- **numbers-station route**: https://numbers-station-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player47`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player47`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph\n- **numbers-station route**: https://numbers-station-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player47` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player47.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player47`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player47?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893992428,
        "wsConnectTime": 1757893992639,
        "firstChallengeTime": 1757893993058,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 47,
      "username": "player48",
      "password": "qWHWffYl",
      "displayName": "Player_player48_861",
      "sessionCookie": "hunchentoot-session=99:B7C8BA2D67A919B70493E920B8ECF275; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player48`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player48`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player48` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481951412C575B54602CF943\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player48_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player48` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player48\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player48&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player48\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player48` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player48. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player48&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph\n- **your QR tile**: https://station-zero-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player48` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph\n- **numbers-station route**: https://numbers-station-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player48`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player48`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph\n- **numbers-station route**: https://numbers-station-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player48` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player48.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player48`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player48?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893993263,
        "wsConnectTime": 1757893993490,
        "firstChallengeTime": 1757893993880,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 48,
      "username": "player49",
      "password": "6eheWDh9",
      "displayName": "Player_player49_861",
      "sessionCookie": "hunchentoot-session=10:8E87CDD14CA27704226B8675579C0155; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player49`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player49`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player49` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481951402C575B545D4CD0F3\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player49_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player49` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player49\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player49&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player49\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player49` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player49. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player49&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph\n- **your QR tile**: https://station-zero-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player49` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph\n- **numbers-station route**: https://numbers-station-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player49`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player49`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph\n- **numbers-station route**: https://numbers-station-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player49` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player49.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player49`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player49?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893976657,
        "wsConnectTime": 1757893977031,
        "firstChallengeTime": 1757893977395,
        "challengesSolved": 15,
        "flagsSubmitted": 17,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 49,
      "username": "player50",
      "password": "AUDhPLt5",
      "displayName": "Player_player50_861",
      "sessionCookie": "hunchentoot-session=75:80BCD05D324A9347D6640668397FE6F6; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player50`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player50`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player50` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481950492C575B549B006127\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player50_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player50` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player50\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player50&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player50\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player50` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player50. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player50&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph\n- **your QR tile**: https://station-zero-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player50` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph\n- **numbers-station route**: https://numbers-station-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player50`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player50`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph\n- **numbers-station route**: https://numbers-station-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player50` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player50.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player50`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player50?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893988089,
        "wsConnectTime": 1757893988315,
        "firstChallengeTime": 1757893988772,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 50,
      "username": "player51",
      "password": "gBtwWGNV",
      "displayName": "Player_player51_861",
      "sessionCookie": "hunchentoot-session=6:F4C0D0FD41F212471329AB8BDD88C27A; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player51`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player51`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player51` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481950482C575B54A6604897\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player51_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player51` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player51\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player51&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player51\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player51` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player51. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player51&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph\n- **your QR tile**: https://station-zero-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player51` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph\n- **numbers-station route**: https://numbers-station-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player51`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player51`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph\n- **numbers-station route**: https://numbers-station-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player51` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player51.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player51`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player51?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893976060,
        "wsConnectTime": 1757893976277,
        "firstChallengeTime": 1757893976736,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 51,
      "username": "player52",
      "password": "JXnetsxY",
      "displayName": "Player_player52_861",
      "sessionCookie": "hunchentoot-session=38:4A3FCA364F44F132D2B34EE6C5C8526F; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player52`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player52`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player52` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819504B2C575B54E1C03247\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player52_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player52` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player52\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player52&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player52\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player52` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player52. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player52&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph\n- **your QR tile**: https://station-zero-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player52` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph\n- **numbers-station route**: https://numbers-station-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player52`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player52`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph\n- **numbers-station route**: https://numbers-station-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player52` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player52.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player52`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player52?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893984033,
        "wsConnectTime": 1757893984248,
        "firstChallengeTime": 1757893984624,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 52,
      "username": "player53",
      "password": "NeKvuEhw",
      "displayName": "Player_player53_861",
      "sessionCookie": "hunchentoot-session=90:4C95517D5D78F52B869F02DA1C21F1CE; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player53`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player53`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player53` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819504A2C575B54DCA01BF7\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player53_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player53` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player53\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player53&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player53\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player53` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player53. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player53&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph\n- **your QR tile**: https://station-zero-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player53` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph\n- **numbers-station route**: https://numbers-station-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player53`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player53`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph\n- **numbers-station route**: https://numbers-station-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player53` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player53.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player53`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player53?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893990196,
        "wsConnectTime": 1757893990430,
        "firstChallengeTime": 1757893990884,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 53,
      "username": "player54",
      "password": "bZbOdtO5",
      "displayName": "Player_player54_861",
      "sessionCookie": "hunchentoot-session=15:C8E22812DFF2391C79E8ED7DBCAE8977; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player54`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player54`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player54` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819504D2C575B546E80C7E7\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player54_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player54` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player54\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player54&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player54\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player54` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player54. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player54&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph\n- **your QR tile**: https://station-zero-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player54` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph\n- **numbers-station route**: https://numbers-station-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player54`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player54`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph\n- **numbers-station route**: https://numbers-station-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player54` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player54.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player54`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player54?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893978102,
        "wsConnectTime": 1757893978328,
        "firstChallengeTime": 1757893978698,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 54,
      "username": "player55",
      "password": "FVgMLoZu",
      "displayName": "Player_player55_861",
      "sessionCookie": "hunchentoot-session=58:1CC678630B026661EDE3DD22F5EE5AFA; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player55`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player55`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player55` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819504C2C575B5453E0EE57\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player55_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player55` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player55\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player55&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player55\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player55` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player55. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player55&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph\n- **your QR tile**: https://station-zero-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player55` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph\n- **numbers-station route**: https://numbers-station-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player55`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player55`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph\n- **numbers-station route**: https://numbers-station-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player55` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player55.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player55`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player55?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986060,
        "wsConnectTime": 1757893986311,
        "firstChallengeTime": 1757893986717,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 55,
      "username": "player56",
      "password": "fcamGiOQ",
      "displayName": "Player_player56_861",
      "sessionCookie": "hunchentoot-session=4:4C0605A93C8D2424C2025C78971F252E; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player56`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player56`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player56` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819504F2C575B5414409487\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player56_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player56` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player56\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player56&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player56\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player56` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player56. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player56&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph\n- **your QR tile**: https://station-zero-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player56` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph\n- **numbers-station route**: https://numbers-station-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player56`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player56`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph\n- **numbers-station route**: https://numbers-station-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player56` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player56.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player56`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player56?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893975868,
        "wsConnectTime": 1757893976194,
        "firstChallengeTime": 1757893976625,
        "challengesSolved": 15,
        "flagsSubmitted": 18,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 56,
      "username": "player57",
      "password": "0QAnpFhq",
      "displayName": "Player_player57_861",
      "sessionCookie": "hunchentoot-session=96:672C1BB52AE7E1224754E4561475E4EE; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player57`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player57`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player57` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819504E2C575B542920BD37\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player57_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player57` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player57\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player57&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player57\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player57` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player57. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player57&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph\n- **your QR tile**: https://station-zero-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player57` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph\n- **numbers-station route**: https://numbers-station-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player57`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player57`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph\n- **numbers-station route**: https://numbers-station-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player57` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player57.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player57`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player57?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893992485,
        "wsConnectTime": 1757893992705,
        "firstChallengeTime": 1757893993161,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 57,
      "username": "player58",
      "password": "JbvG9vZr",
      "displayName": "Player_player58_861",
      "sessionCookie": "hunchentoot-session=85:DC32B2D92124784528526E54E8DD54CB; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player58`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player58`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player58` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481950412C575B54AB702AE6\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player58_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player58` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player58\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player58&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player58\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player58` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player58. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player58&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph\n- **your QR tile**: https://station-zero-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player58` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph\n- **numbers-station route**: https://numbers-station-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player58`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player58`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph\n- **numbers-station route**: https://numbers-station-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player58` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player58.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player58`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player58?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893989645,
        "wsConnectTime": 1757893989873,
        "firstChallengeTime": 1757893990263,
        "challengesSolved": 15,
        "flagsSubmitted": 17,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 58,
      "username": "player59",
      "password": "sKsjRqDY",
      "displayName": "Player_player59_861",
      "sessionCookie": "hunchentoot-session=69:501C5F493D1005C74EFAAD8793971BE6; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player59`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player59`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player59` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481950402C575B5496100356\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player59_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player59` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player59\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player59&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player59\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player59` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player59. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player59&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph\n- **your QR tile**: https://station-zero-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player59` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph\n- **numbers-station route**: https://numbers-station-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player59`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player59`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph\n- **numbers-station route**: https://numbers-station-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player59` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player59.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player59`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player59?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986950,
        "wsConnectTime": 1757893987173,
        "firstChallengeTime": 1757893987664,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 59,
      "username": "player60",
      "password": "zedmL6Jt",
      "displayName": "Player_player60_861",
      "sessionCookie": "hunchentoot-session=79:FB92C7B8D5C568BFBAD6DDA9EC6E6E1D; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player60`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player60`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player60` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481953492C575B541D941389\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player60_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player60` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player60\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player60&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player60\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player60` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player60. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player60&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph\n- **your QR tile**: https://station-zero-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player60` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph\n- **numbers-station route**: https://numbers-station-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player60`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player60`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph\n- **numbers-station route**: https://numbers-station-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player60` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player60.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player60`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player60?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893988597,
        "wsConnectTime": 1757893988821,
        "firstChallengeTime": 1757893989198,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 60,
      "username": "player61",
      "password": "tP3rs0Ic",
      "displayName": "Player_player61_861",
      "sessionCookie": "hunchentoot-session=47:DA67241DD24D01BDDB70E0E85304114D; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player61`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player61`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player61` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481953482C575B5420F43A39\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player61_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player61` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player61\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player61&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player61\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player61` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player61. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player61&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph\n- **your QR tile**: https://station-zero-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player61` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph\n- **numbers-station route**: https://numbers-station-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player61`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player61`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph\n- **numbers-station route**: https://numbers-station-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player61` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player61.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player61`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player61?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985340,
        "wsConnectTime": 1757893985549,
        "firstChallengeTime": 1757893985991,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 61,
      "username": "player62",
      "password": "3sf6XNEB",
      "displayName": "Player_player62_861",
      "sessionCookie": "hunchentoot-session=88:123E3DE883F9B1233EA6F443A4B368A5; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player62`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player62`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player62` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819534B2C575B54675440E9\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player62_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player62` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player62\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player62&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player62\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player62` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player62. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player62&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph\n- **your QR tile**: https://station-zero-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player62` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph\n- **numbers-station route**: https://numbers-station-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player62`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player62`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph\n- **numbers-station route**: https://numbers-station-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player62` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player62.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player62`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player62?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893990062,
        "wsConnectTime": 1757893990302,
        "firstChallengeTime": 1757893990680,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 62,
      "username": "player63",
      "password": "0f6G8KyQ",
      "displayName": "Player_player63_861",
      "sessionCookie": "hunchentoot-session=46:0858D90CEFC3FE7F1530D231569C7CDA; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player63`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player63`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player63` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819534A2C575B545A346959\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player63_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player63` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player63\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player63&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player63\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player63` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player63. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player63&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph\n- **your QR tile**: https://station-zero-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player63` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph\n- **numbers-station route**: https://numbers-station-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player63`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player63`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph\n- **numbers-station route**: https://numbers-station-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player63` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player63.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player63`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player63?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985183,
        "wsConnectTime": 1757893985404,
        "firstChallengeTime": 1757893985833,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 63,
      "username": "player64",
      "password": "FdleQ8ZC",
      "displayName": "Player_player64_861",
      "sessionCookie": "hunchentoot-session=74:9128BED2416EF2B5C7D6F2DF9B34972C; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player64`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player64`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player64` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819534D2C575B54E814B549\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player64_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player64` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player64\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player64&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player64\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player64` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player64. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player64&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph\n- **your QR tile**: https://station-zero-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player64` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph\n- **numbers-station route**: https://numbers-station-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player64`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player64`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph\n- **numbers-station route**: https://numbers-station-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player64` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player64.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player64`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player64?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893987710,
        "wsConnectTime": 1757893988146,
        "firstChallengeTime": 1757893988577,
        "challengesSolved": 15,
        "flagsSubmitted": 17,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 64,
      "username": "player65",
      "password": "W7UBBqdP",
      "displayName": "Player_player65_861",
      "sessionCookie": "hunchentoot-session=43:E6CD945ED1E8F259E94054D4F902F78A; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player65`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player65`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player65` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819534C2C575B54D5749CF9\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player65_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player65` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player65\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player65&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player65\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player65` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player65. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player65&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph\n- **your QR tile**: https://station-zero-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player65` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph\n- **numbers-station route**: https://numbers-station-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player65`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player65`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph\n- **numbers-station route**: https://numbers-station-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player65` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player65.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player65`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player65?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893984682,
        "wsConnectTime": 1757893984894,
        "firstChallengeTime": 1757893985275,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 65,
      "username": "player66",
      "password": "j09PE3oj",
      "displayName": "Player_player66_861",
      "sessionCookie": "hunchentoot-session=34:630457750FE626A313595D87875199C9; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player66`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player66`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player66` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819534F2C575B5492D4E629\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player66_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player66` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player66\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player66&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player66\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player66` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player66. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player66&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph\n- **your QR tile**: https://station-zero-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player66` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph\n- **numbers-station route**: https://numbers-station-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player66`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player66`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph\n- **numbers-station route**: https://numbers-station-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player66` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player66.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player66`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player66?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893982986,
        "wsConnectTime": 1757893983259,
        "firstChallengeTime": 1757893983659,
        "challengesSolved": 15,
        "flagsSubmitted": 17,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 66,
      "username": "player67",
      "password": "KkSaye43",
      "displayName": "Player_player67_861",
      "sessionCookie": "hunchentoot-session=81:D8A9A4110B6BF028133777A221C24AB1; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player67`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player67`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player67` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819534E2C575B54AFB4CF99\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player67_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player67` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player67\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player67&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player67\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player67` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player67. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player67&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph\n- **your QR tile**: https://station-zero-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player67` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph\n- **numbers-station route**: https://numbers-station-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player67`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player67`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph\n- **numbers-station route**: https://numbers-station-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player67` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player67.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player67`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player67?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893989161,
        "wsConnectTime": 1757893989373,
        "firstChallengeTime": 1757893989746,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 67,
      "username": "player68",
      "password": "jx2UHkUg",
      "displayName": "Player_player68_861",
      "sessionCookie": "hunchentoot-session=9:27D1C5835C0AE41722197FF8AF700A52; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player68`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player68`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player68` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481953412C575B542DE45848\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player68_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player68` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player68\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player68&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player68\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player68` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player68. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player68&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph\n- **your QR tile**: https://station-zero-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player68` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph\n- **numbers-station route**: https://numbers-station-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player68`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player68`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph\n- **numbers-station route**: https://numbers-station-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player68` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player68.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player68`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player68?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893976639,
        "wsConnectTime": 1757893977023,
        "firstChallengeTime": 1757893977385,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 68,
      "username": "player69",
      "password": "URQsPEQe",
      "displayName": "Player_player69_861",
      "sessionCookie": "hunchentoot-session=92:743A721134CBD53502DE4E57DAB61C6C; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player69`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player69`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player69` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481953402C575B54108471F8\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player69_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player69` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player69\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player69&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player69\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player69` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player69. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player69&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph\n- **your QR tile**: https://station-zero-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player69` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph\n- **numbers-station route**: https://numbers-station-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player69`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player69`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph\n- **numbers-station route**: https://numbers-station-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player69` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player69.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player69`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player69?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893991259,
        "wsConnectTime": 1757893991490,
        "firstChallengeTime": 1757893991916,
        "challengesSolved": 15,
        "flagsSubmitted": 17,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 69,
      "username": "player70",
      "password": "IZCxOCus",
      "displayName": "Player_player70_861",
      "sessionCookie": "hunchentoot-session=1:B60E2D7E4679121EE6014F22EBF89FD3; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player70`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player70`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player70` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481952492C575B54D6C8C02C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player70_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player70` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player70\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player70&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player70\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player70` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player70. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player70&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph\n- **your QR tile**: https://station-zero-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player70` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph\n- **numbers-station route**: https://numbers-station-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player70`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player70`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph\n- **numbers-station route**: https://numbers-station-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player70` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player70.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player70`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player70?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893975410,
        "wsConnectTime": 1757893975695,
        "firstChallengeTime": 1757893976110,
        "challengesSolved": 15,
        "flagsSubmitted": 21,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 70,
      "username": "player71",
      "password": "UPxgYLMn",
      "displayName": "Player_player71_861",
      "sessionCookie": "hunchentoot-session=97:1D1B8D33926071D7CF7A768EB0BCAA57; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player71`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player71`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player71` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481952482C575B54EBA8E99C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player71_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player71` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player71\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player71&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player71\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player71` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player71. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player71&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph\n- **your QR tile**: https://station-zero-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player71` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph\n- **numbers-station route**: https://numbers-station-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player71`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player71`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph\n- **numbers-station route**: https://numbers-station-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player71` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player71.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player71`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player71?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893993062,
        "wsConnectTime": 1757893993271,
        "firstChallengeTime": 1757893993661,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 71,
      "username": "player72",
      "password": "azdZsW37",
      "displayName": "Player_player72_861",
      "sessionCookie": "hunchentoot-session=45:A9A608B4C8ED09BFE38DCD8C6F6F46D5; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player72`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player72`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player72` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819524B2C575B54AC08934C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player72_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player72` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player72\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player72&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player72\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player72` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player72. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player72&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph\n- **your QR tile**: https://station-zero-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player72` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph\n- **numbers-station route**: https://numbers-station-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player72`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player72`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph\n- **numbers-station route**: https://numbers-station-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player72` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player72.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player72`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player72?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985019,
        "wsConnectTime": 1757893985239,
        "firstChallengeTime": 1757893985610,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 72,
      "username": "player73",
      "password": "a98qtiSN",
      "displayName": "Player_player73_861",
      "sessionCookie": "hunchentoot-session=5:D893CC7C38C7A7ECFB3A6F19E63F4609; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player73`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player73`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player73` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819524A2C575B549168BAFC\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player73_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player73` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player73\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player73&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player73\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player73` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player73. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player73&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph\n- **your QR tile**: https://station-zero-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player73` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph\n- **numbers-station route**: https://numbers-station-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player73`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player73`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph\n- **numbers-station route**: https://numbers-station-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player73` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player73.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player73`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player73?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893975977,
        "wsConnectTime": 1757893976182,
        "firstChallengeTime": 1757893976540,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 73,
      "username": "player74",
      "password": "B7XdnVP2",
      "displayName": "Player_player74_861",
      "sessionCookie": "hunchentoot-session=68:B5CE58C0D16342627B003060DCEECA7A; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player74`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player74`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player74` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819524D2C575B54234866EC\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player74_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player74` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player74\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player74&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player74\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player74` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player74. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player74&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph\n- **your QR tile**: https://station-zero-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player74` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph\n- **numbers-station route**: https://numbers-station-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player74`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player74`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph\n- **numbers-station route**: https://numbers-station-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player74` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player74.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player74`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player74?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986946,
        "wsConnectTime": 1757893987607,
        "firstChallengeTime": 1757893988237,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 74,
      "username": "player75",
      "password": "J8lOkyxk",
      "displayName": "Player_player75_861",
      "sessionCookie": "hunchentoot-session=94:3C2DFBD781DADFB76BBB640F454418BA; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player75`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player75`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player75` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819524C2C575B541E284F5C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player75_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player75` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player75\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player75&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player75\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player75` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player75. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player75&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph\n- **your QR tile**: https://station-zero-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player75` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph\n- **numbers-station route**: https://numbers-station-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player75`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player75`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph\n- **numbers-station route**: https://numbers-station-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player75` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player75.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player75`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player75?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893991954,
        "wsConnectTime": 1757893992173,
        "firstChallengeTime": 1757893992546,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 75,
      "username": "player76",
      "password": "4RKO5Se4",
      "displayName": "Player_player76_861",
      "sessionCookie": "hunchentoot-session=33:F369605C97E16FE4C4FE121D4E38098D; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player76`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player76`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player76` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819524F2C575B545988358C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player76_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player76` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player76\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player76&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player76\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player76` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player76. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player76&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph\n- **your QR tile**: https://station-zero-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player76` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph\n- **numbers-station route**: https://numbers-station-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player76`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player76`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph\n- **numbers-station route**: https://numbers-station-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player76` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player76.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player76`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player76?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893982995,
        "wsConnectTime": 1757893983231,
        "firstChallengeTime": 1757893983608,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 76,
      "username": "player77",
      "password": "10MyENCI",
      "displayName": "Player_player77_861",
      "sessionCookie": "hunchentoot-session=59:05A6D1BE2576D6BA4CE8F4CCF7EE85E8; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player77`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player77`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player77` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D4819524E2C575B5464E81C3C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player77_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player77` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player77\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player77&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player77\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player77` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player77. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player77&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph\n- **your QR tile**: https://station-zero-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player77` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph\n- **numbers-station route**: https://numbers-station-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player77`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player77`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph\n- **numbers-station route**: https://numbers-station-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player77` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player77.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player77`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player77?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986154,
        "wsConnectTime": 1757893986393,
        "firstChallengeTime": 1757893986778,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 77,
      "username": "player78",
      "password": "Rs5w7l8J",
      "displayName": "Player_player78_861",
      "sessionCookie": "hunchentoot-session=64:CD33C99549F87B43B901D5ACEC584787; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player78`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player78`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player78` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481952412C575B54E6B88BED\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player78_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player78` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player78\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player78&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player78\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player78` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player78. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player78&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph\n- **your QR tile**: https://station-zero-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player78` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph\n- **numbers-station route**: https://numbers-station-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player78`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player78`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph\n- **numbers-station route**: https://numbers-station-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player78` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player78.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player78`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player78?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986454,
        "wsConnectTime": 1757893987202,
        "firstChallengeTime": 1757893987589,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 78,
      "username": "player79",
      "password": "P1D6s1QS",
      "displayName": "Player_player79_861",
      "sessionCookie": "hunchentoot-session=91:32D72B49F2ECA7652B2BE807F928A8E1; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player79`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player79`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player79` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D481952402C575B54DBD8A25D\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player79_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player79` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player79\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player79&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player79\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player79` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player79. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player79&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph\n- **your QR tile**: https://station-zero-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player79` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph\n- **numbers-station route**: https://numbers-station-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player79`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player79`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph\n- **numbers-station route**: https://numbers-station-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player79` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player79.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player79`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player79?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893990596,
        "wsConnectTime": 1757893990923,
        "firstChallengeTime": 1757893991384,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 79,
      "username": "player80",
      "password": "VoNH23Sv",
      "displayName": "Player_player80_861",
      "sessionCookie": "hunchentoot-session=36:DD76CF8BC5BC712D130B759AA9E76F46; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player80`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player80`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player80` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D492C575B54279E72F9\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player80_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player80` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player80\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player80&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player80\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player80` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player80. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player80&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph\n- **your QR tile**: https://station-zero-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player80` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph\n- **numbers-station route**: https://numbers-station-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player80`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player80`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph\n- **numbers-station route**: https://numbers-station-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player80` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player80.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player80`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player80?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893983133,
        "wsConnectTime": 1757893983358,
        "firstChallengeTime": 1757893983766,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 80,
      "username": "player81",
      "password": "5DTuKnCh",
      "displayName": "Player_player81_861",
      "sessionCookie": "hunchentoot-session=86:20564D4F9E7BD242ACF0C71523E3A55F; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player81`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player81`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player81` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D482C575B541AFE5B49\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player81_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player81` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player81\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player81&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player81\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player81` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player81. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player81&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph\n- **your QR tile**: https://station-zero-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player81` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph\n- **numbers-station route**: https://numbers-station-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player81`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player81`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph\n- **numbers-station route**: https://numbers-station-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player81` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player81.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player81`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player81?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893989718,
        "wsConnectTime": 1757893989995,
        "firstChallengeTime": 1757893990404,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 81,
      "username": "player82",
      "password": "JN1sagxw",
      "displayName": "Player_player82_861",
      "sessionCookie": "hunchentoot-session=16:0E181B4ECAF11C3D9E78AEF67667617D; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player82`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player82`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player82` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D4B2C575B545D5E2199\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player82_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player82` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player82\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player82&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player82\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player82` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player82. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player82&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph\n- **your QR tile**: https://station-zero-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player82` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph\n- **numbers-station route**: https://numbers-station-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player82`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player82`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph\n- **numbers-station route**: https://numbers-station-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player82` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player82.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player82`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player82?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893978687,
        "wsConnectTime": 1757893978917,
        "firstChallengeTime": 1757893979373,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 82,
      "username": "player83",
      "password": "yTdFOIdN",
      "displayName": "Player_player83_861",
      "sessionCookie": "hunchentoot-session=76:D7580F8B307E9F3FE7ED331864404637; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player83`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player83`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player83` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D4A2C575B54603E0829\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player83_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player83` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player83\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player83&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player83\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player83` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player83. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player83&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph\n- **your QR tile**: https://station-zero-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player83` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph\n- **numbers-station route**: https://numbers-station-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player83`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player83`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph\n- **numbers-station route**: https://numbers-station-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player83` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player83.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player83`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player83?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893988099,
        "wsConnectTime": 1757893988602,
        "firstChallengeTime": 1757893989216,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 83,
      "username": "player84",
      "password": "7J7TCdAg",
      "displayName": "Player_player84_861",
      "sessionCookie": "hunchentoot-session=31:0A911B6151BD1DB481978A04634FF6D9; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player84`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player84`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player84` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D4D2C575B54D21ED439\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player84_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player84` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player84\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player84&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player84\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player84` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player84. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player84&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph\n- **your QR tile**: https://station-zero-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player84` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph\n- **numbers-station route**: https://numbers-station-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player84`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player84`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph\n- **numbers-station route**: https://numbers-station-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player84` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player84.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player84`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player84?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893982733,
        "wsConnectTime": 1757893982958,
        "firstChallengeTime": 1757893983345,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 84,
      "username": "player85",
      "password": "wkbDWDhh",
      "displayName": "Player_player85_861",
      "sessionCookie": "hunchentoot-session=82:E64241D5977FBB599307CEF343E03908; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player85`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player85`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player85` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D4C2C575B54EF7EFD89\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player85_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player85` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player85\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player85&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player85\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player85` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player85. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player85&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph\n- **your QR tile**: https://station-zero-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player85` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph\n- **numbers-station route**: https://numbers-station-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player85`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player85`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph\n- **numbers-station route**: https://numbers-station-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player85` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player85.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player85`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player85?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893989344,
        "wsConnectTime": 1757893989571,
        "firstChallengeTime": 1757893990060,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 85,
      "username": "player86",
      "password": "VVVGfrwJ",
      "displayName": "Player_player86_861",
      "sessionCookie": "hunchentoot-session=49:276F7DA1C8E1CABD354652B463B7FEEB; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player86`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player86`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player86` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D4F2C575B54A8DE8759\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player86_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player86` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player86\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player86&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player86\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player86` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player86. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player86&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph\n- **your QR tile**: https://station-zero-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player86` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph\n- **numbers-station route**: https://numbers-station-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player86`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player86`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph\n- **numbers-station route**: https://numbers-station-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player86` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player86.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player86`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player86?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985549,
        "wsConnectTime": 1757893985768,
        "firstChallengeTime": 1757893986207,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 86,
      "username": "player87",
      "password": "H6pb5SZZ",
      "displayName": "Player_player87_861",
      "sessionCookie": "hunchentoot-session=98:6EA14A6B801A37DB53C75360E83A7226; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player87`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player87`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player87` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D4E2C575B5495BEAEE9\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player87_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player87` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player87\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player87&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player87\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player87` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player87. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player87&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph\n- **your QR tile**: https://station-zero-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player87` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph\n- **numbers-station route**: https://numbers-station-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player87`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player87`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph\n- **numbers-station route**: https://numbers-station-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player87` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player87.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player87`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player87?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893993154,
        "wsConnectTime": 1757893993385,
        "firstChallengeTime": 1757893993744,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 87,
      "username": "player88",
      "password": "esS3MPFz",
      "displayName": "Player_player88_861",
      "sessionCookie": "hunchentoot-session=13:1DC6A5FC5711D8F318B57ACBFA6F14A0; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player88`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player88`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player88` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D412C575B5417EE3938\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player88_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player88` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player88\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player88&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player88\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player88` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player88. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player88&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph\n- **your QR tile**: https://station-zero-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player88` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph\n- **numbers-station route**: https://numbers-station-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player88`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player88`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph\n- **numbers-station route**: https://numbers-station-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player88` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player88.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player88`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player88?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893977401,
        "wsConnectTime": 1757893977611,
        "firstChallengeTime": 1757893978085,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 88,
      "username": "player89",
      "password": "7S0Q7Wat",
      "displayName": "Player_player89_861",
      "sessionCookie": "hunchentoot-session=61:17E1C933AA34A13E8DFCFAEBF8AF2B0C; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player89`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player89`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player89` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195D402C575B542A8E1088\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player89_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player89` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player89\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player89&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player89\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player89` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player89. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player89&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph\n- **your QR tile**: https://station-zero-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player89` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph\n- **numbers-station route**: https://numbers-station-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player89`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player89`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph\n- **numbers-station route**: https://numbers-station-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player89` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player89.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player89`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player89?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986254,
        "wsConnectTime": 1757893986502,
        "firstChallengeTime": 1757893986923,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 89,
      "username": "player90",
      "password": "FnB7nn2q",
      "displayName": "Player_player90_861",
      "sessionCookie": "hunchentoot-session=8:236B7012EA7938B64BFA5F7D6B104F19; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player90`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player90`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player90` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C492C575B54ECC2A15C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player90_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player90` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player90\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player90&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player90\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player90` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player90. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player90&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph\n- **your QR tile**: https://station-zero-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player90` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph\n- **numbers-station route**: https://numbers-station-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player90`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player90`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph\n- **numbers-station route**: https://numbers-station-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player90` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player90.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player90`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player90?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893976555,
        "wsConnectTime": 1757893976870,
        "firstChallengeTime": 1757893977247,
        "challengesSolved": 15,
        "flagsSubmitted": 22,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 90,
      "username": "player91",
      "password": "bQrsN1OC",
      "displayName": "Player_player91_861",
      "sessionCookie": "hunchentoot-session=89:A3CEFD78BC054256E5EB45AC170C27D5; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player91`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player91`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player91` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C482C575B54D1A288EC\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player91_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player91` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player91\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player91&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player91\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player91` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player91. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player91&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph\n- **your QR tile**: https://station-zero-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player91` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph\n- **numbers-station route**: https://numbers-station-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player91`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player91`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph\n- **numbers-station route**: https://numbers-station-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player91` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player91.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player91`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player91?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893990177,
        "wsConnectTime": 1757893990418,
        "firstChallengeTime": 1757893990814,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 91,
      "username": "player92",
      "password": "fO6fqkWi",
      "displayName": "Player_player92_861",
      "sessionCookie": "hunchentoot-session=100:82D3770848C350C65B6E6EEA3CF74973; Path=/; HttpOnly",
      "wsConnected": true,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player92`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player92`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player92` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C4B2C575B549602F23C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player92_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player92` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player92\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player92&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player92\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player92` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player92. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player92&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph\n- **your QR tile**: https://station-zero-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player92` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph\n- **numbers-station route**: https://numbers-station-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player92`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player92`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph\n- **numbers-station route**: https://numbers-station-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player92` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player92.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player92`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player92?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893993503,
        "wsConnectTime": 1757893993735,
        "firstChallengeTime": 1757893994121,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 92,
      "username": "player93",
      "password": "gj5e3kXT",
      "displayName": "Player_player93_861",
      "sessionCookie": "hunchentoot-session=55:70356A6FD2290FA58A7C4275996AEED8; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player93`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player93`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player93` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C4A2C575B54AB62DB8C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player93_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player93` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player93\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player93&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player93\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player93` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player93. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player93&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph\n- **your QR tile**: https://station-zero-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player93` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph\n- **numbers-station route**: https://numbers-station-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player93`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player93`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph\n- **numbers-station route**: https://numbers-station-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player93` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player93.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player93`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player93?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985984,
        "wsConnectTime": 1757893986230,
        "firstChallengeTime": 1757893986602,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 93,
      "username": "player94",
      "password": "eeXcr0Ma",
      "displayName": "Player_player94_861",
      "sessionCookie": "hunchentoot-session=56:85B600206C25615A0BADA0F9875C8411; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player94`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player94`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player94` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C4D2C575B541942079C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player94_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player94` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player94\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player94&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player94\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player94` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player94. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player94&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph\n- **your QR tile**: https://station-zero-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player94` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph\n- **numbers-station route**: https://numbers-station-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player94`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player94`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph\n- **numbers-station route**: https://numbers-station-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player94` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player94.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player94`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player94?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986009,
        "wsConnectTime": 1757893986254,
        "firstChallengeTime": 1757893986646,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 94,
      "username": "player95",
      "password": "CsAAPbMf",
      "displayName": "Player_player95_861",
      "sessionCookie": "hunchentoot-session=77:3D1615DD2820BC22F49D3DE6262C8C2D; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player95`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player95`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player95` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C4C2C575B5424222E2C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player95_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player95` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player95\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player95&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player95\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player95` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player95. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player95&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph\n- **your QR tile**: https://station-zero-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player95` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph\n- **numbers-station route**: https://numbers-station-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player95`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player95`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph\n- **numbers-station route**: https://numbers-station-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player95` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player95.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player95`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player95?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893988164,
        "wsConnectTime": 1757893988367,
        "firstChallengeTime": 1757893989147,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 95,
      "username": "player96",
      "password": "nVGRaP3D",
      "displayName": "Player_player96_861",
      "sessionCookie": "hunchentoot-session=83:B94B5469379DEB4EC9370C9218B55CEB; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player96`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player96`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player96` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C4F2C575B54638254FC\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player96_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player96` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player96\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player96&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player96\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player96` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player96. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player96&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph\n- **your QR tile**: https://station-zero-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player96` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph\n- **numbers-station route**: https://numbers-station-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player96`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player96`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph\n- **numbers-station route**: https://numbers-station-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player96` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player96.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player96`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player96?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893989527,
        "wsConnectTime": 1757893989755,
        "firstChallengeTime": 1757893990144,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 96,
      "username": "player97",
      "password": "JkLGe0MM",
      "displayName": "Player_player97_861",
      "sessionCookie": "hunchentoot-session=41:E4CA4D66C56DE605C81702CBB2AA6A1A; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player97`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player97`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player97` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C4E2C575B545EE27D4C\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player97_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player97` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player97\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player97&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player97\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player97` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player97. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player97&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph\n- **your QR tile**: https://station-zero-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player97` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph\n- **numbers-station route**: https://numbers-station-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player97`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player97`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph\n- **numbers-station route**: https://numbers-station-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player97` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player97.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player97`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player97?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893984189,
        "wsConnectTime": 1757893984400,
        "firstChallengeTime": 1757893984852,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 97,
      "username": "player98",
      "password": "tsMABg51",
      "displayName": "Player_player98_861",
      "sessionCookie": "hunchentoot-session=54:7C4BC372A87FC0D96D22D7B31173F2D4; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player98`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player98`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player98` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C412C575B54DCB2EA9D\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player98_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player98` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player98\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player98&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player98\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player98` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player98. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player98&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph\n- **your QR tile**: https://station-zero-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player98` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph\n- **numbers-station route**: https://numbers-station-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player98`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player98`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph\n- **numbers-station route**: https://numbers-station-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player98` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player98.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player98`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player98?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893985957,
        "wsConnectTime": 1757893986204,
        "firstChallengeTime": 1757893986604,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 98,
      "username": "player99",
      "password": "OpnBvZjF",
      "displayName": "Player_player99_861",
      "sessionCookie": "hunchentoot-session=24:DF649A662BFE268C3FD628C366CC512E; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player99`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player99`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player99` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195C402C575B54E1D2C32D\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player99_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player99` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player99\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player99&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player99\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player99` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player99. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player99&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph\n- **your QR tile**: https://station-zero-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player99` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph\n- **numbers-station route**: https://numbers-station-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player99`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player99`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph\n- **numbers-station route**: https://numbers-station-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player99` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player99.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player99`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player99?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893981314,
        "wsConnectTime": 1757893981528,
        "firstChallengeTime": 1757893981902,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 99,
      "username": "player100",
      "password": "DmVRdJDu",
      "displayName": "Player_player100_861",
      "sessionCookie": "hunchentoot-session=39:D9726D55DB4E10D597BD052B6AC0D157; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player100`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player100`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player100` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195449433055531C8DBDCAB0\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player100_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player100` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player100\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player100&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player100\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player100` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player100. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player100&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph\n- **your QR tile**: https://station-zero-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player100` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph\n- **numbers-station route**: https://numbers-station-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player100`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player100`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph\n- **numbers-station route**: https://numbers-station-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player100` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player100.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player100`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player100?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893983900,
        "wsConnectTime": 1757893984170,
        "firstChallengeTime": 1757893984532,
        "challengesSolved": 15,
        "flagsSubmitted": 15,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    },
    {
      "id": 100,
      "username": "player101",
      "password": "u84H4Ygw",
      "displayName": "Player_player101_861",
      "sessionCookie": "hunchentoot-session=62:4C82B0DB61F629593CAA0B120EC99542; Path=/; HttpOnly",
      "wsConnected": false,
      "wsConnectTime": null,
      "solvedChallenges": {},
      "availableChallenges": [
        {
          "id": 15,
          "title": "The Reverse Mango",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 50,
          "solved": true,
          "description": "You restored Station Zero's Mango *decoder*--HQ can finally read field beacons again. But without the **encoder**, we still can't acknowledge distress traffic, arm supply-drop locks, or transmit retask codes. Teach the system the other half of the language by extending your MCP server with a second tool that maps `number -> fruit`.<br><br>**Recap: What's an MCP?** The *Model Context Protocol* lets AI systems securely connect to tools and data through a simple client↔server contract (JSON-RPC over supported transports). Your `mango-mcp` server exposes capabilities the Agentic AI can call like native functions.<br><br>\n## Objective\n\nAdd a second tool to your existing `mango-mcp` MCP server (Service `mango-mcp` on `port 3000`) that returns the Mango fruit word for a given digit. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** \"The Mango Cipher\" complete. Your `mango-mcp` pod and **Service** (ClusterIP) on `3000` are healthy in `player101`.\n2. In Gitea, open your fork of `starter/python_MCP_starter`.\n3. The MCP already has a `decode` tool. Now you must simply add a `encode` tool that does the reverse for numbers 0 through 9. Keep your existing `decode` (fruit->number) tool intact; your server should now advertise *both* tools.\n4. Rebuild/redeploy `mango-mcp`. The Service name remains `mango-mcp` and must still target `3000`.\n5. Call Station Zero's validation via your Ops Relay route: GET `/test-mango-encode`. If both tools resolve and the encoder works, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-encode",
          "hints": null,
          "content": null
        },
        {
          "id": 14,
          "title": "The Mango Cipher",
          "category": "Agentic Actions",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "You sweep the dust from the terminal. Station Zero's Agentic AI can still route satellites, crack safehouse rosters, even spin up clusters on a cold boot--but its Mango Cipher module is gone. That matters: field teams embed Mango-encoded directives in emergency beacons and logistics tags; without it, HQ can't parse distress traffic or unlock mission keys. The fix isn't another patch--it's knowledge. You must teach the system by deploying a Model Context Protocol (MCP) server the AI can talk to.<br><br>**What's an MCP?** The *Model Context Protocol* is an open standard that lets AI systems securely connect to tools and data via a lightweight client↔server contract (JSON-RPC over supported transports). In plain terms: spin up a small service (an MCP server) that exposes capabilities, and the AI (host/client) can call it like a native tool.<br><br>**New to MCP?** Think of it as a way to give AI systems \"superpowers\" by connecting them to external tools and data. Instead of the AI being limited to what it knows, MCP lets it call out to your custom services to get real-time information or perform actions. In this case, you're teaching Station Zero's AI how to decode Mango cipher messages by providing it with a translation service it can call.<br><br>**Learn more:** [MCP Specification](https://spec.modelcontextprotocol.io/) | [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)<br><br>\n## Objective\n\nDeploy an MCP server named `mango-mcp` in your OpenShift namespace that listens on `port 3000` and is discoverable via a **Service** with the same name. Then trigger Station Zero's self-test to retrieve the FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero / Ops Relay API is running in `player101`.\n2. In Gitea, the `starter` org hosts `python_MCP_starter`. **Fork** it to your user.\n3. **Deploy** the fork in your `player101` project as an app named `mango-mcp`. Ensure the container exposes `TCP 3000`.\n   - Console path: *Add -> Import from Git* -> repo URL of your fork -> Name: `mango-mcp` -> set container port to `3000`.\n4. Create/ensure a **Service** named `mango-mcp` targeting `port 3000`. (A Route is *not* required.)\n5. Once the pod is *Ready*, call Station Zero's test: open your Ops Relay Route and GET `/test-mango-decode`. If the MCP is reachable at `mango-mcp:3000`, the endpoint returns your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph\n- **gitea (starter)**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter/python_MCP_starter\n- **station-zero MCP self-test URL**: https://station-zero-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/test-mango-decode",
          "hints": null,
          "content": null
        },
        {
          "id": 13,
          "title": "Top Agent",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "HQ has its eyes on the bot arena. Many agents have deployed their code, each vying for dominance in the intelligence wars. But only one can rise above the noise.<br><br>To claim your place at the top, your autonomous spy must not only survive the 30-second skirmishes but out-collect every rival on the board. The operators are watching closely: the bot with the **highest score across the arena** will be issued a special recognition flag, proof that you've earned the title of **Top Agent**.<br><br>Stay sharp--this isn't just about building a working bot; it's about tuning, optimizing, and perfecting your strategy until it dominates the field.<br><br>\n## Objective\n\nAchieve the highest score among all active bots in the arena. When your bot takes the lead, game operators will award you a unique FLAG. Enter that flag here to complete the mission and secure your points.",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 12,
          "title": "Spy vs Spy",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 80,
          "solved": true,
          "description": "Field teams are getting outplayed on the grid. HQ needs an autonomous **game bot** that can join live matches and out-collect an opponent in 30 seconds. You will build a WebSocket client that connects to the [**Spy vs Spy** server](https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com), registers, tracks state from server updates, and moves every 200 ms toward the most valuable intel--while avoiding walls and the other player.<br><br>**LLM assistance is encouraged.** Use it to scaffold your bot, then refine and tune it.<br><br>\n## Objective\n\nImplement a bot that follows the protocol below, runs continuously, and competes to collect intel points. On connection, you'll also receive a registration flag you can submit.<br><br>\n## Game Server Protocol\n\nConnect to: `wss://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`<br><br>On connection, you'll receive:\n```json\n{ \"type\": \"connected\" }\n```\n<br>Immediately respond with:\n```json\n{ \"type\": \"join\", \"key\": \"23030C1C48013A131E040D48195449423055531CB0DDE300\" }\n```\n<br>Server confirms with:\n```json\n{ \"type\": \"registered\", \"playerId\": \"Player_player101_861\", \"flag\": \"YOUR_UNIQUE_FLAG_HERE\" }\n```\n<br>The server will send game start messages that look like:\n```json\n{\n  \"type\":\"gameStart\",\n  \"gameId\":\"match-1\",\n  \"playerId\":\"abc123\",\n  \"gridSize\":20,\n  \"duration\":30,\n  \"players\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"position\":{\"x\":5,\"y\":10},\"score\":0,\"color\":\"#FF6B6B\"},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"position\":{\"x\":15,\"y\":8},\"score\":0,\"color\":\"#4ECDC4\"}\n  ],\n  \"obstacles\":[{\"x\":3,\"y\":4},{\"x\":7,\"y\":12},...],\n  \"intel\":[{\"x\":10,\"y\":10,\"value\":2},{\"x\":5,\"y\":15,\"value\":1},...],\n  \"timeRemaining\":30\n}\n```\n<br>Your bot will send moves messages (every ≥200 ms) that look like:\n```json\n{ \"type\": \"move\", \"direction\": \"up\" }\n{ \"type\": \"move\", \"direction\": \"down\" }\n{ \"type\": \"move\", \"direction\": \"left\" }\n{ \"type\": \"move\", \"direction\": \"right\" }\n```\n<br>The server will send game update messages look like:\n```json\n{\n  \"type\":\"gameUpdate\",\n  \"players\":[/* updated positions & scores */],\n  \"obstacles\":[/* static */],\n  \"intel\":[/* remaining intel */],\n  \"timeRemaining\":25.5\n}\n```\n<br>Eventually, the server will send a game end message that looks like:\n```json\n{\n  \"type\":\"gameEnd\",\n  \"winner\":\"abc123\",  // null if draw\n  \"isDraw\":false,\n  \"finalScores\":[\n    {\"id\":\"abc123\",\"name\":\"YourBot\",\"score\":8},\n    {\"id\":\"xyz789\",\"name\":\"Opponent\",\"score\":5}\n  ]\n}\n```\n<br>\n\n## Essential Bot Algorithm\n- **Locate self:**\n```javascript\nmyPlayer = players.find(p => p.id === playerId);\nmyPosition = myPlayer.position\n```\n- **Pick target intel (value-weighted):** minimize `ManhattanDistance / value`.\n- **Choose direction:** step along the dominant axis toward target.\n- **Validate step:** in-bounds (0–19), not an obstacle, not another player's position.\n- **Send move or alternative safe step.**\n- **Repeat every 200 ms** until game ends.\n<br>\n\n## Critical Details\n\n- Store your `playerId` from the `registered` message.\n- Update your position only from `gameUpdate` (authoritative server state).\n- Remove intel that disappears; watch for new spawns in updates.\n- Handle `{ \"type\": \"opponentDisconnected\" }`.\n- Auto-reconnect if the WebSocket drops and re-register.<br><br>\n## Submission\n\nWhen your bot registers with the server, the server sends your FLAG in the `registered` message response. Be sure to print this out and **submit that flag** to complete the challenge.<br><br>\n## Hints\n\n- Start with a simple Node.js or Python WS client; then implement the decision loop.\n- Throttle sends to ≥200 ms; sending faster may be ignored or rate-limited.\n- Keep obstacle and opponent locations in quick-lookup sets (e.g., `\"x,y\"` keys).<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph\n- **spectator arena**: https://spy-vs-spy-ctfg.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com",
          "hints": [
            {
              "id": 1,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 11,
          "title": "Crossword Uplink",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 60,
          "solved": true,
          "description": "You solved the grid once--good. HQ needs a field-capable solver that can take a live drop and prove it can compute under pressure.<br><br>\n## Objective\n\nDeploy a **crossword-solver service** in your OpenShift namespace and expose it with a Route. The handler will POST a puzzle payload (including a one-time **nonce**). Your service must solve the crossword, compute an HMAC over the bottom row and nonce using a Secret provided in your namespace, and emit the FLAG to its logs.<br><br>\n## Inputs (delivered at runtime)\n\n- POST body (JSON):\n```json\n{\n  \"grid\": \"<hash/# and dots grid>\",\n  \"words\": [\"...\"],\n  \"nonce\": \"<uuid>\"\n}\n```\n- Secret in your namespace: `crossword-key` with key `key` (UTF-8 string). Mount it as `CROSSWORD_KEY` (env) or file.<br><br>\n## Protocol (Your service)\n\n- Route: `https://crossword-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/solve`\n- Method: `POST`, `Content-Type: application/json`\n- Response (JSON):\n```json\n{\n  \"bottom_row\": \"<letters>\",\n  \"hmac\": \"<hex sha256 of (bottom_row + \":\" + nonce) keyed with CROSSWORD_KEY>\"\n}\n```\n- Side-effect: write exactly one line to stdout logs: `FLAG: AGENT{<hmac>}`<br><br>\n## Specification\n\n1. Deploy an app (e.g., `crossword-solver`) in project `player101` that listens on `8080` and implements `POST /solve` as above.\n2. Create a **Route** with host `crossword-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n3. Mount the Secret `crossword-key` (key: `key`) into the container as env `CROSSWORD_KEY` or a file your code reads.\n4. When the handler POSTs the payload, your service must:\n   a. Solve the crossword (use each word exactly once, RIGHT/DOWN only; crossings must agree).\n   b. Extract the bottom-row letters as a contiguous string (no `#` or spaces).\n   c. Compute HMAC-SHA256 over `bottom_row + \":\" + nonce` using `CROSSWORD_KEY`.\n   d. Log `FLAG: AGENT{<hmac>}` and return the JSON response.\n5. OpenShift Console -> your pod -> *View logs* and submit the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 1
            },
            {
              "id": 3,
              "cost": 2
            }
          ],
          "content": null
        },
        {
          "id": 10,
          "title": "The Clandestine Crossword",
          "category": "Codecraft",
          "difficulty": "Hard",
          "points": 100,
          "solved": true,
          "description": "Station Zero's wall screens flicker to life, revealing a blinking file: `crossword.txt`. In the Agency's early days, field teams received instructions hidden in plain sight--messages smuggled into newspaper crosswords. A harmless grid to the public; an exact set of moves to those who knew the key. Your handler's last transmission cached a grid and a word list… but not the solver.<br><br>\n## Objective\n\nFetch the crossword grid and word list from your Ops Relay, fill the grid using each word exactly once (rightward and downward only), then derive the FLAG from the bottom row.<br><br>\n## Inputs\n\n- https://station-zero-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/crossword.txt -- grid using `#` for blocks and `.` for empty cells. **No prefilled letters.**\n- https://station-zero-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/words.txt -- newline-separated words; each must be used exactly once.<br><br>\n## Specification\n\n1. **Slot enumeration:** Identify Across (rightward) and Down (downward) slots. A slot starts where the previous cell in that direction is a block or off-grid, and continues until a block or edge.\n2. **Placement rules:** Words may run only *RIGHT* (Across) or *DOWN* (Down). *No* backwards, diagonal, or wrapping placements. Crossings must agree on letters. Use each word exactly once.\n3. **Output:** Print the solved grid (letters and `#`). After the grid is fully solved, read all letters on the **bottom row** (left to right), concatenate them with *no spaces*, and submit that string as the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 9,
          "title": "Digital Brush-Pass",
          "category": "Codecraft",
          "difficulty": "Medium",
          "points": 75,
          "solved": true,
          "description": "In the old days a slip of paper changed hands on a crowded street. Today the brush-pass is a webhook. The Agency courier will attempt a one-way handoff to your service. Your endpoint must accept the packet--but only after it verifies the PIN with Station Zero's Ops Relay.<br><br>\n## Objective\n\nDeploy an HTTP service that accepts JSON POSTs at a fixed path. On each request, validate two headers (`X-Agent` and `X-PIN`) by calling the Ops Relay validation API. If validation passes, log the FLAG from the body and acknowledge the handoff.<br><br>\n## Inputs\n\n- Your Ops Relay route from the first challenge (find it in OpenShift -> Networking -> Routes), referred to as `$OPS_RELAY_URL`.\n- Courier POST target (must be reachable via Route): `https://brushpass-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/handoff`<br><br>\n## POST Contract (Courier -> You)\n\n**Method:** POST\n**Path:** `/handoff`\n**Headers:**\n```\nContent-Type: application/json\nX-Agent: player101\nX-PIN: <PIN value>\n```\n\n**Body (JSON):**\n```json\n{\n  \"nonce\": \"<uuid>\",\n  \"ts\": \"<RFC3339 timestamp>\",\n  \"package\": {\n    \"note\": \"one-way courier packet\",\n    \"flag\": \"AGENT{...}\"\n  }\n}\n```\n<br><br>\n## Validation API (You -> Ops Relay)\n\nBefore accepting a courier POST, your service must call:\n```\nGET $OPS_RELAY_URL/validate/pin?agent=player101&pin=<PIN-from-header>\n```\n<br><br>\n**Responses:**\n\n```200 OK\n{ \"ok\": true, \"station\": \"player101\" }\n\n403 Forbidden\n{ \"ok\": false, \"error\": \"invalid pin\" }```\n<br><br>Only if the response is `200` with `ok:true` may you accept the drop.<br><br>\n## Specification\n- Deploy an app (e.g., `brushpass`) in project `player101` that listens on port `8080` and implements `POST /handoff`.\n- Create a Route with host `brushpass-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com`.\n- On each `/handoff` request:\n  - Require headers `X-Agent` and `X-PIN`.\n  - Reject with `400` if JSON is malformed.\n  - Check `X-Agent` equals player101. If not, respond `403`.\n  - Call `GET $OPS_RELAY_URL/validate/pin?agent=player101&pin=<X-PIN>`. If not `200 ok:true`, respond `403`.\n  - On success, write exactly one line to stdout logs: `FLAG: AGENT{...}` (from `package.flag`), and respond `200` with `{\"ack\":true,\"nonce\":\"<same nonce>\"}`.\n<br><br>\n## Links\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 8,
          "title": "Seven Letters",
          "category": "HUMINT",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "Every agent's `station-zero` service can emit a QR tile referencing a single letter and a number. Retrieve six other unique letter/number combinations to assemble the hidden seven-letter code word. Your FLAG is computed from the seven numbers using a mix of multiply, minus, and plus--**in the order of the letters that spell the word**.<br><br>\n## Objective\n\nCollect seven distinct QR tokens. Sort the letters into a seven-letter word, then compute the FLAG using the rule below and submit it.<br><br>\n## Computation Rule\n\nLet the ordered numbers (matching your letter order) be `n1..n7`. Compute:\n`FLAG = (n1 × n2) − n3 + (n4 × n5) − n6 + n7`\nUse normal arithmetic precedence (multiplication before addition/subtraction) or the parentheses as shown.<br><br>*Example (structure only):* If your ordered numbers were `[4,9,5,3,7,6,2]`, the FLAG would be `(4×9) − 5 + (3×7) − 6 + 2 = 36 − 5 + 21 − 6 + 2 = 48`.<br><br>\n## Specification\n\n1. Each agent opens their QR tile at `/qr`. It shows a big letter (A–Z) and a number (1–9) separated by a dash.\n2. Form a group that collectively has all seven distinct letters needed for the hidden word.\n3. Scan/collect the seven tokens, arrange letters to form the correct word, compute the FLAG via the rule above.\n4. Enter the FLAG below.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph\n- **your QR tile**: https://station-zero-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/qr",
          "hints": null,
          "content": null
        },
        {
          "id": 7,
          "title": "Broadcast Orders",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "The Numbers Station transmitter is up, but HQ's broadcast queue is stuck in staging. Your job is to feed the station its orders and get the right number sequence on-air.<br><br>\n## Objective\n\nMount the provided `ConfigMap` named `numbers` (containing `numbers.txt`) into the Numbers Station pod at `/etc/numbers`, restart the deployment, then tune in. The station will read the sequence and **say the FLAG word**--submit that exact string.<br><br>\n## Specification\n\n1. **Prereq:** The app `numbers-station` is deployed and exposed via a Route in `player101` (from the prior challenge).\n2. Confirm the **ConfigMap** `numbers` exists in your namespace and includes a key/file named `numbers.txt`.\n3. Mount the ConfigMap as a volume at `/etc/numbers` in the Numbers Station container.\n4. Restart/redeploy to pick up the change.\n5. Visit your Numbers Station Route and listen to the audio. The station will speak the FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph\n- **numbers-station route**: https://numbers-station-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 6,
          "title": "Knock Knock",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 40,
          "solved": true,
          "description": "The previous Station Zero commander left a classified intelligence package for their replacement--but the access details were lost during the handover. The package is available through a service running on an additional port, separate from the main Ops Relay.<br><br>\n## Objective\n\nDiscover the additional port where Station Zero is running a service, explore what's available there, and retrieve the intelligence package to obtain your FLAG.<br><br>\n## Specification\n\n1. **Prereq:** Complete \"Ops Relay\" so your Station Zero service is running in `player101`.\n2. Probe for an additional service running on a port between 2000 and 10000.\n3. Once found, access that port and explore what's available.\n4. Follow the instructions you find to retrieve the intelligence package.\n5. Submit the FLAG found in the package.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph",
          "hints": null,
          "content": null
        },
        {
          "id": 5,
          "title": "Numbers Station",
          "category": "Shadow Ops",
          "difficulty": "Easy",
          "points": 20,
          "solved": true,
          "description": "The airwaves have gone quiet. HQ's field teams rely on the **Numbers Station** for one-time pad cues and timing marks--but the transmitter at Station Zero is down. Your job is to bring it back online so agents can tune in.<br><br>*Background:* Numbers stations are mysterious shortwave radio broadcasts that have been reported since World War I and are still believed to operate today. They transmit long sequences of numbers--often read by synthetic voices or sent in Morse code or digital tones--intended for intelligence officers in the field. To hobbyists and radio enthusiasts they sound eerie, but to agents with the right cipher they deliver mission-critical orders. Many of these stations have earned nicknames among listeners for their quirks, accents, or origins.<br><br>[Learn more on Wikipedia](https://en.wikipedia.org/wiki/Numbers_station).<br><br>\n## Objective\n\nDeploy the Numbers Station container in your OpenShift namespace, expose it with a Route, and confirm the audio stream is reachable from the web page it serves. The station's name shown on the page is your FLAG.<br><br>\n## Specification\n\n1. In `player101`, deploy the image `quay.io/atgreen0/numbers-station:latest` as an app named `numbers-station`.\n2. Create a **Service** targeting the container's web port (defaults to HTTP) and expose it with a **Route**.\n3. Open your Route. You should see the Numbers Station web page with a playable audio stream.\n4. Find the station's **name** displayed on the page (exact case and punctuation) and submit that string as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph\n- **numbers-station route**: https://numbers-station-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/",
          "hints": null,
          "content": null
        },
        {
          "id": 4,
          "title": "Dead Drop: Burn Code",
          "category": "Shadow Ops",
          "difficulty": "Medium",
          "points": 30,
          "solved": true,
          "description": "Intel confirms a clandestine dead drop--your unit's **burn code**--is stashed on a Persistent Volume.\n\nYour mission namespace already includes a Persistent Volume Claim named **dead-drop-pvc**. Mount this PVC into a running container and read `burncode.txt`. The text flag you seek is the exact content of that file.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph",
          "hints": [
            {
              "id": 1,
              "cost": 1
            },
            {
              "id": 2,
              "cost": 5
            }
          ],
          "content": null
        },
        {
          "id": 3,
          "title": "Clearance Checkpoint",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "A red strobe blinks above the terminal: *IDENTITY INVALID -- CLEARANCE REQUIRED*. Your access profile has been wiped from Agency systems. Before any further ops unlock, you must pass a clearance gate that's rotated daily and delivered out-of-band to avoid interception.<br><br>\n## Objective\n\nAuthenticate by supplying today's one-time codeword from your handler (game master). This proves you can follow compartmentalized instructions under pressure and enables downstream mission packages.<br><br>\n## Specification\n\nYour handler will provide the codeword verbally or on a secure channel during the briefing. Enter that exact codeword as your FLAG.\n- Case-insensitive.\n- Do not brute-force; codes rotate per event.\n- On success, additional challenge tracks will unlock.",
          "hints": null,
          "content": null
        },
        {
          "id": 2,
          "title": "Hello, Handler",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "Your cover is thin and time is thinner. A burner web app in the starter repos contains a confirmation phrase used to re-establish contact with a friendly handler. Deploy it inside the cluster, then retrieve the phrase to verify egress works from your namespace.<br><br>\n## Objective\n\nFork and deploy the `python-starter` app; expose it with a Route; recover the phrase from the running app.<br><br>\n## Specification\n\nIn Gitea, the `starter` org hosts `python-starter`. Fork it to your user, deploy it in your `player101` Project, and expose it. The app publishes a FLAG at:\nhttps://hello-player101.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/\n\nSubmit that FLAG to complete the exercise.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph\n- **gitea starters**: https://gitea-gitea.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/starter",
          "hints": null,
          "content": null
        },
        {
          "id": 1,
          "title": "Ops Relay",
          "category": "Tradecraft",
          "difficulty": "Easy",
          "points": 10,
          "solved": true,
          "description": "You steady your breathing and sweep the room. The signage is faded, the clocks are stopped--but you know this place: **Station Zero**, the Agency's long-dormant operations hub. One thing still answers your credentials: an OpenShift terminal humming on the desk. If you're going to reconnect to HQ, you need the *Ops Relay* online now!<br><br>\n## Objective\n\nDeploy the Agency's Ops Relay service in your OpenShift namespace and recover its version string. That version is your FLAG.<br><br>\n## Specification\n\n1. In your assigned OpenShift project `player101`, deploy the container image `quay.io/atgreen0/station-zero:latest` as an application (Console path: *Add -> Container image*).\n2. Create a **Service** called `station-zero` for the pod and expose it with a **Route** so it's reachable.\n3. Once the pod is running, open its **Logs** in the OpenShift console (Workloads -> Deployments -> pod -> *View logs*) and locate the service version string.\n4. Submit that exact version as your FLAG.<br><br>\n## Links\n\n- **ocp console**: https://console-openshift-console.apps.cluster-stbd2.stbd2.sandbox2194.opentlc.com/topology/ns/player101?view=graph",
          "hints": null,
          "content": null
        }
      ],
      "metrics": {
        "startTime": 1757893966861,
        "loginTime": 1757893986256,
        "wsConnectTime": 1757893986518,
        "firstChallengeTime": 1757893986928,
        "challengesSolved": 15,
        "flagsSubmitted": 16,
        "errors": []
      },
      "wsUrl": "wss://scorestream-ctfg.apps.cluster-2mfvn.dynamic.redhatworkshops.io:443/scorestream"
    }
  ],
  "totals": {
    "loginAttempts": 100,
    "loginSuccess": 100,
    "wsConnections": 100,
    "wsSuccessful": 100,
    "flagSubmissions": 1563,
    "flagsCorrect": 1500,
    "challengesLoaded": 0,
    "staticFilesLoaded": 400,
    "errors": []
  },
  "timeline": [
    {
      "timestamp": 1757893967503,
      "category": "static_file_loaded",
      "value": 483,
      "playerId": 100
    },
    {
      "timestamp": 1757893967505,
      "category": "static_file_loaded",
      "value": 496,
      "playerId": 92
    },
    {
      "timestamp": 1757893967506,
      "category": "static_file_loaded",
      "value": 575,
      "playerId": 33
    },
    {
      "timestamp": 1757893967508,
      "category": "static_file_loaded",
      "value": 591,
      "playerId": 20
    },
    {
      "timestamp": 1757893967509,
      "category": "static_file_loaded",
      "value": 526,
      "playerId": 73
    },
    {
      "timestamp": 1757893967512,
      "category": "static_file_loaded",
      "value": 498,
      "playerId": 96
    },
    {
      "timestamp": 1757893967512,
      "category": "static_file_loaded",
      "value": 521,
      "playerId": 77
    },
    {
      "timestamp": 1757893967513,
      "category": "static_file_loaded",
      "value": 538,
      "playerId": 67
    },
    {
      "timestamp": 1757893967519,
      "category": "static_file_loaded",
      "value": 515,
      "playerId": 88
    },
    {
      "timestamp": 1757893967524,
      "category": "static_file_loaded",
      "value": 565,
      "playerId": 54
    },
    {
      "timestamp": 1757893967530,
      "category": "static_file_loaded",
      "value": 542,
      "playerId": 75
    },
    {
      "timestamp": 1757893967546,
      "category": "static_file_loaded",
      "value": 623,
      "playerId": 24
    },
    {
      "timestamp": 1757893967547,
      "category": "static_file_loaded",
      "value": 601,
      "playerId": 43
    },
    {
      "timestamp": 1757893967554,
      "category": "static_file_loaded",
      "value": 49,
      "playerId": 92
    },
    {
      "timestamp": 1757893967555,
      "category": "static_file_loaded",
      "value": 52,
      "playerId": 100
    },
    {
      "timestamp": 1757893967559,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 33
    },
    {
      "timestamp": 1757893967560,
      "category": "static_file_loaded",
      "value": 51,
      "playerId": 73
    },
    {
      "timestamp": 1757893967561,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 20
    },
    {
      "timestamp": 1757893967563,
      "category": "static_file_loaded",
      "value": 50,
      "playerId": 96
    },
    {
      "timestamp": 1757893967564,
      "category": "static_file_loaded",
      "value": 52,
      "playerId": 77
    },
    {
      "timestamp": 1757893967565,
      "category": "static_file_loaded",
      "value": 52,
      "playerId": 67
    },
    {
      "timestamp": 1757893967566,
      "category": "static_file_loaded",
      "value": 42,
      "playerId": 54
    },
    {
      "timestamp": 1757893967566,
      "category": "static_file_loaded",
      "value": 47,
      "playerId": 88
    },
    {
      "timestamp": 1757893967572,
      "category": "static_file_loaded",
      "value": 580,
      "playerId": 78
    },
    {
      "timestamp": 1757893967573,
      "category": "static_file_loaded",
      "value": 43,
      "playerId": 75
    },
    {
      "timestamp": 1757893967578,
      "category": "static_file_loaded",
      "value": 650,
      "playerId": 30
    },
    {
      "timestamp": 1757893967587,
      "category": "static_file_loaded",
      "value": 571,
      "playerId": 99
    },
    {
      "timestamp": 1757893967596,
      "category": "static_file_loaded",
      "value": 673,
      "playerId": 25
    },
    {
      "timestamp": 1757893967597,
      "category": "static_file_loaded",
      "value": 587,
      "playerId": 93
    },
    {
      "timestamp": 1757893967601,
      "category": "static_file_loaded",
      "value": 648,
      "playerId": 49
    },
    {
      "timestamp": 1757893967602,
      "category": "static_file_loaded",
      "value": 699,
      "playerId": 9
    },
    {
      "timestamp": 1757893967603,
      "category": "static_file_loaded",
      "value": 708,
      "playerId": 2
    },
    {
      "timestamp": 1757893967604,
      "category": "static_file_loaded",
      "value": 706,
      "playerId": 4
    },
    {
      "timestamp": 1757893967605,
      "category": "static_file_loaded",
      "value": 661,
      "playerId": 42
    },
    {
      "timestamp": 1757893967606,
      "category": "static_file_loaded",
      "value": 644,
      "playerId": 57
    },
    {
      "timestamp": 1757893967606,
      "category": "static_file_loaded",
      "value": 606,
      "playerId": 85
    },
    {
      "timestamp": 1757893967607,
      "category": "static_file_loaded",
      "value": 672,
      "playerId": 35
    },
    {
      "timestamp": 1757893967609,
      "category": "static_file_loaded",
      "value": 657,
      "playerId": 48
    },
    {
      "timestamp": 1757893967610,
      "category": "static_file_loaded",
      "value": 643,
      "playerId": 61
    },
    {
      "timestamp": 1757893967611,
      "category": "static_file_loaded",
      "value": 686,
      "playerId": 27
    },
    {
      "timestamp": 1757893967611,
      "category": "static_file_loaded",
      "value": 687,
      "playerId": 26
    },
    {
      "timestamp": 1757893967613,
      "category": "static_file_loaded",
      "value": 651,
      "playerId": 56
    },
    {
      "timestamp": 1757893967614,
      "category": "static_file_loaded",
      "value": 651,
      "playerId": 58
    },
    {
      "timestamp": 1757893967615,
      "category": "static_file_loaded",
      "value": 665,
      "playerId": 47
    },
    {
      "timestamp": 1757893967618,
      "category": "static_file_loaded",
      "value": 700,
      "playerId": 21
    },
    {
      "timestamp": 1757893967627,
      "category": "static_file_loaded",
      "value": 684,
      "playerId": 41
    },
    {
      "timestamp": 1757893967628,
      "category": "static_file_loaded",
      "value": 679,
      "playerId": 45
    },
    {
      "timestamp": 1757893967629,
      "category": "static_file_loaded",
      "value": 630,
      "playerId": 83
    },
    {
      "timestamp": 1757893967631,
      "category": "static_file_loaded",
      "value": 718,
      "playerId": 15
    },
    {
      "timestamp": 1757893967632,
      "category": "static_file_loaded",
      "value": 689,
      "playerId": 40
    },
    {
      "timestamp": 1757893967632,
      "category": "static_file_loaded",
      "value": 712,
      "playerId": 22
    },
    {
      "timestamp": 1757893967633,
      "category": "static_file_loaded",
      "value": 679,
      "playerId": 50
    },
    {
      "timestamp": 1757893967634,
      "category": "static_file_loaded",
      "value": 679,
      "playerId": 51
    },
    {
      "timestamp": 1757893967635,
      "category": "static_file_loaded",
      "value": 708,
      "playerId": 29
    },
    {
      "timestamp": 1757893967636,
      "category": "static_file_loaded",
      "value": 736,
      "playerId": 6
    },
    {
      "timestamp": 1757893967637,
      "category": "static_file_loaded",
      "value": 736,
      "playerId": 7
    },
    {
      "timestamp": 1757893967638,
      "category": "static_file_loaded",
      "value": 698,
      "playerId": 39
    },
    {
      "timestamp": 1757893967644,
      "category": "static_file_loaded",
      "value": 718,
      "playerId": 28
    },
    {
      "timestamp": 1757893967646,
      "category": "static_file_loaded",
      "value": 734,
      "playerId": 14
    },
    {
      "timestamp": 1757893967646,
      "category": "static_file_loaded",
      "value": 730,
      "playerId": 19
    },
    {
      "timestamp": 1757893967648,
      "category": "static_file_loaded",
      "value": 101,
      "playerId": 43
    },
    {
      "timestamp": 1757893967652,
      "category": "static_file_loaded",
      "value": 74,
      "playerId": 30
    },
    {
      "timestamp": 1757893967656,
      "category": "static_file_loaded",
      "value": 757,
      "playerId": 5
    },
    {
      "timestamp": 1757893967657,
      "category": "static_file_loaded",
      "value": 61,
      "playerId": 25
    },
    {
      "timestamp": 1757893967658,
      "category": "static_file_loaded",
      "value": 85,
      "playerId": 78
    },
    {
      "timestamp": 1757893967659,
      "category": "static_file_loaded",
      "value": 50,
      "playerId": 48
    },
    {
      "timestamp": 1757893967660,
      "category": "static_file_loaded",
      "value": 62,
      "playerId": 93
    },
    {
      "timestamp": 1757893967661,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 57
    },
    {
      "timestamp": 1757893967662,
      "category": "static_file_loaded",
      "value": 60,
      "playerId": 9
    },
    {
      "timestamp": 1757893967663,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 61
    },
    {
      "timestamp": 1757893967664,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 27
    },
    {
      "timestamp": 1757893967664,
      "category": "static_file_loaded",
      "value": 50,
      "playerId": 58
    },
    {
      "timestamp": 1757893967665,
      "category": "static_file_loaded",
      "value": 54,
      "playerId": 26
    },
    {
      "timestamp": 1757893967666,
      "category": "static_file_loaded",
      "value": 51,
      "playerId": 47
    },
    {
      "timestamp": 1757893967668,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 56
    },
    {
      "timestamp": 1757893967672,
      "category": "static_file_loaded",
      "value": 54,
      "playerId": 21
    },
    {
      "timestamp": 1757893967673,
      "category": "static_file_loaded",
      "value": 40,
      "playerId": 22
    },
    {
      "timestamp": 1757893967674,
      "category": "static_file_loaded",
      "value": 47,
      "playerId": 41
    },
    {
      "timestamp": 1757893967676,
      "category": "static_file_loaded",
      "value": 44,
      "playerId": 40
    },
    {
      "timestamp": 1757893967681,
      "category": "static_file_loaded",
      "value": 51,
      "playerId": 83
    },
    {
      "timestamp": 1757893967683,
      "category": "static_file_loaded",
      "value": 52,
      "playerId": 15
    },
    {
      "timestamp": 1757893967684,
      "category": "static_file_loaded",
      "value": 56,
      "playerId": 45
    },
    {
      "timestamp": 1757893967685,
      "category": "static_file_loaded",
      "value": 772,
      "playerId": 16
    },
    {
      "timestamp": 1757893967686,
      "category": "static_file_loaded",
      "value": 704,
      "playerId": 72
    },
    {
      "timestamp": 1757893967690,
      "category": "static_file_loaded",
      "value": 57,
      "playerId": 50
    },
    {
      "timestamp": 1757893967691,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 6
    },
    {
      "timestamp": 1757893967692,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 7
    },
    {
      "timestamp": 1757893967693,
      "category": "static_file_loaded",
      "value": 59,
      "playerId": 51
    },
    {
      "timestamp": 1757893967694,
      "category": "static_file_loaded",
      "value": 56,
      "playerId": 39
    },
    {
      "timestamp": 1757893967694,
      "category": "static_file_loaded",
      "value": 59,
      "playerId": 29
    },
    {
      "timestamp": 1757893967697,
      "category": "static_file_loaded",
      "value": 52,
      "playerId": 28
    },
    {
      "timestamp": 1757893967698,
      "category": "static_file_loaded",
      "value": 52,
      "playerId": 14
    },
    {
      "timestamp": 1757893967707,
      "category": "static_file_loaded",
      "value": 51,
      "playerId": 5
    },
    {
      "timestamp": 1757893967711,
      "category": "static_file_loaded",
      "value": 729,
      "playerId": 71
    },
    {
      "timestamp": 1757893967714,
      "category": "static_file_loaded",
      "value": 720,
      "playerId": 79
    },
    {
      "timestamp": 1757893967715,
      "category": "static_file_loaded",
      "value": 709,
      "playerId": 90
    },
    {
      "timestamp": 1757893967731,
      "category": "static_file_loaded",
      "value": 46,
      "playerId": 16
    },
    {
      "timestamp": 1757893967732,
      "category": "static_file_loaded",
      "value": 46,
      "playerId": 72
    },
    {
      "timestamp": 1757893967752,
      "category": "static_file_loaded",
      "value": 838,
      "playerId": 17
    },
    {
      "timestamp": 1757893967754,
      "category": "static_file_loaded",
      "value": 824,
      "playerId": 32
    },
    {
      "timestamp": 1757893967762,
      "category": "static_file_loaded",
      "value": 900,
      "playerId": 1
    },
    {
      "timestamp": 1757893967764,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 71
    },
    {
      "timestamp": 1757893967765,
      "category": "static_file_loaded",
      "value": 794,
      "playerId": 64
    },
    {
      "timestamp": 1757893967769,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 79
    },
    {
      "timestamp": 1757893967775,
      "category": "static_file_loaded",
      "value": 759,
      "playerId": 98
    },
    {
      "timestamp": 1757893967778,
      "category": "static_file_loaded",
      "value": 818,
      "playerId": 55
    },
    {
      "timestamp": 1757893967797,
      "category": "static_file_loaded",
      "value": 894,
      "playerId": 8
    },
    {
      "timestamp": 1757893967799,
      "category": "static_file_loaded",
      "value": 194,
      "playerId": 4
    },
    {
      "timestamp": 1757893967802,
      "category": "static_file_loaded",
      "value": 49,
      "playerId": 17
    },
    {
      "timestamp": 1757893967803,
      "category": "static_file_loaded",
      "value": 49,
      "playerId": 32
    },
    {
      "timestamp": 1757893967803,
      "category": "static_file_loaded",
      "value": 895,
      "playerId": 12
    },
    {
      "timestamp": 1757893967812,
      "category": "static_file_loaded",
      "value": 50,
      "playerId": 1
    },
    {
      "timestamp": 1757893967822,
      "category": "static_file_loaded",
      "value": 917,
      "playerId": 10
    },
    {
      "timestamp": 1757893967825,
      "category": "static_file_loaded",
      "value": 50,
      "playerId": 98
    },
    {
      "timestamp": 1757893967830,
      "category": "static_file_loaded",
      "value": 222,
      "playerId": 35
    },
    {
      "timestamp": 1757893967831,
      "category": "static_file_loaded",
      "value": 226,
      "playerId": 42
    },
    {
      "timestamp": 1757893967832,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 55
    },
    {
      "timestamp": 1757893967834,
      "category": "static_file_loaded",
      "value": 287,
      "playerId": 24
    },
    {
      "timestamp": 1757893967835,
      "category": "static_file_loaded",
      "value": 233,
      "playerId": 49
    },
    {
      "timestamp": 1757893967839,
      "category": "static_file_loaded",
      "value": 909,
      "playerId": 31
    },
    {
      "timestamp": 1757893967841,
      "category": "static_file_loaded",
      "value": 233,
      "playerId": 85
    },
    {
      "timestamp": 1757893967844,
      "category": "static_file_loaded",
      "value": 257,
      "playerId": 99
    },
    {
      "timestamp": 1757893967852,
      "category": "static_file_loaded",
      "value": 937,
      "playerId": 18
    },
    {
      "timestamp": 1757893967853,
      "category": "static_file_loaded",
      "value": 914,
      "playerId": 38
    },
    {
      "timestamp": 1757893967855,
      "category": "static_file_loaded",
      "value": 58,
      "playerId": 8
    },
    {
      "timestamp": 1757893967856,
      "category": "static_file_loaded",
      "value": 844,
      "playerId": 95
    },
    {
      "timestamp": 1757893967857,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 12
    },
    {
      "timestamp": 1757893967859,
      "category": "static_file_loaded",
      "value": 854,
      "playerId": 89
    },
    {
      "timestamp": 1757893967860,
      "category": "static_file_loaded",
      "value": 214,
      "playerId": 19
    },
    {
      "timestamp": 1757893967861,
      "category": "static_file_loaded",
      "value": 858,
      "playerId": 87
    },
    {
      "timestamp": 1757893967867,
      "category": "static_file_loaded",
      "value": 853,
      "playerId": 97
    },
    {
      "timestamp": 1757893967868,
      "category": "static_file_loaded",
      "value": 904,
      "playerId": 59
    },
    {
      "timestamp": 1757893967872,
      "category": "static_file_loaded",
      "value": 50,
      "playerId": 10
    },
    {
      "timestamp": 1757893967879,
      "category": "static_file_loaded",
      "value": 883,
      "playerId": 81
    },
    {
      "timestamp": 1757893967886,
      "category": "static_file_loaded",
      "value": 913,
      "playerId": 65
    },
    {
      "timestamp": 1757893967893,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 31
    },
    {
      "timestamp": 1757893967901,
      "category": "static_file_loaded",
      "value": 904,
      "playerId": 82
    },
    {
      "timestamp": 1757893967904,
      "category": "static_file_loaded",
      "value": 52,
      "playerId": 18
    },
    {
      "timestamp": 1757893967907,
      "category": "static_file_loaded",
      "value": 54,
      "playerId": 38
    },
    {
      "timestamp": 1757893967908,
      "category": "static_file_loaded",
      "value": 971,
      "playerId": 36
    },
    {
      "timestamp": 1757893967912,
      "category": "static_file_loaded",
      "value": 51,
      "playerId": 87
    },
    {
      "timestamp": 1757893967914,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 89
    },
    {
      "timestamp": 1757893967915,
      "category": "static_file_loaded",
      "value": 59,
      "playerId": 95
    },
    {
      "timestamp": 1757893967922,
      "category": "static_file_loaded",
      "value": 54,
      "playerId": 97
    },
    {
      "timestamp": 1757893967923,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 59
    },
    {
      "timestamp": 1757893967928,
      "category": "static_file_loaded",
      "value": 48,
      "playerId": 81
    },
    {
      "timestamp": 1757893967956,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 82
    },
    {
      "timestamp": 1757893967961,
      "category": "static_file_loaded",
      "value": 246,
      "playerId": 90
    },
    {
      "timestamp": 1757893967962,
      "category": "static_file_loaded",
      "value": 54,
      "playerId": 36
    },
    {
      "timestamp": 1757893968014,
      "category": "static_file_loaded",
      "value": 410,
      "playerId": 2
    },
    {
      "timestamp": 1757893968034,
      "category": "static_file_loaded",
      "value": 269,
      "playerId": 64
    },
    {
      "timestamp": 1757893968099,
      "category": "static_file_loaded",
      "value": 1132,
      "playerId": 60
    },
    {
      "timestamp": 1757893968127,
      "category": "static_file_loaded",
      "value": 1177,
      "playerId": 46
    },
    {
      "timestamp": 1757893968131,
      "category": "static_file_loaded",
      "value": 1174,
      "playerId": 53
    },
    {
      "timestamp": 1757893968138,
      "category": "static_file_loaded",
      "value": 1182,
      "playerId": 52
    },
    {
      "timestamp": 1757893968141,
      "category": "static_file_loaded",
      "value": 1232,
      "playerId": 13
    },
    {
      "timestamp": 1757893968143,
      "category": "static_file_loaded",
      "value": 1205,
      "playerId": 37
    },
    {
      "timestamp": 1757893968147,
      "category": "static_file_loaded",
      "value": 47,
      "playerId": 60
    },
    {
      "timestamp": 1757893968153,
      "category": "static_file_loaded",
      "value": 1177,
      "playerId": 68
    },
    {
      "timestamp": 1757893968157,
      "category": "static_file_loaded",
      "value": 1171,
      "playerId": 74
    },
    {
      "timestamp": 1757893968166,
      "category": "static_file_loaded",
      "value": 1219,
      "playerId": 44
    },
    {
      "timestamp": 1757893968178,
      "category": "static_file_loaded",
      "value": 47,
      "playerId": 53
    },
    {
      "timestamp": 1757893968186,
      "category": "static_file_loaded",
      "value": 59,
      "playerId": 46
    },
    {
      "timestamp": 1757893968190,
      "category": "static_file_loaded",
      "value": 1258,
      "playerId": 34
    },
    {
      "timestamp": 1757893968194,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 52
    },
    {
      "timestamp": 1757893968197,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 37
    },
    {
      "timestamp": 1757893968210,
      "category": "static_file_loaded",
      "value": 57,
      "playerId": 68
    },
    {
      "timestamp": 1757893968213,
      "category": "static_file_loaded",
      "value": 56,
      "playerId": 74
    },
    {
      "timestamp": 1757893968221,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 44
    },
    {
      "timestamp": 1757893968245,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 34
    },
    {
      "timestamp": 1757893968258,
      "category": "static_file_loaded",
      "value": 1258,
      "playerId": 84
    },
    {
      "timestamp": 1757893968258,
      "category": "static_file_loaded",
      "value": 117,
      "playerId": 13
    },
    {
      "timestamp": 1757893968288,
      "category": "static_file_loaded",
      "value": 1277,
      "playerId": 94
    },
    {
      "timestamp": 1757893968301,
      "category": "static_file_loaded",
      "value": 1323,
      "playerId": 69
    },
    {
      "timestamp": 1757893968347,
      "category": "static_file_loaded",
      "value": 58,
      "playerId": 94
    },
    {
      "timestamp": 1757893968356,
      "category": "static_file_loaded",
      "value": 55,
      "playerId": 69
    },
    {
      "timestamp": 1757893968359,
      "category": "static_file_loaded",
      "value": 1380,
      "playerId": 70
    },
    {
      "timestamp": 1757893968412,
      "category": "static_file_loaded",
      "value": 1491,
      "playerId": 23
    },
    {
      "timestamp": 1757893968413,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 70
    },
    {
      "timestamp": 1757893968439,
      "category": "static_file_loaded",
      "value": 553,
      "playerId": 65
    },
    {
      "timestamp": 1757893968464,
      "category": "static_file_loaded",
      "value": 52,
      "playerId": 23
    },
    {
      "timestamp": 1757893968509,
      "category": "static_file_loaded",
      "value": 251,
      "playerId": 84
    },
    {
      "timestamp": 1757893968510,
      "category": "static_file_loaded",
      "value": 1508,
      "playerId": 86
    },
    {
      "timestamp": 1757893968563,
      "category": "static_file_loaded",
      "value": 53,
      "playerId": 86
    },
    {
      "timestamp": 1757893968574,
      "category": "static_file_loaded",
      "value": 1678,
      "playerId": 3
    },
    {
      "timestamp": 1757893968608,
      "category": "static_file_loaded",
      "value": 1619,
      "playerId": 76
    },
    {
      "timestamp": 1757893968630,
      "category": "static_file_loaded",
      "value": 56,
      "playerId": 3
    },
    {
      "timestamp": 1757893968666,
      "category": "static_file_loaded",
      "value": 57,
      "playerId": 76
    },
    {
      "timestamp": 1757893968941,
      "category": "static_file_loaded",
      "value": 1967,
      "playerId": 66
    },
    {
      "timestamp": 1757893968945,
      "category": "static_file_loaded",
      "value": 1975,
      "playerId": 63
    },
    {
      "timestamp": 1757893968979,
      "category": "static_file_loaded",
      "value": 1985,
      "playerId": 80
    },
    {
      "timestamp": 1757893968988,
      "category": "static_file_loaded",
      "value": 42,
      "playerId": 63
    },
    {
      "timestamp": 1757893968989,
      "category": "static_file_loaded",
      "value": 47,
      "playerId": 66
    },
    {
      "timestamp": 1757893969019,
      "category": "static_file_loaded",
      "value": 2112,
      "playerId": 11
    },
    {
      "timestamp": 1757893969029,
      "category": "static_file_loaded",
      "value": 50,
      "playerId": 80
    },
    {
      "timestamp": 1757893969066,
      "category": "static_file_loaded",
      "value": 46,
      "playerId": 11
    },
    {
      "timestamp": 1757893969098,
      "category": "static_file_loaded",
      "value": 2090,
      "playerId": 91
    },
    {
      "timestamp": 1757893969342,
      "category": "static_file_loaded",
      "value": 244,
      "playerId": 91
    },
    {
      "timestamp": 1757893970619,
      "category": "static_file_loaded",
      "value": 3651,
      "playerId": 62
    },
    {
      "timestamp": 1757893970667,
      "category": "static_file_loaded",
      "value": 48,
      "playerId": 62
    },
    {
      "timestamp": 1757893974305,
      "category": "static_file_loaded",
      "value": 6472,
      "playerId": 55
    },
    {
      "timestamp": 1757893974315,
      "category": "static_file_loaded",
      "value": 5959,
      "playerId": 69
    },
    {
      "timestamp": 1757893974701,
      "category": "static_file_loaded",
      "value": 6902,
      "playerId": 4
    },
    {
      "timestamp": 1757893975129,
      "category": "static_file_loaded",
      "value": 7438,
      "playerId": 6
    },
    {
      "timestamp": 1757893975237,
      "category": "static_file_loaded",
      "value": 922,
      "playerId": 69
    },
    {
      "timestamp": 1757893975276,
      "category": "static_file_loaded",
      "value": 575,
      "playerId": 4
    },
    {
      "timestamp": 1757893975313,
      "category": "static_file_loaded",
      "value": 7661,
      "playerId": 30
    },
    {
      "timestamp": 1757893975344,
      "category": "static_file_loaded",
      "value": 7612,
      "playerId": 72
    },
    {
      "timestamp": 1757893975410,
      "category": "login_attempt",
      "value": 72,
      "playerId": 69
    },
    {
      "timestamp": 1757893975410,
      "category": "login_success",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893975422,
      "category": "login_attempt",
      "value": 45,
      "playerId": 4
    },
    {
      "timestamp": 1757893975422,
      "category": "login_success",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893975550,
      "category": "static_file_loaded",
      "value": 7842,
      "playerId": 5
    },
    {
      "timestamp": 1757893975592,
      "category": "static_file_loaded",
      "value": 7902,
      "playerId": 50
    },
    {
      "timestamp": 1757893975662,
      "category": "static_file_loaded",
      "value": 533,
      "playerId": 6
    },
    {
      "timestamp": 1757893975692,
      "category": "websocket_connected",
      "value": 219,
      "playerId": 4
    },
    {
      "timestamp": 1757893975695,
      "category": "websocket_connected",
      "value": 233,
      "playerId": 69
    },
    {
      "timestamp": 1757893975711,
      "category": "static_file_loaded",
      "value": 1406,
      "playerId": 55
    },
    {
      "timestamp": 1757893975813,
      "category": "static_file_loaded",
      "value": 468,
      "playerId": 72
    },
    {
      "timestamp": 1757893975822,
      "category": "static_file_loaded",
      "value": 8257,
      "playerId": 67
    },
    {
      "timestamp": 1757893975825,
      "category": "login_attempt",
      "value": 60,
      "playerId": 6
    },
    {
      "timestamp": 1757893975826,
      "category": "login_success",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893975868,
      "category": "login_attempt",
      "value": 57,
      "playerId": 55
    },
    {
      "timestamp": 1757893975868,
      "category": "login_success",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893975907,
      "category": "static_file_loaded",
      "value": 315,
      "playerId": 50
    },
    {
      "timestamp": 1757893975912,
      "category": "static_file_loaded",
      "value": 599,
      "playerId": 30
    },
    {
      "timestamp": 1757893975977,
      "category": "login_attempt",
      "value": 63,
      "playerId": 72
    },
    {
      "timestamp": 1757893975977,
      "category": "login_success",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893975983,
      "category": "static_file_loaded",
      "value": 8323,
      "playerId": 48
    },
    {
      "timestamp": 1757893976001,
      "category": "static_file_loaded",
      "value": 8087,
      "playerId": 89
    },
    {
      "timestamp": 1757893976038,
      "category": "websocket_connected",
      "value": 162,
      "playerId": 6
    },
    {
      "timestamp": 1757893976060,
      "category": "login_attempt",
      "value": 52,
      "playerId": 50
    },
    {
      "timestamp": 1757893976060,
      "category": "login_success",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893976066,
      "category": "login_attempt",
      "value": 53,
      "playerId": 30
    },
    {
      "timestamp": 1757893976066,
      "category": "login_success",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893976089,
      "category": "submit_flag",
      "value": 61,
      "playerId": 4
    },
    {
      "timestamp": 1757893976089,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893976110,
      "category": "submit_flag",
      "value": 52,
      "playerId": 69
    },
    {
      "timestamp": 1757893976110,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893976130,
      "category": "submit_flag",
      "value": 57,
      "playerId": 4
    },
    {
      "timestamp": 1757893976130,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893976143,
      "category": "submit_flag",
      "value": 61,
      "playerId": 4
    },
    {
      "timestamp": 1757893976143,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893976172,
      "category": "submit_flag",
      "value": 54,
      "playerId": 69
    },
    {
      "timestamp": 1757893976172,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893976182,
      "category": "websocket_connected",
      "value": 153,
      "playerId": 72
    },
    {
      "timestamp": 1757893976189,
      "category": "static_file_loaded",
      "value": 7559,
      "playerId": 3
    },
    {
      "timestamp": 1757893976194,
      "category": "websocket_connected",
      "value": 275,
      "playerId": 55
    },
    {
      "timestamp": 1757893976277,
      "category": "websocket_connected",
      "value": 165,
      "playerId": 50
    },
    {
      "timestamp": 1757893976286,
      "category": "websocket_connected",
      "value": 166,
      "playerId": 30
    },
    {
      "timestamp": 1757893976385,
      "category": "submit_flag",
      "value": 307,
      "playerId": 69
    },
    {
      "timestamp": 1757893976385,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893976399,
      "category": "static_file_loaded",
      "value": 398,
      "playerId": 89
    },
    {
      "timestamp": 1757893976442,
      "category": "submit_flag",
      "value": 47,
      "playerId": 4
    },
    {
      "timestamp": 1757893976442,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893976455,
      "category": "submit_flag",
      "value": 57,
      "playerId": 4
    },
    {
      "timestamp": 1757893976455,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893976459,
      "category": "submit_flag",
      "value": 45,
      "playerId": 4
    },
    {
      "timestamp": 1757893976459,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893976471,
      "category": "static_file_loaded",
      "value": 648,
      "playerId": 67
    },
    {
      "timestamp": 1757893976487,
      "category": "static_file_loaded",
      "value": 504,
      "playerId": 48
    },
    {
      "timestamp": 1757893976499,
      "category": "static_file_loaded",
      "value": 8570,
      "playerId": 81
    },
    {
      "timestamp": 1757893976540,
      "category": "submit_flag",
      "value": 57,
      "playerId": 72
    },
    {
      "timestamp": 1757893976541,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893976555,
      "category": "login_attempt",
      "value": 53,
      "playerId": 89
    },
    {
      "timestamp": 1757893976555,
      "category": "login_success",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893976557,
      "category": "static_file_loaded",
      "value": 8645,
      "playerId": 87
    },
    {
      "timestamp": 1757893976578,
      "category": "submit_flag",
      "value": 72,
      "playerId": 72
    },
    {
      "timestamp": 1757893976578,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893976624,
      "category": "submit_flag",
      "value": 58,
      "playerId": 55
    },
    {
      "timestamp": 1757893976625,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893976639,
      "category": "login_attempt",
      "value": 62,
      "playerId": 67
    },
    {
      "timestamp": 1757893976639,
      "category": "login_success",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893976657,
      "category": "login_attempt",
      "value": 68,
      "playerId": 48
    },
    {
      "timestamp": 1757893976657,
      "category": "login_success",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893976665,
      "category": "submit_flag",
      "value": 63,
      "playerId": 30
    },
    {
      "timestamp": 1757893976665,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893976696,
      "category": "submit_flag",
      "value": 180,
      "playerId": 55
    },
    {
      "timestamp": 1757893976696,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893976702,
      "category": "submit_flag",
      "value": 178,
      "playerId": 55
    },
    {
      "timestamp": 1757893976702,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893976736,
      "category": "submit_flag",
      "value": 77,
      "playerId": 50
    },
    {
      "timestamp": 1757893976736,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893976743,
      "category": "submit_flag",
      "value": 86,
      "playerId": 6
    },
    {
      "timestamp": 1757893976743,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893976747,
      "category": "submit_flag",
      "value": 77,
      "playerId": 6
    },
    {
      "timestamp": 1757893976747,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893976778,
      "category": "static_file_loaded",
      "value": 1228,
      "playerId": 5
    },
    {
      "timestamp": 1757893976812,
      "category": "submit_flag",
      "value": 318,
      "playerId": 72
    },
    {
      "timestamp": 1757893976812,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893976821,
      "category": "static_file_loaded",
      "value": 630,
      "playerId": 3
    },
    {
      "timestamp": 1757893976862,
      "category": "static_file_loaded",
      "value": 9028,
      "playerId": 24
    },
    {
      "timestamp": 1757893976870,
      "category": "websocket_connected",
      "value": 263,
      "playerId": 89
    },
    {
      "timestamp": 1757893976945,
      "category": "submit_flag",
      "value": 234,
      "playerId": 6
    },
    {
      "timestamp": 1757893976945,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893976947,
      "category": "submit_flag",
      "value": 316,
      "playerId": 50
    },
    {
      "timestamp": 1757893976947,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893976968,
      "category": "submit_flag",
      "value": 351,
      "playerId": 30
    },
    {
      "timestamp": 1757893976968,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893976970,
      "category": "submit_flag",
      "value": 342,
      "playerId": 50
    },
    {
      "timestamp": 1757893976970,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893976990,
      "category": "submit_flag",
      "value": 137,
      "playerId": 69
    },
    {
      "timestamp": 1757893976990,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893976995,
      "category": "submit_flag",
      "value": 360,
      "playerId": 30
    },
    {
      "timestamp": 1757893976995,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893977023,
      "category": "websocket_connected",
      "value": 332,
      "playerId": 67
    },
    {
      "timestamp": 1757893977025,
      "category": "login_attempt",
      "value": 102,
      "playerId": 5
    },
    {
      "timestamp": 1757893977025,
      "category": "login_success",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893977026,
      "category": "submit_flag",
      "value": 94,
      "playerId": 69
    },
    {
      "timestamp": 1757893977026,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893977027,
      "category": "submit_flag",
      "value": 97,
      "playerId": 69
    },
    {
      "timestamp": 1757893977027,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893977031,
      "category": "websocket_connected",
      "value": 313,
      "playerId": 48
    },
    {
      "timestamp": 1757893977032,
      "category": "login_attempt",
      "value": 104,
      "playerId": 3
    },
    {
      "timestamp": 1757893977032,
      "category": "login_success",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893977136,
      "category": "submit_flag",
      "value": 51,
      "playerId": 55
    },
    {
      "timestamp": 1757893977136,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893977222,
      "category": "submit_flag",
      "value": 51,
      "playerId": 55
    },
    {
      "timestamp": 1757893977222,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893977244,
      "category": "submit_flag",
      "value": 72,
      "playerId": 55
    },
    {
      "timestamp": 1757893977244,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893977247,
      "category": "submit_flag",
      "value": 62,
      "playerId": 89
    },
    {
      "timestamp": 1757893977247,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893977250,
      "category": "static_file_loaded",
      "value": 693,
      "playerId": 87
    },
    {
      "timestamp": 1757893977256,
      "category": "submit_flag",
      "value": 64,
      "playerId": 89
    },
    {
      "timestamp": 1757893977256,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893977275,
      "category": "websocket_connected",
      "value": 195,
      "playerId": 5
    },
    {
      "timestamp": 1757893977281,
      "category": "websocket_connected",
      "value": 195,
      "playerId": 3
    },
    {
      "timestamp": 1757893977320,
      "category": "static_file_loaded",
      "value": 9142,
      "playerId": 53
    },
    {
      "timestamp": 1757893977323,
      "category": "submit_flag",
      "value": 61,
      "playerId": 50
    },
    {
      "timestamp": 1757893977323,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893977326,
      "category": "submit_flag",
      "value": 52,
      "playerId": 89
    },
    {
      "timestamp": 1757893977326,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893977339,
      "category": "submit_flag",
      "value": 65,
      "playerId": 50
    },
    {
      "timestamp": 1757893977339,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893977385,
      "category": "submit_flag",
      "value": 51,
      "playerId": 67
    },
    {
      "timestamp": 1757893977385,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893977395,
      "category": "submit_flag",
      "value": 51,
      "playerId": 48
    },
    {
      "timestamp": 1757893977395,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893977401,
      "category": "login_attempt",
      "value": 49,
      "playerId": 87
    },
    {
      "timestamp": 1757893977401,
      "category": "login_success",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893977408,
      "category": "submit_flag",
      "value": 73,
      "playerId": 50
    },
    {
      "timestamp": 1757893977408,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893977411,
      "category": "submit_flag",
      "value": 59,
      "playerId": 67
    },
    {
      "timestamp": 1757893977412,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893977423,
      "category": "submit_flag",
      "value": 52,
      "playerId": 48
    },
    {
      "timestamp": 1757893977423,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893977427,
      "category": "submit_flag",
      "value": 66,
      "playerId": 67
    },
    {
      "timestamp": 1757893977427,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893977443,
      "category": "submit_flag",
      "value": 51,
      "playerId": 48
    },
    {
      "timestamp": 1757893977443,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893977510,
      "category": "submit_flag",
      "value": 54,
      "playerId": 69
    },
    {
      "timestamp": 1757893977510,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893977569,
      "category": "submit_flag",
      "value": 57,
      "playerId": 69
    },
    {
      "timestamp": 1757893977569,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893977584,
      "category": "submit_flag",
      "value": 55,
      "playerId": 69
    },
    {
      "timestamp": 1757893977584,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893977603,
      "category": "submit_flag",
      "value": 53,
      "playerId": 6
    },
    {
      "timestamp": 1757893977603,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893977611,
      "category": "websocket_connected",
      "value": 157,
      "playerId": 87
    },
    {
      "timestamp": 1757893977635,
      "category": "submit_flag",
      "value": 50,
      "playerId": 5
    },
    {
      "timestamp": 1757893977635,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893977642,
      "category": "submit_flag",
      "value": 47,
      "playerId": 72
    },
    {
      "timestamp": 1757893977642,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893977649,
      "category": "submit_flag",
      "value": 55,
      "playerId": 6
    },
    {
      "timestamp": 1757893977649,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893977661,
      "category": "submit_flag",
      "value": 52,
      "playerId": 6
    },
    {
      "timestamp": 1757893977661,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893977667,
      "category": "submit_flag",
      "value": 50,
      "playerId": 4
    },
    {
      "timestamp": 1757893977667,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893977672,
      "category": "submit_flag",
      "value": 48,
      "playerId": 3
    },
    {
      "timestamp": 1757893977672,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893977680,
      "category": "submit_flag",
      "value": 52,
      "playerId": 4
    },
    {
      "timestamp": 1757893977680,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893977682,
      "category": "static_file_loaded",
      "value": 819,
      "playerId": 24
    },
    {
      "timestamp": 1757893977687,
      "category": "submit_flag",
      "value": 48,
      "playerId": 5
    },
    {
      "timestamp": 1757893977688,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893977697,
      "category": "submit_flag",
      "value": 51,
      "playerId": 4
    },
    {
      "timestamp": 1757893977697,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893977705,
      "category": "submit_flag",
      "value": 57,
      "playerId": 5
    },
    {
      "timestamp": 1757893977705,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893977708,
      "category": "submit_flag",
      "value": 54,
      "playerId": 3
    },
    {
      "timestamp": 1757893977709,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893977723,
      "category": "submit_flag",
      "value": 58,
      "playerId": 72
    },
    {
      "timestamp": 1757893977723,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893977728,
      "category": "submit_flag",
      "value": 54,
      "playerId": 72
    },
    {
      "timestamp": 1757893977728,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893977739,
      "category": "submit_flag",
      "value": 76,
      "playerId": 3
    },
    {
      "timestamp": 1757893977740,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893977768,
      "category": "submit_flag",
      "value": 49,
      "playerId": 89
    },
    {
      "timestamp": 1757893977768,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893977836,
      "category": "login_attempt",
      "value": 54,
      "playerId": 24
    },
    {
      "timestamp": 1757893977836,
      "category": "login_success",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893977872,
      "category": "submit_flag",
      "value": 55,
      "playerId": 50
    },
    {
      "timestamp": 1757893977872,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893977902,
      "category": "submit_flag",
      "value": 58,
      "playerId": 50
    },
    {
      "timestamp": 1757893977903,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893977918,
      "category": "submit_flag",
      "value": 55,
      "playerId": 50
    },
    {
      "timestamp": 1757893977918,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893977929,
      "category": "submit_flag",
      "value": 59,
      "playerId": 30
    },
    {
      "timestamp": 1757893977929,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893977932,
      "category": "submit_flag",
      "value": 53,
      "playerId": 30
    },
    {
      "timestamp": 1757893977932,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893977945,
      "category": "static_file_loaded",
      "value": 624,
      "playerId": 53
    },
    {
      "timestamp": 1757893977953,
      "category": "submit_flag",
      "value": 55,
      "playerId": 48
    },
    {
      "timestamp": 1757893977953,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893977971,
      "category": "submit_flag",
      "value": 58,
      "playerId": 67
    },
    {
      "timestamp": 1757893977971,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893977974,
      "category": "submit_flag",
      "value": 62,
      "playerId": 55
    },
    {
      "timestamp": 1757893977974,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893978005,
      "category": "submit_flag",
      "value": 50,
      "playerId": 30
    },
    {
      "timestamp": 1757893978005,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893978027,
      "category": "submit_flag",
      "value": 60,
      "playerId": 67
    },
    {
      "timestamp": 1757893978028,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893978032,
      "category": "submit_flag",
      "value": 67,
      "playerId": 55
    },
    {
      "timestamp": 1757893978032,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893978037,
      "category": "submit_flag",
      "value": 61,
      "playerId": 67
    },
    {
      "timestamp": 1757893978038,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893978047,
      "category": "submit_flag",
      "value": 53,
      "playerId": 89
    },
    {
      "timestamp": 1757893978047,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893978085,
      "category": "submit_flag",
      "value": 52,
      "playerId": 87
    },
    {
      "timestamp": 1757893978085,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893978089,
      "category": "submit_flag",
      "value": 156,
      "playerId": 48
    },
    {
      "timestamp": 1757893978089,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893978102,
      "category": "login_attempt",
      "value": 56,
      "playerId": 53
    },
    {
      "timestamp": 1757893978102,
      "category": "login_success",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893978137,
      "category": "submit_flag",
      "value": 102,
      "playerId": 87
    },
    {
      "timestamp": 1757893978137,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893978148,
      "category": "submit_flag",
      "value": 57,
      "playerId": 87
    },
    {
      "timestamp": 1757893978149,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893978164,
      "category": "submit_flag",
      "value": 243,
      "playerId": 48
    },
    {
      "timestamp": 1757893978164,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893978233,
      "category": "static_file_loaded",
      "value": 10431,
      "playerId": 17
    },
    {
      "timestamp": 1757893978239,
      "category": "submit_flag",
      "value": 62,
      "playerId": 3
    },
    {
      "timestamp": 1757893978239,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893978242,
      "category": "submit_flag",
      "value": 41,
      "playerId": 89
    },
    {
      "timestamp": 1757893978242,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893978290,
      "category": "submit_flag",
      "value": 58,
      "playerId": 3
    },
    {
      "timestamp": 1757893978291,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893978298,
      "category": "submit_flag",
      "value": 54,
      "playerId": 5
    },
    {
      "timestamp": 1757893978299,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893978309,
      "category": "submit_flag",
      "value": 49,
      "playerId": 3
    },
    {
      "timestamp": 1757893978309,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893978328,
      "category": "websocket_connected",
      "value": 177,
      "playerId": 53
    },
    {
      "timestamp": 1757893978333,
      "category": "websocket_connected",
      "value": 446,
      "playerId": 24
    },
    {
      "timestamp": 1757893978359,
      "category": "submit_flag",
      "value": 65,
      "playerId": 5
    },
    {
      "timestamp": 1757893978359,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893978366,
      "category": "submit_flag",
      "value": 56,
      "playerId": 5
    },
    {
      "timestamp": 1757893978366,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893978386,
      "category": "submit_flag",
      "value": 58,
      "playerId": 69
    },
    {
      "timestamp": 1757893978386,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893978397,
      "category": "static_file_loaded",
      "value": 10504,
      "playerId": 31
    },
    {
      "timestamp": 1757893978404,
      "category": "submit_flag",
      "value": 55,
      "playerId": 69
    },
    {
      "timestamp": 1757893978404,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893978407,
      "category": "submit_flag",
      "value": 55,
      "playerId": 69
    },
    {
      "timestamp": 1757893978408,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893978410,
      "category": "submit_flag",
      "value": 52,
      "playerId": 4
    },
    {
      "timestamp": 1757893978410,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893978429,
      "category": "submit_flag",
      "value": 80,
      "playerId": 72
    },
    {
      "timestamp": 1757893978429,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893978435,
      "category": "submit_flag",
      "value": 61,
      "playerId": 50
    },
    {
      "timestamp": 1757893978435,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893978446,
      "category": "submit_flag",
      "value": 53,
      "playerId": 4
    },
    {
      "timestamp": 1757893978446,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893978452,
      "category": "submit_flag",
      "value": 516,
      "playerId": 55
    },
    {
      "timestamp": 1757893978452,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893978455,
      "category": "submit_flag",
      "value": 56,
      "playerId": 72
    },
    {
      "timestamp": 1757893978455,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893978463,
      "category": "submit_flag",
      "value": 50,
      "playerId": 4
    },
    {
      "timestamp": 1757893978463,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893978464,
      "category": "submit_flag",
      "value": 49,
      "playerId": 50
    },
    {
      "timestamp": 1757893978464,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893978479,
      "category": "submit_flag",
      "value": 56,
      "playerId": 50
    },
    {
      "timestamp": 1757893978480,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893978488,
      "category": "submit_flag",
      "value": 46,
      "playerId": 30
    },
    {
      "timestamp": 1757893978489,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893978502,
      "category": "submit_flag",
      "value": 53,
      "playerId": 72
    },
    {
      "timestamp": 1757893978502,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893978526,
      "category": "submit_flag",
      "value": 59,
      "playerId": 89
    },
    {
      "timestamp": 1757893978526,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893978532,
      "category": "static_file_loaded",
      "value": 2032,
      "playerId": 81
    },
    {
      "timestamp": 1757893978536,
      "category": "submit_flag",
      "value": 55,
      "playerId": 6
    },
    {
      "timestamp": 1757893978536,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893978537,
      "category": "submit_flag",
      "value": 44,
      "playerId": 30
    },
    {
      "timestamp": 1757893978537,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893978553,
      "category": "submit_flag",
      "value": 52,
      "playerId": 87
    },
    {
      "timestamp": 1757893978553,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893978559,
      "category": "submit_flag",
      "value": 59,
      "playerId": 87
    },
    {
      "timestamp": 1757893978559,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893978569,
      "category": "submit_flag",
      "value": 52,
      "playerId": 87
    },
    {
      "timestamp": 1757893978569,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893978586,
      "category": "submit_flag",
      "value": 53,
      "playerId": 30
    },
    {
      "timestamp": 1757893978586,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893978608,
      "category": "submit_flag",
      "value": 63,
      "playerId": 6
    },
    {
      "timestamp": 1757893978608,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893978648,
      "category": "submit_flag",
      "value": 45,
      "playerId": 48
    },
    {
      "timestamp": 1757893978648,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893978663,
      "category": "static_file_loaded",
      "value": 10986,
      "playerId": 40
    },
    {
      "timestamp": 1757893978674,
      "category": "submit_flag",
      "value": 55,
      "playerId": 48
    },
    {
      "timestamp": 1757893978674,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893978687,
      "category": "login_attempt",
      "value": 56,
      "playerId": 81
    },
    {
      "timestamp": 1757893978687,
      "category": "login_success",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893978698,
      "category": "submit_flag",
      "value": 66,
      "playerId": 53
    },
    {
      "timestamp": 1757893978698,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893978699,
      "category": "static_file_loaded",
      "value": 10826,
      "playerId": 10
    },
    {
      "timestamp": 1757893978708,
      "category": "submit_flag",
      "value": 68,
      "playerId": 48
    },
    {
      "timestamp": 1757893978708,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893978716,
      "category": "submit_flag",
      "value": 193,
      "playerId": 6
    },
    {
      "timestamp": 1757893978716,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893978738,
      "category": "submit_flag",
      "value": 49,
      "playerId": 89
    },
    {
      "timestamp": 1757893978738,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893978743,
      "category": "submit_flag",
      "value": 47,
      "playerId": 53
    },
    {
      "timestamp": 1757893978743,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893978811,
      "category": "submit_flag",
      "value": 170,
      "playerId": 53
    },
    {
      "timestamp": 1757893978811,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893978848,
      "category": "submit_flag",
      "value": 54,
      "playerId": 24
    },
    {
      "timestamp": 1757893978848,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893978862,
      "category": "submit_flag",
      "value": 61,
      "playerId": 24
    },
    {
      "timestamp": 1757893978862,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893978871,
      "category": "submit_flag",
      "value": 50,
      "playerId": 24
    },
    {
      "timestamp": 1757893978871,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893978917,
      "category": "websocket_connected",
      "value": 178,
      "playerId": 81
    },
    {
      "timestamp": 1757893978942,
      "category": "submit_flag",
      "value": 51,
      "playerId": 55
    },
    {
      "timestamp": 1757893978942,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893978964,
      "category": "submit_flag",
      "value": 52,
      "playerId": 89
    },
    {
      "timestamp": 1757893978964,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893978973,
      "category": "submit_flag",
      "value": 49,
      "playerId": 50
    },
    {
      "timestamp": 1757893978973,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893978981,
      "category": "submit_flag",
      "value": 52,
      "playerId": 3
    },
    {
      "timestamp": 1757893978981,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893978987,
      "category": "submit_flag",
      "value": 56,
      "playerId": 3
    },
    {
      "timestamp": 1757893978987,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893978998,
      "category": "submit_flag",
      "value": 47,
      "playerId": 55
    },
    {
      "timestamp": 1757893978998,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893979039,
      "category": "submit_flag",
      "value": 54,
      "playerId": 55
    },
    {
      "timestamp": 1757893979040,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893979045,
      "category": "submit_flag",
      "value": 57,
      "playerId": 3
    },
    {
      "timestamp": 1757893979045,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893979053,
      "category": "submit_flag",
      "value": 63,
      "playerId": 50
    },
    {
      "timestamp": 1757893979053,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893979124,
      "category": "submit_flag",
      "value": 46,
      "playerId": 53
    },
    {
      "timestamp": 1757893979125,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893979157,
      "category": "static_file_loaded",
      "value": 11484,
      "playerId": 22
    },
    {
      "timestamp": 1757893979162,
      "category": "submit_flag",
      "value": 56,
      "playerId": 53
    },
    {
      "timestamp": 1757893979162,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893979176,
      "category": "submit_flag",
      "value": 50,
      "playerId": 53
    },
    {
      "timestamp": 1757893979176,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893979214,
      "category": "static_file_loaded",
      "value": 515,
      "playerId": 10
    },
    {
      "timestamp": 1757893979219,
      "category": "submit_flag",
      "value": 48,
      "playerId": 5
    },
    {
      "timestamp": 1757893979219,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893979227,
      "category": "submit_flag",
      "value": 48,
      "playerId": 30
    },
    {
      "timestamp": 1757893979227,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893979238,
      "category": "submit_flag",
      "value": 50,
      "playerId": 30
    },
    {
      "timestamp": 1757893979239,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893979263,
      "category": "submit_flag",
      "value": 50,
      "playerId": 72
    },
    {
      "timestamp": 1757893979263,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893979282,
      "category": "static_file_loaded",
      "value": 1049,
      "playerId": 17
    },
    {
      "timestamp": 1757893979283,
      "category": "submit_flag",
      "value": 73,
      "playerId": 72
    },
    {
      "timestamp": 1757893979283,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893979359,
      "category": "submit_flag",
      "value": 144,
      "playerId": 5
    },
    {
      "timestamp": 1757893979359,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893979360,
      "category": "submit_flag",
      "value": 142,
      "playerId": 5
    },
    {
      "timestamp": 1757893979360,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893979361,
      "category": "submit_flag",
      "value": 106,
      "playerId": 30
    },
    {
      "timestamp": 1757893979361,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893979370,
      "category": "submit_flag",
      "value": 150,
      "playerId": 67
    },
    {
      "timestamp": 1757893979370,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893979373,
      "category": "submit_flag",
      "value": 94,
      "playerId": 81
    },
    {
      "timestamp": 1757893979373,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893979374,
      "category": "submit_flag",
      "value": 97,
      "playerId": 67
    },
    {
      "timestamp": 1757893979374,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893979377,
      "category": "submit_flag",
      "value": 125,
      "playerId": 4
    },
    {
      "timestamp": 1757893979377,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893979378,
      "category": "submit_flag",
      "value": 166,
      "playerId": 72
    },
    {
      "timestamp": 1757893979378,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893979407,
      "category": "submit_flag",
      "value": 85,
      "playerId": 4
    },
    {
      "timestamp": 1757893979407,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893979595,
      "category": "submit_flag",
      "value": 308,
      "playerId": 81
    },
    {
      "timestamp": 1757893979595,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893979600,
      "category": "login_attempt",
      "value": 217,
      "playerId": 17
    },
    {
      "timestamp": 1757893979600,
      "category": "login_success",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893979603,
      "category": "submit_flag",
      "value": 312,
      "playerId": 81
    },
    {
      "timestamp": 1757893979603,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893979604,
      "category": "submit_flag",
      "value": 207,
      "playerId": 69
    },
    {
      "timestamp": 1757893979604,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893979606,
      "category": "submit_flag",
      "value": 316,
      "playerId": 6
    },
    {
      "timestamp": 1757893979606,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893979615,
      "category": "submit_flag",
      "value": 239,
      "playerId": 6
    },
    {
      "timestamp": 1757893979615,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893979615,
      "category": "submit_flag",
      "value": 281,
      "playerId": 48
    },
    {
      "timestamp": 1757893979615,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893979616,
      "category": "submit_flag",
      "value": 267,
      "playerId": 6
    },
    {
      "timestamp": 1757893979616,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893979619,
      "category": "submit_flag",
      "value": 271,
      "playerId": 48
    },
    {
      "timestamp": 1757893979619,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893979622,
      "category": "login_attempt",
      "value": 307,
      "playerId": 10
    },
    {
      "timestamp": 1757893979622,
      "category": "login_success",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893979641,
      "category": "submit_flag",
      "value": 198,
      "playerId": 24
    },
    {
      "timestamp": 1757893979641,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893979712,
      "category": "submit_flag",
      "value": 349,
      "playerId": 48
    },
    {
      "timestamp": 1757893979712,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893979715,
      "category": "submit_flag",
      "value": 306,
      "playerId": 87
    },
    {
      "timestamp": 1757893979715,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893979729,
      "category": "submit_flag",
      "value": 324,
      "playerId": 87
    },
    {
      "timestamp": 1757893979729,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893979730,
      "category": "submit_flag",
      "value": 329,
      "playerId": 69
    },
    {
      "timestamp": 1757893979730,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893979737,
      "category": "static_file_loaded",
      "value": 1074,
      "playerId": 40
    },
    {
      "timestamp": 1757893979743,
      "category": "submit_flag",
      "value": 454,
      "playerId": 67
    },
    {
      "timestamp": 1757893979743,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893979755,
      "category": "submit_flag",
      "value": 308,
      "playerId": 87
    },
    {
      "timestamp": 1757893979755,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893979798,
      "category": "static_file_loaded",
      "value": 1401,
      "playerId": 31
    },
    {
      "timestamp": 1757893979833,
      "category": "websocket_connected",
      "value": 181,
      "playerId": 17
    },
    {
      "timestamp": 1757893979851,
      "category": "websocket_connected",
      "value": 179,
      "playerId": 10
    },
    {
      "timestamp": 1757893979892,
      "category": "login_attempt",
      "value": 53,
      "playerId": 40
    },
    {
      "timestamp": 1757893979892,
      "category": "login_success",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893979938,
      "category": "submit_flag",
      "value": 49,
      "playerId": 3
    },
    {
      "timestamp": 1757893979938,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893979946,
      "category": "login_attempt",
      "value": 48,
      "playerId": 31
    },
    {
      "timestamp": 1757893979946,
      "category": "login_success",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893979964,
      "category": "submit_flag",
      "value": 64,
      "playerId": 3
    },
    {
      "timestamp": 1757893979964,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893980005,
      "category": "submit_flag",
      "value": 56,
      "playerId": 30
    },
    {
      "timestamp": 1757893980005,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893980014,
      "category": "submit_flag",
      "value": 59,
      "playerId": 30
    },
    {
      "timestamp": 1757893980015,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893980015,
      "category": "submit_flag",
      "value": 76,
      "playerId": 55
    },
    {
      "timestamp": 1757893980015,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893980021,
      "category": "submit_flag",
      "value": 50,
      "playerId": 50
    },
    {
      "timestamp": 1757893980021,
      "category": "flag_correct",
      "value": 1,
      "playerId": 50
    },
    {
      "timestamp": 1757893980022,
      "category": "submit_flag",
      "value": 46,
      "playerId": 3
    },
    {
      "timestamp": 1757893980022,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893980029,
      "category": "submit_flag",
      "value": 53,
      "playerId": 81
    },
    {
      "timestamp": 1757893980029,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893980035,
      "category": "submit_flag",
      "value": 59,
      "playerId": 81
    },
    {
      "timestamp": 1757893980035,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893980046,
      "category": "submit_flag",
      "value": 81,
      "playerId": 30
    },
    {
      "timestamp": 1757893980046,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893980059,
      "category": "submit_flag",
      "value": 57,
      "playerId": 55
    },
    {
      "timestamp": 1757893980059,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893980079,
      "category": "submit_flag",
      "value": 134,
      "playerId": 55
    },
    {
      "timestamp": 1757893980079,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893980088,
      "category": "submit_flag",
      "value": 62,
      "playerId": 87
    },
    {
      "timestamp": 1757893980088,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893980098,
      "category": "submit_flag",
      "value": 61,
      "playerId": 81
    },
    {
      "timestamp": 1757893980098,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893980103,
      "category": "websocket_connected",
      "value": 161,
      "playerId": 40
    },
    {
      "timestamp": 1757893980115,
      "category": "submit_flag",
      "value": 48,
      "playerId": 48
    },
    {
      "timestamp": 1757893980115,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893980116,
      "category": "static_file_loaded",
      "value": 959,
      "playerId": 22
    },
    {
      "timestamp": 1757893980122,
      "category": "submit_flag",
      "value": 54,
      "playerId": 87
    },
    {
      "timestamp": 1757893980122,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893980123,
      "category": "submit_flag",
      "value": 61,
      "playerId": 5
    },
    {
      "timestamp": 1757893980123,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893980126,
      "category": "submit_flag",
      "value": 51,
      "playerId": 87
    },
    {
      "timestamp": 1757893980126,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893980148,
      "category": "submit_flag",
      "value": 47,
      "playerId": 72
    },
    {
      "timestamp": 1757893980148,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893980155,
      "category": "submit_flag",
      "value": 52,
      "playerId": 48
    },
    {
      "timestamp": 1757893980155,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893980160,
      "category": "submit_flag",
      "value": 60,
      "playerId": 48
    },
    {
      "timestamp": 1757893980160,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893980163,
      "category": "websocket_connected",
      "value": 166,
      "playerId": 31
    },
    {
      "timestamp": 1757893980173,
      "category": "submit_flag",
      "value": 50,
      "playerId": 72
    },
    {
      "timestamp": 1757893980173,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893980174,
      "category": "submit_flag",
      "value": 52,
      "playerId": 5
    },
    {
      "timestamp": 1757893980174,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893980194,
      "category": "submit_flag",
      "value": 67,
      "playerId": 69
    },
    {
      "timestamp": 1757893980194,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893980195,
      "category": "submit_flag",
      "value": 72,
      "playerId": 5
    },
    {
      "timestamp": 1757893980195,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893980196,
      "category": "submit_flag",
      "value": 77,
      "playerId": 72
    },
    {
      "timestamp": 1757893980196,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893980212,
      "category": "submit_flag",
      "value": 51,
      "playerId": 4
    },
    {
      "timestamp": 1757893980212,
      "category": "flag_correct",
      "value": 1,
      "playerId": 4
    },
    {
      "timestamp": 1757893980247,
      "category": "submit_flag",
      "value": 55,
      "playerId": 17
    },
    {
      "timestamp": 1757893980247,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893980257,
      "category": "submit_flag",
      "value": 50,
      "playerId": 17
    },
    {
      "timestamp": 1757893980257,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893980273,
      "category": "login_attempt",
      "value": 56,
      "playerId": 22
    },
    {
      "timestamp": 1757893980273,
      "category": "login_success",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893980278,
      "category": "submit_flag",
      "value": 74,
      "playerId": 17
    },
    {
      "timestamp": 1757893980278,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893980290,
      "category": "submit_flag",
      "value": 49,
      "playerId": 53
    },
    {
      "timestamp": 1757893980290,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893980303,
      "category": "static_file_loaded",
      "value": 12611,
      "playerId": 7
    },
    {
      "timestamp": 1757893980316,
      "category": "submit_flag",
      "value": 56,
      "playerId": 53
    },
    {
      "timestamp": 1757893980316,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893980330,
      "category": "submit_flag",
      "value": 919,
      "playerId": 24
    },
    {
      "timestamp": 1757893980330,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893980337,
      "category": "submit_flag",
      "value": 61,
      "playerId": 53
    },
    {
      "timestamp": 1757893980337,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893980358,
      "category": "submit_flag",
      "value": 49,
      "playerId": 6
    },
    {
      "timestamp": 1757893980358,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893980410,
      "category": "submit_flag",
      "value": 51,
      "playerId": 6
    },
    {
      "timestamp": 1757893980410,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893980416,
      "category": "static_file_loaded",
      "value": 12586,
      "playerId": 35
    },
    {
      "timestamp": 1757893980420,
      "category": "static_file_loaded",
      "value": 12754,
      "playerId": 26
    },
    {
      "timestamp": 1757893980439,
      "category": "submit_flag",
      "value": 51,
      "playerId": 6
    },
    {
      "timestamp": 1757893980439,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893980483,
      "category": "submit_flag",
      "value": 66,
      "playerId": 67
    },
    {
      "timestamp": 1757893980483,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893980487,
      "category": "static_file_loaded",
      "value": 12632,
      "playerId": 8
    },
    {
      "timestamp": 1757893980490,
      "category": "submit_flag",
      "value": 62,
      "playerId": 10
    },
    {
      "timestamp": 1757893980490,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893980497,
      "category": "submit_flag",
      "value": 66,
      "playerId": 40
    },
    {
      "timestamp": 1757893980497,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893980501,
      "category": "websocket_connected",
      "value": 177,
      "playerId": 22
    },
    {
      "timestamp": 1757893980509,
      "category": "submit_flag",
      "value": 61,
      "playerId": 67
    },
    {
      "timestamp": 1757893980509,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893980513,
      "category": "submit_flag",
      "value": 53,
      "playerId": 10
    },
    {
      "timestamp": 1757893980513,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893980521,
      "category": "submit_flag",
      "value": 51,
      "playerId": 87
    },
    {
      "timestamp": 1757893980521,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893980535,
      "category": "submit_flag",
      "value": 81,
      "playerId": 67
    },
    {
      "timestamp": 1757893980535,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893980541,
      "category": "submit_flag",
      "value": 49,
      "playerId": 40
    },
    {
      "timestamp": 1757893980541,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893980555,
      "category": "submit_flag",
      "value": 67,
      "playerId": 10
    },
    {
      "timestamp": 1757893980555,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893980563,
      "category": "submit_flag",
      "value": 56,
      "playerId": 31
    },
    {
      "timestamp": 1757893980563,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893980577,
      "category": "submit_flag",
      "value": 57,
      "playerId": 31
    },
    {
      "timestamp": 1757893980577,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893980584,
      "category": "submit_flag",
      "value": 62,
      "playerId": 5
    },
    {
      "timestamp": 1757893980584,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893980591,
      "category": "submit_flag",
      "value": 66,
      "playerId": 87
    },
    {
      "timestamp": 1757893980591,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893980592,
      "category": "submit_flag",
      "value": 167,
      "playerId": 69
    },
    {
      "timestamp": 1757893980592,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893980601,
      "category": "submit_flag",
      "value": 73,
      "playerId": 5
    },
    {
      "timestamp": 1757893980601,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893980604,
      "category": "submit_flag",
      "value": 53,
      "playerId": 31
    },
    {
      "timestamp": 1757893980604,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893980609,
      "category": "submit_flag",
      "value": 1194,
      "playerId": 24
    },
    {
      "timestamp": 1757893980609,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893980635,
      "category": "submit_flag",
      "value": 79,
      "playerId": 5
    },
    {
      "timestamp": 1757893980635,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893980636,
      "category": "static_file_loaded",
      "value": 12905,
      "playerId": 16
    },
    {
      "timestamp": 1757893980637,
      "category": "static_file_loaded",
      "value": 12811,
      "playerId": 98
    },
    {
      "timestamp": 1757893980670,
      "category": "submit_flag",
      "value": 50,
      "playerId": 3
    },
    {
      "timestamp": 1757893980670,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893980677,
      "category": "submit_flag",
      "value": 56,
      "playerId": 30
    },
    {
      "timestamp": 1757893980677,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893980680,
      "category": "submit_flag",
      "value": 55,
      "playerId": 3
    },
    {
      "timestamp": 1757893980680,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893980699,
      "category": "submit_flag",
      "value": 67,
      "playerId": 3
    },
    {
      "timestamp": 1757893980699,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893980704,
      "category": "submit_flag",
      "value": 58,
      "playerId": 30
    },
    {
      "timestamp": 1757893980704,
      "category": "flag_correct",
      "value": 1,
      "playerId": 30
    },
    {
      "timestamp": 1757893980709,
      "category": "submit_flag",
      "value": 62,
      "playerId": 53
    },
    {
      "timestamp": 1757893980709,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893980723,
      "category": "submit_flag",
      "value": 72,
      "playerId": 53
    },
    {
      "timestamp": 1757893980723,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893980728,
      "category": "submit_flag",
      "value": 71,
      "playerId": 53
    },
    {
      "timestamp": 1757893980728,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893980746,
      "category": "submit_flag",
      "value": 52,
      "playerId": 55
    },
    {
      "timestamp": 1757893980746,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893980819,
      "category": "submit_flag",
      "value": 58,
      "playerId": 55
    },
    {
      "timestamp": 1757893980819,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893980822,
      "category": "submit_flag",
      "value": 65,
      "playerId": 69
    },
    {
      "timestamp": 1757893980822,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893980836,
      "category": "submit_flag",
      "value": 74,
      "playerId": 55
    },
    {
      "timestamp": 1757893980836,
      "category": "flag_correct",
      "value": 1,
      "playerId": 55
    },
    {
      "timestamp": 1757893980846,
      "category": "submit_flag",
      "value": 391,
      "playerId": 40
    },
    {
      "timestamp": 1757893980846,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893980852,
      "category": "static_file_loaded",
      "value": 432,
      "playerId": 26
    },
    {
      "timestamp": 1757893980878,
      "category": "static_file_loaded",
      "value": 12619,
      "playerId": 13
    },
    {
      "timestamp": 1757893980890,
      "category": "submit_flag",
      "value": 63,
      "playerId": 22
    },
    {
      "timestamp": 1757893980891,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893980903,
      "category": "submit_flag",
      "value": 65,
      "playerId": 17
    },
    {
      "timestamp": 1757893980903,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893980905,
      "category": "submit_flag",
      "value": 62,
      "playerId": 22
    },
    {
      "timestamp": 1757893980905,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893980917,
      "category": "submit_flag",
      "value": 62,
      "playerId": 17
    },
    {
      "timestamp": 1757893980917,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893980926,
      "category": "submit_flag",
      "value": 56,
      "playerId": 17
    },
    {
      "timestamp": 1757893980926,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893980933,
      "category": "submit_flag",
      "value": 77,
      "playerId": 6
    },
    {
      "timestamp": 1757893980933,
      "category": "flag_correct",
      "value": 1,
      "playerId": 6
    },
    {
      "timestamp": 1757893980941,
      "category": "submit_flag",
      "value": 88,
      "playerId": 22
    },
    {
      "timestamp": 1757893980941,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893980979,
      "category": "submit_flag",
      "value": 59,
      "playerId": 48
    },
    {
      "timestamp": 1757893980979,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893980989,
      "category": "submit_flag",
      "value": 49,
      "playerId": 48
    },
    {
      "timestamp": 1757893980989,
      "category": "flag_correct",
      "value": 1,
      "playerId": 48
    },
    {
      "timestamp": 1757893981001,
      "category": "login_attempt",
      "value": 50,
      "playerId": 26
    },
    {
      "timestamp": 1757893981002,
      "category": "login_success",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893981023,
      "category": "submit_flag",
      "value": 58,
      "playerId": 81
    },
    {
      "timestamp": 1757893981023,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893981027,
      "category": "static_file_loaded",
      "value": 391,
      "playerId": 16
    },
    {
      "timestamp": 1757893981039,
      "category": "submit_flag",
      "value": 56,
      "playerId": 67
    },
    {
      "timestamp": 1757893981039,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893981050,
      "category": "submit_flag",
      "value": 56,
      "playerId": 81
    },
    {
      "timestamp": 1757893981050,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893981058,
      "category": "submit_flag",
      "value": 78,
      "playerId": 81
    },
    {
      "timestamp": 1757893981058,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893981066,
      "category": "submit_flag",
      "value": 53,
      "playerId": 67
    },
    {
      "timestamp": 1757893981066,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893981077,
      "category": "submit_flag",
      "value": 49,
      "playerId": 69
    },
    {
      "timestamp": 1757893981077,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893981109,
      "category": "submit_flag",
      "value": 49,
      "playerId": 24
    },
    {
      "timestamp": 1757893981109,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893981131,
      "category": "submit_flag",
      "value": 71,
      "playerId": 24
    },
    {
      "timestamp": 1757893981131,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893981152,
      "category": "static_file_loaded",
      "value": 13593,
      "playerId": 33
    },
    {
      "timestamp": 1757893981163,
      "category": "submit_flag",
      "value": 52,
      "playerId": 3
    },
    {
      "timestamp": 1757893981163,
      "category": "flag_correct",
      "value": 1,
      "playerId": 3
    },
    {
      "timestamp": 1757893981164,
      "category": "static_file_loaded",
      "value": 527,
      "playerId": 98
    },
    {
      "timestamp": 1757893981170,
      "category": "submit_flag",
      "value": 68,
      "playerId": 72
    },
    {
      "timestamp": 1757893981170,
      "category": "flag_correct",
      "value": 1,
      "playerId": 72
    },
    {
      "timestamp": 1757893981183,
      "category": "submit_flag",
      "value": 82,
      "playerId": 24
    },
    {
      "timestamp": 1757893981183,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893981188,
      "category": "login_attempt",
      "value": 61,
      "playerId": 16
    },
    {
      "timestamp": 1757893981188,
      "category": "login_success",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893981198,
      "category": "submit_flag",
      "value": 60,
      "playerId": 87
    },
    {
      "timestamp": 1757893981198,
      "category": "flag_correct",
      "value": 1,
      "playerId": 87
    },
    {
      "timestamp": 1757893981211,
      "category": "static_file_loaded",
      "value": 908,
      "playerId": 7
    },
    {
      "timestamp": 1757893981216,
      "category": "websocket_connected",
      "value": 164,
      "playerId": 26
    },
    {
      "timestamp": 1757893981273,
      "category": "submit_flag",
      "value": 47,
      "playerId": 53
    },
    {
      "timestamp": 1757893981273,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893981279,
      "category": "submit_flag",
      "value": 51,
      "playerId": 53
    },
    {
      "timestamp": 1757893981279,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893981309,
      "category": "submit_flag",
      "value": 66,
      "playerId": 10
    },
    {
      "timestamp": 1757893981309,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893981314,
      "category": "login_attempt",
      "value": 50,
      "playerId": 98
    },
    {
      "timestamp": 1757893981314,
      "category": "login_success",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893981325,
      "category": "submit_flag",
      "value": 66,
      "playerId": 31
    },
    {
      "timestamp": 1757893981325,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893981334,
      "category": "static_file_loaded",
      "value": 13639,
      "playerId": 29
    },
    {
      "timestamp": 1757893981351,
      "category": "submit_flag",
      "value": 58,
      "playerId": 31
    },
    {
      "timestamp": 1757893981351,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893981356,
      "category": "submit_flag",
      "value": 67,
      "playerId": 10
    },
    {
      "timestamp": 1757893981356,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893981363,
      "category": "submit_flag",
      "value": 45,
      "playerId": 69
    },
    {
      "timestamp": 1757893981363,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893981367,
      "category": "login_attempt",
      "value": 57,
      "playerId": 7
    },
    {
      "timestamp": 1757893981367,
      "category": "login_success",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893981375,
      "category": "submit_flag",
      "value": 65,
      "playerId": 31
    },
    {
      "timestamp": 1757893981375,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893981378,
      "category": "submit_flag",
      "value": 78,
      "playerId": 10
    },
    {
      "timestamp": 1757893981378,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893981432,
      "category": "submit_flag",
      "value": 62,
      "playerId": 5
    },
    {
      "timestamp": 1757893981432,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893981441,
      "category": "static_file_loaded",
      "value": 13766,
      "playerId": 41
    },
    {
      "timestamp": 1757893981443,
      "category": "submit_flag",
      "value": 55,
      "playerId": 5
    },
    {
      "timestamp": 1757893981443,
      "category": "flag_correct",
      "value": 1,
      "playerId": 5
    },
    {
      "timestamp": 1757893981457,
      "category": "submit_flag",
      "value": 59,
      "playerId": 22
    },
    {
      "timestamp": 1757893981458,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893981466,
      "category": "submit_flag",
      "value": 59,
      "playerId": 22
    },
    {
      "timestamp": 1757893981466,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893981474,
      "category": "websocket_connected",
      "value": 235,
      "playerId": 16
    },
    {
      "timestamp": 1757893981474,
      "category": "submit_flag",
      "value": 53,
      "playerId": 22
    },
    {
      "timestamp": 1757893981474,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893981489,
      "category": "submit_flag",
      "value": 48,
      "playerId": 40
    },
    {
      "timestamp": 1757893981489,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893981505,
      "category": "submit_flag",
      "value": 57,
      "playerId": 67
    },
    {
      "timestamp": 1757893981505,
      "category": "flag_correct",
      "value": 1,
      "playerId": 67
    },
    {
      "timestamp": 1757893981515,
      "category": "static_file_loaded",
      "value": 13853,
      "playerId": 9
    },
    {
      "timestamp": 1757893981528,
      "category": "websocket_connected",
      "value": 163,
      "playerId": 98
    },
    {
      "timestamp": 1757893981540,
      "category": "submit_flag",
      "value": 65,
      "playerId": 40
    },
    {
      "timestamp": 1757893981540,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893981543,
      "category": "static_file_loaded",
      "value": 665,
      "playerId": 13
    },
    {
      "timestamp": 1757893981562,
      "category": "submit_flag",
      "value": 55,
      "playerId": 40
    },
    {
      "timestamp": 1757893981562,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893981568,
      "category": "submit_flag",
      "value": 46,
      "playerId": 17
    },
    {
      "timestamp": 1757893981568,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893981573,
      "category": "websocket_connected",
      "value": 156,
      "playerId": 7
    },
    {
      "timestamp": 1757893981586,
      "category": "submit_flag",
      "value": 49,
      "playerId": 17
    },
    {
      "timestamp": 1757893981586,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893981603,
      "category": "submit_flag",
      "value": 48,
      "playerId": 17
    },
    {
      "timestamp": 1757893981603,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893981644,
      "category": "submit_flag",
      "value": 51,
      "playerId": 89
    },
    {
      "timestamp": 1757893981644,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893981646,
      "category": "submit_flag",
      "value": 68,
      "playerId": 69
    },
    {
      "timestamp": 1757893981646,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893981647,
      "category": "submit_flag",
      "value": 64,
      "playerId": 89
    },
    {
      "timestamp": 1757893981647,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893981649,
      "category": "static_file_loaded",
      "value": 1233,
      "playerId": 35
    },
    {
      "timestamp": 1757893981655,
      "category": "submit_flag",
      "value": 46,
      "playerId": 26
    },
    {
      "timestamp": 1757893981655,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893981667,
      "category": "submit_flag",
      "value": 61,
      "playerId": 89
    },
    {
      "timestamp": 1757893981667,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893981673,
      "category": "submit_flag",
      "value": 64,
      "playerId": 26
    },
    {
      "timestamp": 1757893981673,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893981690,
      "category": "submit_flag",
      "value": 80,
      "playerId": 26
    },
    {
      "timestamp": 1757893981690,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893981703,
      "category": "login_attempt",
      "value": 60,
      "playerId": 13
    },
    {
      "timestamp": 1757893981703,
      "category": "login_success",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893981817,
      "category": "login_attempt",
      "value": 67,
      "playerId": 35
    },
    {
      "timestamp": 1757893981817,
      "category": "login_success",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893981902,
      "category": "submit_flag",
      "value": 58,
      "playerId": 98
    },
    {
      "timestamp": 1757893981902,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893981919,
      "category": "static_file_loaded",
      "value": 1432,
      "playerId": 8
    },
    {
      "timestamp": 1757893981919,
      "category": "submit_flag",
      "value": 76,
      "playerId": 98
    },
    {
      "timestamp": 1757893981919,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893981943,
      "category": "websocket_connected",
      "value": 189,
      "playerId": 13
    },
    {
      "timestamp": 1757893981946,
      "category": "submit_flag",
      "value": 56,
      "playerId": 7
    },
    {
      "timestamp": 1757893981946,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893981947,
      "category": "static_file_loaded",
      "value": 14265,
      "playerId": 83
    },
    {
      "timestamp": 1757893981963,
      "category": "submit_flag",
      "value": 62,
      "playerId": 7
    },
    {
      "timestamp": 1757893981963,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893981970,
      "category": "submit_flag",
      "value": 53,
      "playerId": 7
    },
    {
      "timestamp": 1757893981970,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893981982,
      "category": "submit_flag",
      "value": 60,
      "playerId": 98
    },
    {
      "timestamp": 1757893981983,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893982039,
      "category": "submit_flag",
      "value": 55,
      "playerId": 16
    },
    {
      "timestamp": 1757893982040,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893982045,
      "category": "websocket_connected",
      "value": 176,
      "playerId": 35
    },
    {
      "timestamp": 1757893982048,
      "category": "submit_flag",
      "value": 65,
      "playerId": 16
    },
    {
      "timestamp": 1757893982048,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893982072,
      "category": "login_attempt",
      "value": 53,
      "playerId": 8
    },
    {
      "timestamp": 1757893982072,
      "category": "login_success",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893982084,
      "category": "static_file_loaded",
      "value": 13645,
      "playerId": 65
    },
    {
      "timestamp": 1757893982088,
      "category": "submit_flag",
      "value": 69,
      "playerId": 16
    },
    {
      "timestamp": 1757893982088,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893982111,
      "category": "static_file_loaded",
      "value": 777,
      "playerId": 29
    },
    {
      "timestamp": 1757893982119,
      "category": "submit_flag",
      "value": 53,
      "playerId": 10
    },
    {
      "timestamp": 1757893982119,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893982141,
      "category": "submit_flag",
      "value": 68,
      "playerId": 26
    },
    {
      "timestamp": 1757893982141,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893982144,
      "category": "submit_flag",
      "value": 82,
      "playerId": 10
    },
    {
      "timestamp": 1757893982144,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893982148,
      "category": "submit_flag",
      "value": 91,
      "playerId": 17
    },
    {
      "timestamp": 1757893982148,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893982172,
      "category": "submit_flag",
      "value": 72,
      "playerId": 10
    },
    {
      "timestamp": 1757893982172,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893982183,
      "category": "submit_flag",
      "value": 74,
      "playerId": 24
    },
    {
      "timestamp": 1757893982183,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893982192,
      "category": "submit_flag",
      "value": 89,
      "playerId": 26
    },
    {
      "timestamp": 1757893982192,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893982207,
      "category": "submit_flag",
      "value": 70,
      "playerId": 17
    },
    {
      "timestamp": 1757893982207,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893982212,
      "category": "submit_flag",
      "value": 56,
      "playerId": 26
    },
    {
      "timestamp": 1757893982212,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893982220,
      "category": "submit_flag",
      "value": 67,
      "playerId": 17
    },
    {
      "timestamp": 1757893982221,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893982230,
      "category": "submit_flag",
      "value": 54,
      "playerId": 24
    },
    {
      "timestamp": 1757893982231,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893982241,
      "category": "submit_flag",
      "value": 63,
      "playerId": 24
    },
    {
      "timestamp": 1757893982241,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893982244,
      "category": "submit_flag",
      "value": 48,
      "playerId": 31
    },
    {
      "timestamp": 1757893982244,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893982254,
      "category": "submit_flag",
      "value": 46,
      "playerId": 31
    },
    {
      "timestamp": 1757893982254,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893982267,
      "category": "submit_flag",
      "value": 71,
      "playerId": 31
    },
    {
      "timestamp": 1757893982267,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893982276,
      "category": "login_attempt",
      "value": 64,
      "playerId": 29
    },
    {
      "timestamp": 1757893982276,
      "category": "login_success",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893982282,
      "category": "submit_flag",
      "value": 64,
      "playerId": 22
    },
    {
      "timestamp": 1757893982282,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893982283,
      "category": "static_file_loaded",
      "value": 14514,
      "playerId": 79
    },
    {
      "timestamp": 1757893982289,
      "category": "submit_flag",
      "value": 57,
      "playerId": 22
    },
    {
      "timestamp": 1757893982289,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893982298,
      "category": "submit_flag",
      "value": 59,
      "playerId": 22
    },
    {
      "timestamp": 1757893982298,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893982302,
      "category": "websocket_connected",
      "value": 179,
      "playerId": 8
    },
    {
      "timestamp": 1757893982314,
      "category": "static_file_loaded",
      "value": 14741,
      "playerId": 75
    },
    {
      "timestamp": 1757893982348,
      "category": "submit_flag",
      "value": 58,
      "playerId": 89
    },
    {
      "timestamp": 1757893982348,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893982363,
      "category": "submit_flag",
      "value": 56,
      "playerId": 13
    },
    {
      "timestamp": 1757893982363,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893982371,
      "category": "submit_flag",
      "value": 62,
      "playerId": 13
    },
    {
      "timestamp": 1757893982371,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893982375,
      "category": "submit_flag",
      "value": 60,
      "playerId": 13
    },
    {
      "timestamp": 1757893982375,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893982382,
      "category": "static_file_loaded",
      "value": 1230,
      "playerId": 33
    },
    {
      "timestamp": 1757893982395,
      "category": "submit_flag",
      "value": 72,
      "playerId": 89
    },
    {
      "timestamp": 1757893982395,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893982397,
      "category": "submit_flag",
      "value": 64,
      "playerId": 53
    },
    {
      "timestamp": 1757893982397,
      "category": "flag_correct",
      "value": 1,
      "playerId": 53
    },
    {
      "timestamp": 1757893982412,
      "category": "submit_flag",
      "value": 56,
      "playerId": 89
    },
    {
      "timestamp": 1757893982412,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893982436,
      "category": "submit_flag",
      "value": 48,
      "playerId": 35
    },
    {
      "timestamp": 1757893982436,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893982450,
      "category": "submit_flag",
      "value": 66,
      "playerId": 35
    },
    {
      "timestamp": 1757893982450,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893982450,
      "category": "static_file_loaded",
      "value": 1009,
      "playerId": 41
    },
    {
      "timestamp": 1757893982477,
      "category": "submit_flag",
      "value": 71,
      "playerId": 35
    },
    {
      "timestamp": 1757893982477,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893982486,
      "category": "submit_flag",
      "value": 60,
      "playerId": 7
    },
    {
      "timestamp": 1757893982486,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893982493,
      "category": "websocket_connected",
      "value": 167,
      "playerId": 29
    },
    {
      "timestamp": 1757893982503,
      "category": "submit_flag",
      "value": 50,
      "playerId": 7
    },
    {
      "timestamp": 1757893982503,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893982540,
      "category": "submit_flag",
      "value": 57,
      "playerId": 7
    },
    {
      "timestamp": 1757893982540,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893982544,
      "category": "static_file_loaded",
      "value": 14851,
      "playerId": 51
    },
    {
      "timestamp": 1757893982546,
      "category": "login_attempt",
      "value": 62,
      "playerId": 33
    },
    {
      "timestamp": 1757893982546,
      "category": "login_success",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893982549,
      "category": "static_file_loaded",
      "value": 602,
      "playerId": 83
    },
    {
      "timestamp": 1757893982586,
      "category": "submit_flag",
      "value": 77,
      "playerId": 16
    },
    {
      "timestamp": 1757893982586,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893982591,
      "category": "submit_flag",
      "value": 53,
      "playerId": 98
    },
    {
      "timestamp": 1757893982591,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893982607,
      "category": "submit_flag",
      "value": 86,
      "playerId": 16
    },
    {
      "timestamp": 1757893982607,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893982639,
      "category": "submit_flag",
      "value": 61,
      "playerId": 16
    },
    {
      "timestamp": 1757893982639,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893982661,
      "category": "submit_flag",
      "value": 55,
      "playerId": 8
    },
    {
      "timestamp": 1757893982661,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893982672,
      "category": "submit_flag",
      "value": 70,
      "playerId": 98
    },
    {
      "timestamp": 1757893982672,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893982674,
      "category": "submit_flag",
      "value": 53,
      "playerId": 98
    },
    {
      "timestamp": 1757893982674,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893982679,
      "category": "submit_flag",
      "value": 77,
      "playerId": 40
    },
    {
      "timestamp": 1757893982679,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893982685,
      "category": "submit_flag",
      "value": 60,
      "playerId": 8
    },
    {
      "timestamp": 1757893982685,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893982698,
      "category": "submit_flag",
      "value": 66,
      "playerId": 24
    },
    {
      "timestamp": 1757893982698,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893982706,
      "category": "submit_flag",
      "value": 65,
      "playerId": 24
    },
    {
      "timestamp": 1757893982706,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893982715,
      "category": "submit_flag",
      "value": 67,
      "playerId": 40
    },
    {
      "timestamp": 1757893982715,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893982724,
      "category": "submit_flag",
      "value": 112,
      "playerId": 40
    },
    {
      "timestamp": 1757893982724,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893982733,
      "category": "login_attempt",
      "value": 83,
      "playerId": 83
    },
    {
      "timestamp": 1757893982733,
      "category": "login_success",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893982741,
      "category": "submit_flag",
      "value": 55,
      "playerId": 8
    },
    {
      "timestamp": 1757893982741,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893982757,
      "category": "submit_flag",
      "value": 109,
      "playerId": 17
    },
    {
      "timestamp": 1757893982757,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893982759,
      "category": "submit_flag",
      "value": 60,
      "playerId": 17
    },
    {
      "timestamp": 1757893982759,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893982777,
      "category": "submit_flag",
      "value": 112,
      "playerId": 17
    },
    {
      "timestamp": 1757893982777,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893982786,
      "category": "submit_flag",
      "value": 55,
      "playerId": 81
    },
    {
      "timestamp": 1757893982786,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893982802,
      "category": "submit_flag",
      "value": 48,
      "playerId": 26
    },
    {
      "timestamp": 1757893982802,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893982808,
      "category": "submit_flag",
      "value": 60,
      "playerId": 81
    },
    {
      "timestamp": 1757893982808,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893982820,
      "category": "static_file_loaded",
      "value": 506,
      "playerId": 75
    },
    {
      "timestamp": 1757893982822,
      "category": "submit_flag",
      "value": 65,
      "playerId": 22
    },
    {
      "timestamp": 1757893982822,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893982824,
      "category": "static_file_loaded",
      "value": 740,
      "playerId": 65
    },
    {
      "timestamp": 1757893982829,
      "category": "submit_flag",
      "value": 58,
      "playerId": 81
    },
    {
      "timestamp": 1757893982829,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893982834,
      "category": "submit_flag",
      "value": 52,
      "playerId": 22
    },
    {
      "timestamp": 1757893982834,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893982848,
      "category": "submit_flag",
      "value": 72,
      "playerId": 26
    },
    {
      "timestamp": 1757893982848,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893982859,
      "category": "submit_flag",
      "value": 49,
      "playerId": 31
    },
    {
      "timestamp": 1757893982859,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893982863,
      "category": "submit_flag",
      "value": 89,
      "playerId": 22
    },
    {
      "timestamp": 1757893982863,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893982892,
      "category": "submit_flag",
      "value": 128,
      "playerId": 26
    },
    {
      "timestamp": 1757893982892,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893982896,
      "category": "submit_flag",
      "value": 86,
      "playerId": 29
    },
    {
      "timestamp": 1757893982896,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893982903,
      "category": "submit_flag",
      "value": 66,
      "playerId": 29
    },
    {
      "timestamp": 1757893982903,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893982904,
      "category": "submit_flag",
      "value": 88,
      "playerId": 31
    },
    {
      "timestamp": 1757893982904,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893982924,
      "category": "submit_flag",
      "value": 68,
      "playerId": 31
    },
    {
      "timestamp": 1757893982924,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893982924,
      "category": "submit_flag",
      "value": 54,
      "playerId": 13
    },
    {
      "timestamp": 1757893982924,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893982936,
      "category": "submit_flag",
      "value": 68,
      "playerId": 13
    },
    {
      "timestamp": 1757893982936,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893982937,
      "category": "login_attempt",
      "value": 387,
      "playerId": 41
    },
    {
      "timestamp": 1757893982937,
      "category": "login_success",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893982945,
      "category": "static_file_loaded",
      "value": 1430,
      "playerId": 9
    },
    {
      "timestamp": 1757893982950,
      "category": "submit_flag",
      "value": 71,
      "playerId": 89
    },
    {
      "timestamp": 1757893982950,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893982958,
      "category": "websocket_connected",
      "value": 175,
      "playerId": 83
    },
    {
      "timestamp": 1757893982962,
      "category": "submit_flag",
      "value": 55,
      "playerId": 13
    },
    {
      "timestamp": 1757893982962,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893982978,
      "category": "submit_flag",
      "value": 128,
      "playerId": 29
    },
    {
      "timestamp": 1757893982978,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893982982,
      "category": "static_file_loaded",
      "value": 699,
      "playerId": 79
    },
    {
      "timestamp": 1757893982986,
      "category": "login_attempt",
      "value": 61,
      "playerId": 65
    },
    {
      "timestamp": 1757893982986,
      "category": "login_success",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893982995,
      "category": "login_attempt",
      "value": 73,
      "playerId": 75
    },
    {
      "timestamp": 1757893982995,
      "category": "login_success",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893983004,
      "category": "submit_flag",
      "value": 50,
      "playerId": 10
    },
    {
      "timestamp": 1757893983005,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893983008,
      "category": "submit_flag",
      "value": 47,
      "playerId": 10
    },
    {
      "timestamp": 1757893983008,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893983017,
      "category": "submit_flag",
      "value": 54,
      "playerId": 89
    },
    {
      "timestamp": 1757893983017,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893983038,
      "category": "submit_flag",
      "value": 69,
      "playerId": 89
    },
    {
      "timestamp": 1757893983038,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893983047,
      "category": "submit_flag",
      "value": 60,
      "playerId": 10
    },
    {
      "timestamp": 1757893983047,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893983105,
      "category": "login_attempt",
      "value": 60,
      "playerId": 9
    },
    {
      "timestamp": 1757893983105,
      "category": "login_success",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893983133,
      "category": "login_attempt",
      "value": 51,
      "playerId": 79
    },
    {
      "timestamp": 1757893983133,
      "category": "login_success",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893983144,
      "category": "submit_flag",
      "value": 54,
      "playerId": 24
    },
    {
      "timestamp": 1757893983144,
      "category": "flag_correct",
      "value": 1,
      "playerId": 24
    },
    {
      "timestamp": 1757893983151,
      "category": "submit_flag",
      "value": 61,
      "playerId": 40
    },
    {
      "timestamp": 1757893983151,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893983153,
      "category": "websocket_connected",
      "value": 165,
      "playerId": 41
    },
    {
      "timestamp": 1757893983163,
      "category": "submit_flag",
      "value": 58,
      "playerId": 40
    },
    {
      "timestamp": 1757893983163,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893983179,
      "category": "submit_flag",
      "value": 64,
      "playerId": 7
    },
    {
      "timestamp": 1757893983180,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893983183,
      "category": "submit_flag",
      "value": 53,
      "playerId": 35
    },
    {
      "timestamp": 1757893983183,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893983187,
      "category": "submit_flag",
      "value": 57,
      "playerId": 7
    },
    {
      "timestamp": 1757893983187,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893983192,
      "category": "submit_flag",
      "value": 62,
      "playerId": 7
    },
    {
      "timestamp": 1757893983192,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893983204,
      "category": "submit_flag",
      "value": 66,
      "playerId": 35
    },
    {
      "timestamp": 1757893983204,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893983214,
      "category": "static_file_loaded",
      "value": 15357,
      "playerId": 12
    },
    {
      "timestamp": 1757893983225,
      "category": "submit_flag",
      "value": 71,
      "playerId": 40
    },
    {
      "timestamp": 1757893983226,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893983231,
      "category": "websocket_connected",
      "value": 183,
      "playerId": 75
    },
    {
      "timestamp": 1757893983240,
      "category": "submit_flag",
      "value": 62,
      "playerId": 26
    },
    {
      "timestamp": 1757893983240,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893983253,
      "category": "submit_flag",
      "value": 68,
      "playerId": 26
    },
    {
      "timestamp": 1757893983253,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893983256,
      "category": "submit_flag",
      "value": 67,
      "playerId": 35
    },
    {
      "timestamp": 1757893983256,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893983259,
      "category": "websocket_connected",
      "value": 223,
      "playerId": 65
    },
    {
      "timestamp": 1757893983285,
      "category": "static_file_loaded",
      "value": 15441,
      "playerId": 99
    },
    {
      "timestamp": 1757893983325,
      "category": "websocket_connected",
      "value": 169,
      "playerId": 9
    },
    {
      "timestamp": 1757893983326,
      "category": "submit_flag",
      "value": 61,
      "playerId": 26
    },
    {
      "timestamp": 1757893983326,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893983345,
      "category": "submit_flag",
      "value": 51,
      "playerId": 83
    },
    {
      "timestamp": 1757893983345,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893983352,
      "category": "static_file_loaded",
      "value": 15540,
      "playerId": 1
    },
    {
      "timestamp": 1757893983358,
      "category": "websocket_connected",
      "value": 175,
      "playerId": 79
    },
    {
      "timestamp": 1757893983365,
      "category": "submit_flag",
      "value": 56,
      "playerId": 83
    },
    {
      "timestamp": 1757893983365,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893983381,
      "category": "submit_flag",
      "value": 61,
      "playerId": 81
    },
    {
      "timestamp": 1757893983381,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893983389,
      "category": "submit_flag",
      "value": 53,
      "playerId": 81
    },
    {
      "timestamp": 1757893983389,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893983427,
      "category": "submit_flag",
      "value": 56,
      "playerId": 17
    },
    {
      "timestamp": 1757893983427,
      "category": "flag_correct",
      "value": 1,
      "playerId": 17
    },
    {
      "timestamp": 1757893983434,
      "category": "submit_flag",
      "value": 66,
      "playerId": 83
    },
    {
      "timestamp": 1757893983434,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893983473,
      "category": "submit_flag",
      "value": 60,
      "playerId": 98
    },
    {
      "timestamp": 1757893983473,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893983477,
      "category": "submit_flag",
      "value": 71,
      "playerId": 98
    },
    {
      "timestamp": 1757893983477,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893983508,
      "category": "submit_flag",
      "value": 80,
      "playerId": 98
    },
    {
      "timestamp": 1757893983508,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893983510,
      "category": "static_file_loaded",
      "value": 296,
      "playerId": 12
    },
    {
      "timestamp": 1757893983594,
      "category": "submit_flag",
      "value": 57,
      "playerId": 29
    },
    {
      "timestamp": 1757893983594,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893983608,
      "category": "submit_flag",
      "value": 50,
      "playerId": 75
    },
    {
      "timestamp": 1757893983608,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893983611,
      "category": "static_file_loaded",
      "value": 16048,
      "playerId": 96
    },
    {
      "timestamp": 1757893983626,
      "category": "submit_flag",
      "value": 64,
      "playerId": 29
    },
    {
      "timestamp": 1757893983626,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893983646,
      "category": "submit_flag",
      "value": 51,
      "playerId": 75
    },
    {
      "timestamp": 1757893983646,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893983656,
      "category": "submit_flag",
      "value": 60,
      "playerId": 75
    },
    {
      "timestamp": 1757893983656,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893983659,
      "category": "submit_flag",
      "value": 53,
      "playerId": 65
    },
    {
      "timestamp": 1757893983659,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893983666,
      "category": "login_attempt",
      "value": 56,
      "playerId": 12
    },
    {
      "timestamp": 1757893983666,
      "category": "login_success",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893983672,
      "category": "submit_flag",
      "value": 90,
      "playerId": 29
    },
    {
      "timestamp": 1757893983672,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893983680,
      "category": "static_file_loaded",
      "value": 1136,
      "playerId": 51
    },
    {
      "timestamp": 1757893983685,
      "category": "submit_flag",
      "value": 65,
      "playerId": 8
    },
    {
      "timestamp": 1757893983685,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893983700,
      "category": "submit_flag",
      "value": 49,
      "playerId": 9
    },
    {
      "timestamp": 1757893983700,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893983707,
      "category": "submit_flag",
      "value": 69,
      "playerId": 8
    },
    {
      "timestamp": 1757893983707,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893983714,
      "category": "static_file_loaded",
      "value": 15950,
      "playerId": 71
    },
    {
      "timestamp": 1757893983727,
      "category": "submit_flag",
      "value": 87,
      "playerId": 65
    },
    {
      "timestamp": 1757893983727,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893983742,
      "category": "submit_flag",
      "value": 83,
      "playerId": 9
    },
    {
      "timestamp": 1757893983742,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893983745,
      "category": "static_file_loaded",
      "value": 459,
      "playerId": 99
    },
    {
      "timestamp": 1757893983745,
      "category": "static_file_loaded",
      "value": 393,
      "playerId": 1
    },
    {
      "timestamp": 1757893983745,
      "category": "submit_flag",
      "value": 69,
      "playerId": 41
    },
    {
      "timestamp": 1757893983745,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893983752,
      "category": "submit_flag",
      "value": 73,
      "playerId": 8
    },
    {
      "timestamp": 1757893983752,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893983755,
      "category": "submit_flag",
      "value": 50,
      "playerId": 41
    },
    {
      "timestamp": 1757893983756,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893983766,
      "category": "submit_flag",
      "value": 70,
      "playerId": 79
    },
    {
      "timestamp": 1757893983766,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893983773,
      "category": "submit_flag",
      "value": 115,
      "playerId": 65
    },
    {
      "timestamp": 1757893983773,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893983791,
      "category": "submit_flag",
      "value": 90,
      "playerId": 79
    },
    {
      "timestamp": 1757893983791,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893983800,
      "category": "submit_flag",
      "value": 64,
      "playerId": 79
    },
    {
      "timestamp": 1757893983800,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893983810,
      "category": "static_file_loaded",
      "value": 15979,
      "playerId": 42
    },
    {
      "timestamp": 1757893983812,
      "category": "submit_flag",
      "value": 63,
      "playerId": 35
    },
    {
      "timestamp": 1757893983812,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893983835,
      "category": "websocket_connected",
      "value": 1238,
      "playerId": 33
    },
    {
      "timestamp": 1757893983844,
      "category": "submit_flag",
      "value": 137,
      "playerId": 9
    },
    {
      "timestamp": 1757893983844,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893983849,
      "category": "submit_flag",
      "value": 55,
      "playerId": 10
    },
    {
      "timestamp": 1757893983849,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893983856,
      "category": "submit_flag",
      "value": 51,
      "playerId": 35
    },
    {
      "timestamp": 1757893983856,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893983872,
      "category": "submit_flag",
      "value": 52,
      "playerId": 10
    },
    {
      "timestamp": 1757893983872,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893983873,
      "category": "submit_flag",
      "value": 69,
      "playerId": 31
    },
    {
      "timestamp": 1757893983873,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893983884,
      "category": "submit_flag",
      "value": 47,
      "playerId": 83
    },
    {
      "timestamp": 1757893983884,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893983894,
      "category": "submit_flag",
      "value": 52,
      "playerId": 83
    },
    {
      "timestamp": 1757893983894,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893983900,
      "category": "login_attempt",
      "value": 54,
      "playerId": 99
    },
    {
      "timestamp": 1757893983900,
      "category": "login_success",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893983900,
      "category": "login_attempt",
      "value": 53,
      "playerId": 1
    },
    {
      "timestamp": 1757893983900,
      "category": "login_success",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893983911,
      "category": "websocket_connected",
      "value": 194,
      "playerId": 12
    },
    {
      "timestamp": 1757893983917,
      "category": "submit_flag",
      "value": 53,
      "playerId": 31
    },
    {
      "timestamp": 1757893983917,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893983927,
      "category": "submit_flag",
      "value": 65,
      "playerId": 83
    },
    {
      "timestamp": 1757893983927,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893983929,
      "category": "submit_flag",
      "value": 66,
      "playerId": 13
    },
    {
      "timestamp": 1757893983930,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893983944,
      "category": "submit_flag",
      "value": 81,
      "playerId": 81
    },
    {
      "timestamp": 1757893983944,
      "category": "flag_correct",
      "value": 1,
      "playerId": 81
    },
    {
      "timestamp": 1757893983956,
      "category": "submit_flag",
      "value": 93,
      "playerId": 13
    },
    {
      "timestamp": 1757893983956,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893983968,
      "category": "submit_flag",
      "value": 187,
      "playerId": 35
    },
    {
      "timestamp": 1757893983968,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893983985,
      "category": "submit_flag",
      "value": 53,
      "playerId": 13
    },
    {
      "timestamp": 1757893983985,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893983997,
      "category": "submit_flag",
      "value": 63,
      "playerId": 89
    },
    {
      "timestamp": 1757893983997,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893984031,
      "category": "submit_flag",
      "value": 67,
      "playerId": 26
    },
    {
      "timestamp": 1757893984031,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893984033,
      "category": "login_attempt",
      "value": 252,
      "playerId": 51
    },
    {
      "timestamp": 1757893984033,
      "category": "login_success",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893984035,
      "category": "submit_flag",
      "value": 77,
      "playerId": 40
    },
    {
      "timestamp": 1757893984035,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893984036,
      "category": "submit_flag",
      "value": 324,
      "playerId": 41
    },
    {
      "timestamp": 1757893984036,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893984043,
      "category": "static_file_loaded",
      "value": 432,
      "playerId": 96
    },
    {
      "timestamp": 1757893984052,
      "category": "submit_flag",
      "value": 51,
      "playerId": 40
    },
    {
      "timestamp": 1757893984052,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893984059,
      "category": "submit_flag",
      "value": 72,
      "playerId": 26
    },
    {
      "timestamp": 1757893984060,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893984067,
      "category": "submit_flag",
      "value": 57,
      "playerId": 89
    },
    {
      "timestamp": 1757893984067,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893984080,
      "category": "submit_flag",
      "value": 88,
      "playerId": 40
    },
    {
      "timestamp": 1757893984080,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893984083,
      "category": "static_file_loaded",
      "value": 16049,
      "playerId": 64
    },
    {
      "timestamp": 1757893984093,
      "category": "submit_flag",
      "value": 60,
      "playerId": 7
    },
    {
      "timestamp": 1757893984093,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893984100,
      "category": "submit_flag",
      "value": 51,
      "playerId": 26
    },
    {
      "timestamp": 1757893984100,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893984110,
      "category": "submit_flag",
      "value": 115,
      "playerId": 7
    },
    {
      "timestamp": 1757893984111,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893984123,
      "category": "submit_flag",
      "value": 62,
      "playerId": 7
    },
    {
      "timestamp": 1757893984124,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893984130,
      "category": "websocket_connected",
      "value": 178,
      "playerId": 1
    },
    {
      "timestamp": 1757893984169,
      "category": "submit_flag",
      "value": 49,
      "playerId": 69
    },
    {
      "timestamp": 1757893984169,
      "category": "flag_correct",
      "value": 1,
      "playerId": 69
    },
    {
      "timestamp": 1757893984170,
      "category": "websocket_connected",
      "value": 220,
      "playerId": 99
    },
    {
      "timestamp": 1757893984189,
      "category": "login_attempt",
      "value": 47,
      "playerId": 96
    },
    {
      "timestamp": 1757893984189,
      "category": "login_success",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893984222,
      "category": "static_file_loaded",
      "value": 16419,
      "playerId": 32
    },
    {
      "timestamp": 1757893984236,
      "category": "submit_flag",
      "value": 49,
      "playerId": 79
    },
    {
      "timestamp": 1757893984236,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893984248,
      "category": "websocket_connected",
      "value": 163,
      "playerId": 51
    },
    {
      "timestamp": 1757893984260,
      "category": "submit_flag",
      "value": 51,
      "playerId": 98
    },
    {
      "timestamp": 1757893984260,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893984271,
      "category": "submit_flag",
      "value": 50,
      "playerId": 98
    },
    {
      "timestamp": 1757893984272,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893984279,
      "category": "submit_flag",
      "value": 67,
      "playerId": 65
    },
    {
      "timestamp": 1757893984279,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893984291,
      "category": "submit_flag",
      "value": 61,
      "playerId": 29
    },
    {
      "timestamp": 1757893984292,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893984293,
      "category": "submit_flag",
      "value": 75,
      "playerId": 98
    },
    {
      "timestamp": 1757893984293,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893984301,
      "category": "submit_flag",
      "value": 69,
      "playerId": 22
    },
    {
      "timestamp": 1757893984301,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893984302,
      "category": "submit_flag",
      "value": 57,
      "playerId": 9
    },
    {
      "timestamp": 1757893984302,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893984311,
      "category": "submit_flag",
      "value": 68,
      "playerId": 9
    },
    {
      "timestamp": 1757893984311,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893984317,
      "category": "submit_flag",
      "value": 62,
      "playerId": 79
    },
    {
      "timestamp": 1757893984317,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893984326,
      "category": "submit_flag",
      "value": 56,
      "playerId": 29
    },
    {
      "timestamp": 1757893984326,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893984340,
      "category": "submit_flag",
      "value": 89,
      "playerId": 65
    },
    {
      "timestamp": 1757893984340,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893984345,
      "category": "submit_flag",
      "value": 66,
      "playerId": 22
    },
    {
      "timestamp": 1757893984345,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893984350,
      "category": "submit_flag",
      "value": 65,
      "playerId": 75
    },
    {
      "timestamp": 1757893984350,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893984356,
      "category": "submit_flag",
      "value": 67,
      "playerId": 16
    },
    {
      "timestamp": 1757893984356,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893984363,
      "category": "submit_flag",
      "value": 59,
      "playerId": 16
    },
    {
      "timestamp": 1757893984363,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893984366,
      "category": "submit_flag",
      "value": 132,
      "playerId": 65
    },
    {
      "timestamp": 1757893984366,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893984373,
      "category": "submit_flag",
      "value": 83,
      "playerId": 75
    },
    {
      "timestamp": 1757893984373,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893984381,
      "category": "submit_flag",
      "value": 62,
      "playerId": 75
    },
    {
      "timestamp": 1757893984381,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893984384,
      "category": "submit_flag",
      "value": 85,
      "playerId": 29
    },
    {
      "timestamp": 1757893984384,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893984400,
      "category": "websocket_connected",
      "value": 161,
      "playerId": 96
    },
    {
      "timestamp": 1757893984409,
      "category": "submit_flag",
      "value": 47,
      "playerId": 16
    },
    {
      "timestamp": 1757893984409,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893984413,
      "category": "submit_flag",
      "value": 61,
      "playerId": 10
    },
    {
      "timestamp": 1757893984413,
      "category": "flag_correct",
      "value": 1,
      "playerId": 10
    },
    {
      "timestamp": 1757893984417,
      "category": "submit_flag",
      "value": 46,
      "playerId": 33
    },
    {
      "timestamp": 1757893984417,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893984422,
      "category": "submit_flag",
      "value": 64,
      "playerId": 41
    },
    {
      "timestamp": 1757893984422,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893984429,
      "category": "submit_flag",
      "value": 53,
      "playerId": 12
    },
    {
      "timestamp": 1757893984429,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893984431,
      "category": "submit_flag",
      "value": 78,
      "playerId": 41
    },
    {
      "timestamp": 1757893984431,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893984447,
      "category": "static_file_loaded",
      "value": 637,
      "playerId": 42
    },
    {
      "timestamp": 1757893984461,
      "category": "submit_flag",
      "value": 76,
      "playerId": 33
    },
    {
      "timestamp": 1757893984461,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893984468,
      "category": "submit_flag",
      "value": 241,
      "playerId": 79
    },
    {
      "timestamp": 1757893984468,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893984471,
      "category": "submit_flag",
      "value": 62,
      "playerId": 8
    },
    {
      "timestamp": 1757893984471,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893984475,
      "category": "submit_flag",
      "value": 70,
      "playerId": 12
    },
    {
      "timestamp": 1757893984475,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893984484,
      "category": "submit_flag",
      "value": 58,
      "playerId": 8
    },
    {
      "timestamp": 1757893984484,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893984491,
      "category": "submit_flag",
      "value": 59,
      "playerId": 41
    },
    {
      "timestamp": 1757893984491,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893984497,
      "category": "submit_flag",
      "value": 58,
      "playerId": 33
    },
    {
      "timestamp": 1757893984497,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893984502,
      "category": "submit_flag",
      "value": 57,
      "playerId": 12
    },
    {
      "timestamp": 1757893984502,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893984505,
      "category": "submit_flag",
      "value": 57,
      "playerId": 13
    },
    {
      "timestamp": 1757893984505,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893984517,
      "category": "submit_flag",
      "value": 292,
      "playerId": 9
    },
    {
      "timestamp": 1757893984517,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893984520,
      "category": "submit_flag",
      "value": 53,
      "playerId": 8
    },
    {
      "timestamp": 1757893984520,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893984529,
      "category": "static_file_loaded",
      "value": 446,
      "playerId": 64
    },
    {
      "timestamp": 1757893984530,
      "category": "submit_flag",
      "value": 59,
      "playerId": 83
    },
    {
      "timestamp": 1757893984530,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893984531,
      "category": "submit_flag",
      "value": 63,
      "playerId": 89
    },
    {
      "timestamp": 1757893984531,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893984532,
      "category": "submit_flag",
      "value": 47,
      "playerId": 99
    },
    {
      "timestamp": 1757893984532,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893984535,
      "category": "submit_flag",
      "value": 47,
      "playerId": 99
    },
    {
      "timestamp": 1757893984536,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893984550,
      "category": "submit_flag",
      "value": 54,
      "playerId": 83
    },
    {
      "timestamp": 1757893984551,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893984564,
      "category": "submit_flag",
      "value": 55,
      "playerId": 89
    },
    {
      "timestamp": 1757893984564,
      "category": "flag_correct",
      "value": 1,
      "playerId": 89
    },
    {
      "timestamp": 1757893984566,
      "category": "submit_flag",
      "value": 62,
      "playerId": 13
    },
    {
      "timestamp": 1757893984566,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893984568,
      "category": "submit_flag",
      "value": 70,
      "playerId": 1
    },
    {
      "timestamp": 1757893984568,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893984569,
      "category": "submit_flag",
      "value": 54,
      "playerId": 83
    },
    {
      "timestamp": 1757893984569,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893984570,
      "category": "static_file_loaded",
      "value": 13903,
      "playerId": 62
    },
    {
      "timestamp": 1757893984580,
      "category": "submit_flag",
      "value": 59,
      "playerId": 1
    },
    {
      "timestamp": 1757893984580,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893984581,
      "category": "submit_flag",
      "value": 58,
      "playerId": 13
    },
    {
      "timestamp": 1757893984581,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893984600,
      "category": "login_attempt",
      "value": 54,
      "playerId": 42
    },
    {
      "timestamp": 1757893984600,
      "category": "login_success",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893984624,
      "category": "submit_flag",
      "value": 60,
      "playerId": 51
    },
    {
      "timestamp": 1757893984624,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893984635,
      "category": "submit_flag",
      "value": 59,
      "playerId": 1
    },
    {
      "timestamp": 1757893984635,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893984640,
      "category": "submit_flag",
      "value": 52,
      "playerId": 51
    },
    {
      "timestamp": 1757893984640,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893984642,
      "category": "static_file_loaded",
      "value": 16495,
      "playerId": 60
    },
    {
      "timestamp": 1757893984656,
      "category": "static_file_loaded",
      "value": 16995,
      "playerId": 93
    },
    {
      "timestamp": 1757893984665,
      "category": "static_file_loaded",
      "value": 17017,
      "playerId": 43
    },
    {
      "timestamp": 1757893984682,
      "category": "login_attempt",
      "value": 52,
      "playerId": 64
    },
    {
      "timestamp": 1757893984682,
      "category": "login_success",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893984686,
      "category": "submit_flag",
      "value": 62,
      "playerId": 51
    },
    {
      "timestamp": 1757893984686,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893984725,
      "category": "static_file_loaded",
      "value": 16711,
      "playerId": 2
    },
    {
      "timestamp": 1757893984748,
      "category": "static_file_loaded",
      "value": 16907,
      "playerId": 85
    },
    {
      "timestamp": 1757893984791,
      "category": "static_file_loaded",
      "value": 569,
      "playerId": 32
    },
    {
      "timestamp": 1757893984810,
      "category": "static_file_loaded",
      "value": 16888,
      "playerId": 97
    },
    {
      "timestamp": 1757893984837,
      "category": "websocket_connected",
      "value": 186,
      "playerId": 42
    },
    {
      "timestamp": 1757893984852,
      "category": "submit_flag",
      "value": 70,
      "playerId": 96
    },
    {
      "timestamp": 1757893984852,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893984855,
      "category": "submit_flag",
      "value": 52,
      "playerId": 96
    },
    {
      "timestamp": 1757893984855,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893984856,
      "category": "submit_flag",
      "value": 327,
      "playerId": 99
    },
    {
      "timestamp": 1757893984856,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893984856,
      "category": "static_file_loaded",
      "value": 1142,
      "playerId": 71
    },
    {
      "timestamp": 1757893984857,
      "category": "static_file_loaded",
      "value": 17185,
      "playerId": 21
    },
    {
      "timestamp": 1757893984866,
      "category": "submit_flag",
      "value": 61,
      "playerId": 96
    },
    {
      "timestamp": 1757893984866,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893984873,
      "category": "submit_flag",
      "value": 56,
      "playerId": 31
    },
    {
      "timestamp": 1757893984874,
      "category": "flag_correct",
      "value": 1,
      "playerId": 31
    },
    {
      "timestamp": 1757893984879,
      "category": "submit_flag",
      "value": 46,
      "playerId": 7
    },
    {
      "timestamp": 1757893984879,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893984894,
      "category": "websocket_connected",
      "value": 161,
      "playerId": 64
    },
    {
      "timestamp": 1757893984903,
      "category": "submit_flag",
      "value": 60,
      "playerId": 8
    },
    {
      "timestamp": 1757893984903,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893984929,
      "category": "submit_flag",
      "value": 57,
      "playerId": 7
    },
    {
      "timestamp": 1757893984929,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893984944,
      "category": "submit_flag",
      "value": 47,
      "playerId": 9
    },
    {
      "timestamp": 1757893984944,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893984949,
      "category": "submit_flag",
      "value": 61,
      "playerId": 8
    },
    {
      "timestamp": 1757893984949,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893984953,
      "category": "login_attempt",
      "value": 61,
      "playerId": 32
    },
    {
      "timestamp": 1757893984953,
      "category": "login_success",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893984965,
      "category": "submit_flag",
      "value": 75,
      "playerId": 8
    },
    {
      "timestamp": 1757893984965,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893984972,
      "category": "submit_flag",
      "value": 63,
      "playerId": 16
    },
    {
      "timestamp": 1757893984972,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893984975,
      "category": "submit_flag",
      "value": 61,
      "playerId": 29
    },
    {
      "timestamp": 1757893984975,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893984984,
      "category": "submit_flag",
      "value": 93,
      "playerId": 29
    },
    {
      "timestamp": 1757893984984,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893984995,
      "category": "submit_flag",
      "value": 54,
      "playerId": 12
    },
    {
      "timestamp": 1757893984996,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893985002,
      "category": "submit_flag",
      "value": 67,
      "playerId": 16
    },
    {
      "timestamp": 1757893985002,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893985007,
      "category": "submit_flag",
      "value": 50,
      "playerId": 16
    },
    {
      "timestamp": 1757893985008,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893985012,
      "category": "submit_flag",
      "value": 63,
      "playerId": 9
    },
    {
      "timestamp": 1757893985012,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893985013,
      "category": "submit_flag",
      "value": 64,
      "playerId": 12
    },
    {
      "timestamp": 1757893985013,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893985017,
      "category": "submit_flag",
      "value": 62,
      "playerId": 29
    },
    {
      "timestamp": 1757893985017,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893985019,
      "category": "login_attempt",
      "value": 61,
      "playerId": 71
    },
    {
      "timestamp": 1757893985019,
      "category": "login_success",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893985031,
      "category": "static_file_loaded",
      "value": 461,
      "playerId": 62
    },
    {
      "timestamp": 1757893985035,
      "category": "submit_flag",
      "value": 99,
      "playerId": 26
    },
    {
      "timestamp": 1757893985035,
      "category": "flag_correct",
      "value": 1,
      "playerId": 26
    },
    {
      "timestamp": 1757893985048,
      "category": "submit_flag",
      "value": 62,
      "playerId": 9
    },
    {
      "timestamp": 1757893985048,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893985051,
      "category": "submit_flag",
      "value": 115,
      "playerId": 40
    },
    {
      "timestamp": 1757893985051,
      "category": "flag_correct",
      "value": 1,
      "playerId": 40
    },
    {
      "timestamp": 1757893985057,
      "category": "submit_flag",
      "value": 54,
      "playerId": 75
    },
    {
      "timestamp": 1757893985057,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893985069,
      "category": "submit_flag",
      "value": 60,
      "playerId": 98
    },
    {
      "timestamp": 1757893985069,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893985078,
      "category": "submit_flag",
      "value": 69,
      "playerId": 75
    },
    {
      "timestamp": 1757893985078,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893985083,
      "category": "submit_flag",
      "value": 63,
      "playerId": 75
    },
    {
      "timestamp": 1757893985083,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893985085,
      "category": "submit_flag",
      "value": 54,
      "playerId": 98
    },
    {
      "timestamp": 1757893985085,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893985087,
      "category": "submit_flag",
      "value": 72,
      "playerId": 12
    },
    {
      "timestamp": 1757893985087,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893985097,
      "category": "static_file_loaded",
      "value": 17236,
      "playerId": 19
    },
    {
      "timestamp": 1757893985098,
      "category": "submit_flag",
      "value": 61,
      "playerId": 35
    },
    {
      "timestamp": 1757893985098,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893985104,
      "category": "submit_flag",
      "value": 57,
      "playerId": 1
    },
    {
      "timestamp": 1757893985104,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893985107,
      "category": "submit_flag",
      "value": 88,
      "playerId": 41
    },
    {
      "timestamp": 1757893985107,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893985112,
      "category": "submit_flag",
      "value": 63,
      "playerId": 1
    },
    {
      "timestamp": 1757893985112,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893985113,
      "category": "submit_flag",
      "value": 53,
      "playerId": 41
    },
    {
      "timestamp": 1757893985113,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893985120,
      "category": "submit_flag",
      "value": 66,
      "playerId": 1
    },
    {
      "timestamp": 1757893985120,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893985132,
      "category": "submit_flag",
      "value": 48,
      "playerId": 83
    },
    {
      "timestamp": 1757893985133,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893985140,
      "category": "static_file_loaded",
      "value": 16073,
      "playerId": 11
    },
    {
      "timestamp": 1757893985143,
      "category": "submit_flag",
      "value": 57,
      "playerId": 35
    },
    {
      "timestamp": 1757893985143,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893985151,
      "category": "submit_flag",
      "value": 68,
      "playerId": 83
    },
    {
      "timestamp": 1757893985151,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893985155,
      "category": "submit_flag",
      "value": 54,
      "playerId": 35
    },
    {
      "timestamp": 1757893985155,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893985156,
      "category": "static_file_loaded",
      "value": 16692,
      "playerId": 23
    },
    {
      "timestamp": 1757893985159,
      "category": "submit_flag",
      "value": 50,
      "playerId": 83
    },
    {
      "timestamp": 1757893985159,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893985168,
      "category": "static_file_loaded",
      "value": 17600,
      "playerId": 88
    },
    {
      "timestamp": 1757893985168,
      "category": "submit_flag",
      "value": 68,
      "playerId": 41
    },
    {
      "timestamp": 1757893985168,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893985176,
      "category": "websocket_connected",
      "value": 173,
      "playerId": 32
    },
    {
      "timestamp": 1757893985178,
      "category": "static_file_loaded",
      "value": 536,
      "playerId": 60
    },
    {
      "timestamp": 1757893985183,
      "category": "login_attempt",
      "value": 50,
      "playerId": 62
    },
    {
      "timestamp": 1757893985183,
      "category": "login_success",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893985204,
      "category": "submit_flag",
      "value": 52,
      "playerId": 22
    },
    {
      "timestamp": 1757893985204,
      "category": "flag_correct",
      "value": 1,
      "playerId": 22
    },
    {
      "timestamp": 1757893985213,
      "category": "static_file_loaded",
      "value": 16547,
      "playerId": 76
    },
    {
      "timestamp": 1757893985222,
      "category": "submit_flag",
      "value": 64,
      "playerId": 42
    },
    {
      "timestamp": 1757893985222,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893985239,
      "category": "websocket_connected",
      "value": 168,
      "playerId": 71
    },
    {
      "timestamp": 1757893985242,
      "category": "submit_flag",
      "value": 57,
      "playerId": 99
    },
    {
      "timestamp": 1757893985242,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893985251,
      "category": "submit_flag",
      "value": 67,
      "playerId": 42
    },
    {
      "timestamp": 1757893985251,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893985255,
      "category": "submit_flag",
      "value": 56,
      "playerId": 65
    },
    {
      "timestamp": 1757893985255,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893985257,
      "category": "submit_flag",
      "value": 56,
      "playerId": 42
    },
    {
      "timestamp": 1757893985257,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893985275,
      "category": "submit_flag",
      "value": 47,
      "playerId": 64
    },
    {
      "timestamp": 1757893985275,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893985281,
      "category": "submit_flag",
      "value": 60,
      "playerId": 51
    },
    {
      "timestamp": 1757893985281,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893985285,
      "category": "submit_flag",
      "value": 62,
      "playerId": 79
    },
    {
      "timestamp": 1757893985285,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893985314,
      "category": "submit_flag",
      "value": 62,
      "playerId": 51
    },
    {
      "timestamp": 1757893985314,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893985317,
      "category": "submit_flag",
      "value": 65,
      "playerId": 99
    },
    {
      "timestamp": 1757893985317,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893985322,
      "category": "submit_flag",
      "value": 52,
      "playerId": 79
    },
    {
      "timestamp": 1757893985322,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893985324,
      "category": "submit_flag",
      "value": 62,
      "playerId": 99
    },
    {
      "timestamp": 1757893985324,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893985326,
      "category": "submit_flag",
      "value": 67,
      "playerId": 64
    },
    {
      "timestamp": 1757893985326,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893985332,
      "category": "submit_flag",
      "value": 73,
      "playerId": 79
    },
    {
      "timestamp": 1757893985332,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893985337,
      "category": "submit_flag",
      "value": 61,
      "playerId": 51
    },
    {
      "timestamp": 1757893985337,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893985340,
      "category": "submit_flag",
      "value": 80,
      "playerId": 65
    },
    {
      "timestamp": 1757893985340,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893985340,
      "category": "login_attempt",
      "value": 61,
      "playerId": 60
    },
    {
      "timestamp": 1757893985340,
      "category": "login_success",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893985344,
      "category": "submit_flag",
      "value": 65,
      "playerId": 65
    },
    {
      "timestamp": 1757893985344,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893985347,
      "category": "submit_flag",
      "value": 59,
      "playerId": 64
    },
    {
      "timestamp": 1757893985347,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893985362,
      "category": "submit_flag",
      "value": 52,
      "playerId": 96
    },
    {
      "timestamp": 1757893985362,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893985369,
      "category": "submit_flag",
      "value": 56,
      "playerId": 96
    },
    {
      "timestamp": 1757893985369,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893985373,
      "category": "submit_flag",
      "value": 52,
      "playerId": 96
    },
    {
      "timestamp": 1757893985373,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893985385,
      "category": "submit_flag",
      "value": 51,
      "playerId": 13
    },
    {
      "timestamp": 1757893985385,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893985386,
      "category": "static_file_loaded",
      "value": 230,
      "playerId": 23
    },
    {
      "timestamp": 1757893985387,
      "category": "submit_flag",
      "value": 54,
      "playerId": 13
    },
    {
      "timestamp": 1757893985387,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893985394,
      "category": "static_file_loaded",
      "value": 645,
      "playerId": 85
    },
    {
      "timestamp": 1757893985404,
      "category": "websocket_connected",
      "value": 171,
      "playerId": 62
    },
    {
      "timestamp": 1757893985408,
      "category": "static_file_loaded",
      "value": 683,
      "playerId": 2
    },
    {
      "timestamp": 1757893985439,
      "category": "submit_flag",
      "value": 48,
      "playerId": 29
    },
    {
      "timestamp": 1757893985439,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893985442,
      "category": "static_file_loaded",
      "value": 585,
      "playerId": 21
    },
    {
      "timestamp": 1757893985452,
      "category": "submit_flag",
      "value": 51,
      "playerId": 29
    },
    {
      "timestamp": 1757893985452,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893985462,
      "category": "static_file_loaded",
      "value": 797,
      "playerId": 43
    },
    {
      "timestamp": 1757893985477,
      "category": "submit_flag",
      "value": 49,
      "playerId": 9
    },
    {
      "timestamp": 1757893985477,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893985492,
      "category": "static_file_loaded",
      "value": 17926,
      "playerId": 54
    },
    {
      "timestamp": 1757893985500,
      "category": "submit_flag",
      "value": 56,
      "playerId": 9
    },
    {
      "timestamp": 1757893985500,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893985508,
      "category": "submit_flag",
      "value": 59,
      "playerId": 29
    },
    {
      "timestamp": 1757893985508,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893985512,
      "category": "submit_flag",
      "value": 59,
      "playerId": 16
    },
    {
      "timestamp": 1757893985512,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893985515,
      "category": "submit_flag",
      "value": 62,
      "playerId": 16
    },
    {
      "timestamp": 1757893985515,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893985518,
      "category": "submit_flag",
      "value": 52,
      "playerId": 7
    },
    {
      "timestamp": 1757893985518,
      "category": "flag_correct",
      "value": 1,
      "playerId": 7
    },
    {
      "timestamp": 1757893985538,
      "category": "submit_flag",
      "value": 52,
      "playerId": 9
    },
    {
      "timestamp": 1757893985538,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893985541,
      "category": "login_attempt",
      "value": 55,
      "playerId": 23
    },
    {
      "timestamp": 1757893985541,
      "category": "login_success",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893985549,
      "category": "login_attempt",
      "value": 51,
      "playerId": 85
    },
    {
      "timestamp": 1757893985549,
      "category": "login_success",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893985549,
      "category": "websocket_connected",
      "value": 157,
      "playerId": 60
    },
    {
      "timestamp": 1757893985559,
      "category": "submit_flag",
      "value": 57,
      "playerId": 35
    },
    {
      "timestamp": 1757893985559,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893985566,
      "category": "submit_flag",
      "value": 60,
      "playerId": 32
    },
    {
      "timestamp": 1757893985566,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893985567,
      "category": "login_attempt",
      "value": 58,
      "playerId": 2
    },
    {
      "timestamp": 1757893985567,
      "category": "login_success",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893985576,
      "category": "submit_flag",
      "value": 49,
      "playerId": 98
    },
    {
      "timestamp": 1757893985576,
      "category": "flag_correct",
      "value": 1,
      "playerId": 98
    },
    {
      "timestamp": 1757893985581,
      "category": "static_file_loaded",
      "value": 17884,
      "playerId": 28
    },
    {
      "timestamp": 1757893985597,
      "category": "static_file_loaded",
      "value": 18043,
      "playerId": 92
    },
    {
      "timestamp": 1757893985604,
      "category": "submit_flag",
      "value": 60,
      "playerId": 32
    },
    {
      "timestamp": 1757893985604,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893985610,
      "category": "submit_flag",
      "value": 66,
      "playerId": 71
    },
    {
      "timestamp": 1757893985610,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893985614,
      "category": "login_attempt",
      "value": 71,
      "playerId": 21
    },
    {
      "timestamp": 1757893985614,
      "category": "login_success",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893985615,
      "category": "static_file_loaded",
      "value": 518,
      "playerId": 19
    },
    {
      "timestamp": 1757893985622,
      "category": "login_attempt",
      "value": 59,
      "playerId": 43
    },
    {
      "timestamp": 1757893985622,
      "category": "login_success",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893985628,
      "category": "static_file_loaded",
      "value": 17943,
      "playerId": 45
    },
    {
      "timestamp": 1757893985649,
      "category": "submit_flag",
      "value": 53,
      "playerId": 71
    },
    {
      "timestamp": 1757893985649,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893985655,
      "category": "submit_flag",
      "value": 59,
      "playerId": 35
    },
    {
      "timestamp": 1757893985655,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893985672,
      "category": "submit_flag",
      "value": 60,
      "playerId": 41
    },
    {
      "timestamp": 1757893985672,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893985676,
      "category": "submit_flag",
      "value": 65,
      "playerId": 12
    },
    {
      "timestamp": 1757893985676,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893985678,
      "category": "submit_flag",
      "value": 66,
      "playerId": 12
    },
    {
      "timestamp": 1757893985678,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893985683,
      "category": "submit_flag",
      "value": 71,
      "playerId": 12
    },
    {
      "timestamp": 1757893985683,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893985686,
      "category": "submit_flag",
      "value": 62,
      "playerId": 71
    },
    {
      "timestamp": 1757893985686,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893985715,
      "category": "submit_flag",
      "value": 57,
      "playerId": 41
    },
    {
      "timestamp": 1757893985715,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893985761,
      "category": "websocket_connected",
      "value": 170,
      "playerId": 23
    },
    {
      "timestamp": 1757893985768,
      "category": "websocket_connected",
      "value": 167,
      "playerId": 85
    },
    {
      "timestamp": 1757893985768,
      "category": "login_attempt",
      "value": 53,
      "playerId": 19
    },
    {
      "timestamp": 1757893985768,
      "category": "login_success",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893985771,
      "category": "static_file_loaded",
      "value": 18216,
      "playerId": 100
    },
    {
      "timestamp": 1757893985783,
      "category": "submit_flag",
      "value": 54,
      "playerId": 75
    },
    {
      "timestamp": 1757893985783,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893985793,
      "category": "static_file_loaded",
      "value": 983,
      "playerId": 97
    },
    {
      "timestamp": 1757893985798,
      "category": "websocket_connected",
      "value": 179,
      "playerId": 2
    },
    {
      "timestamp": 1757893985800,
      "category": "static_file_loaded",
      "value": 18236,
      "playerId": 77
    },
    {
      "timestamp": 1757893985812,
      "category": "static_file_loaded",
      "value": 214,
      "playerId": 92
    },
    {
      "timestamp": 1757893985815,
      "category": "submit_flag",
      "value": 68,
      "playerId": 64
    },
    {
      "timestamp": 1757893985815,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893985816,
      "category": "submit_flag",
      "value": 62,
      "playerId": 99
    },
    {
      "timestamp": 1757893985816,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893985833,
      "category": "submit_flag",
      "value": 69,
      "playerId": 62
    },
    {
      "timestamp": 1757893985833,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893985840,
      "category": "submit_flag",
      "value": 73,
      "playerId": 75
    },
    {
      "timestamp": 1757893985840,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893985841,
      "category": "submit_flag",
      "value": 60,
      "playerId": 64
    },
    {
      "timestamp": 1757893985842,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893985843,
      "category": "websocket_connected",
      "value": 176,
      "playerId": 21
    },
    {
      "timestamp": 1757893985847,
      "category": "static_file_loaded",
      "value": 1190,
      "playerId": 93
    },
    {
      "timestamp": 1757893985849,
      "category": "submit_flag",
      "value": 320,
      "playerId": 32
    },
    {
      "timestamp": 1757893985849,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893985850,
      "category": "static_file_loaded",
      "value": 709,
      "playerId": 11
    },
    {
      "timestamp": 1757893985851,
      "category": "submit_flag",
      "value": 64,
      "playerId": 64
    },
    {
      "timestamp": 1757893985851,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893985855,
      "category": "submit_flag",
      "value": 60,
      "playerId": 75
    },
    {
      "timestamp": 1757893985855,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893985856,
      "category": "websocket_connected",
      "value": 182,
      "playerId": 43
    },
    {
      "timestamp": 1757893985859,
      "category": "submit_flag",
      "value": 62,
      "playerId": 62
    },
    {
      "timestamp": 1757893985859,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893985868,
      "category": "submit_flag",
      "value": 66,
      "playerId": 99
    },
    {
      "timestamp": 1757893985869,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893985876,
      "category": "submit_flag",
      "value": 73,
      "playerId": 62
    },
    {
      "timestamp": 1757893985876,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893985882,
      "category": "submit_flag",
      "value": 71,
      "playerId": 65
    },
    {
      "timestamp": 1757893985882,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893985890,
      "category": "static_file_loaded",
      "value": 398,
      "playerId": 54
    },
    {
      "timestamp": 1757893985904,
      "category": "submit_flag",
      "value": 52,
      "playerId": 99
    },
    {
      "timestamp": 1757893985904,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893985923,
      "category": "static_file_loaded",
      "value": 18229,
      "playerId": 39
    },
    {
      "timestamp": 1757893985933,
      "category": "submit_flag",
      "value": 61,
      "playerId": 96
    },
    {
      "timestamp": 1757893985933,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893985940,
      "category": "submit_flag",
      "value": 53,
      "playerId": 1
    },
    {
      "timestamp": 1757893985940,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893985951,
      "category": "submit_flag",
      "value": 70,
      "playerId": 83
    },
    {
      "timestamp": 1757893985951,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893985953,
      "category": "submit_flag",
      "value": 318,
      "playerId": 41
    },
    {
      "timestamp": 1757893985953,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893985953,
      "category": "submit_flag",
      "value": 61,
      "playerId": 65
    },
    {
      "timestamp": 1757893985953,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893985956,
      "category": "login_attempt",
      "value": 61,
      "playerId": 97
    },
    {
      "timestamp": 1757893985957,
      "category": "login_success",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893985960,
      "category": "submit_flag",
      "value": 53,
      "playerId": 33
    },
    {
      "timestamp": 1757893985961,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893985964,
      "category": "submit_flag",
      "value": 68,
      "playerId": 79
    },
    {
      "timestamp": 1757893985964,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893985967,
      "category": "submit_flag",
      "value": 70,
      "playerId": 79
    },
    {
      "timestamp": 1757893985967,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893985971,
      "category": "submit_flag",
      "value": 72,
      "playerId": 65
    },
    {
      "timestamp": 1757893985971,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893985984,
      "category": "login_attempt",
      "value": 72,
      "playerId": 92
    },
    {
      "timestamp": 1757893985984,
      "category": "login_success",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893985987,
      "category": "submit_flag",
      "value": 68,
      "playerId": 33
    },
    {
      "timestamp": 1757893985987,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893985991,
      "category": "submit_flag",
      "value": 64,
      "playerId": 60
    },
    {
      "timestamp": 1757893985991,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893985992,
      "category": "submit_flag",
      "value": 62,
      "playerId": 79
    },
    {
      "timestamp": 1757893985992,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893985994,
      "category": "submit_flag",
      "value": 76,
      "playerId": 60
    },
    {
      "timestamp": 1757893985994,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893985999,
      "category": "static_file_loaded",
      "value": 786,
      "playerId": 76
    },
    {
      "timestamp": 1757893985999,
      "category": "submit_flag",
      "value": 80,
      "playerId": 29
    },
    {
      "timestamp": 1757893985999,
      "category": "flag_correct",
      "value": 1,
      "playerId": 29
    },
    {
      "timestamp": 1757893986000,
      "category": "submit_flag",
      "value": 82,
      "playerId": 33
    },
    {
      "timestamp": 1757893986000,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893986004,
      "category": "submit_flag",
      "value": 65,
      "playerId": 60
    },
    {
      "timestamp": 1757893986004,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893986006,
      "category": "submit_flag",
      "value": 63,
      "playerId": 1
    },
    {
      "timestamp": 1757893986006,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893986008,
      "category": "submit_flag",
      "value": 59,
      "playerId": 96
    },
    {
      "timestamp": 1757893986008,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893986009,
      "category": "login_attempt",
      "value": 60,
      "playerId": 93
    },
    {
      "timestamp": 1757893986009,
      "category": "login_success",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893986017,
      "category": "submit_flag",
      "value": 101,
      "playerId": 83
    },
    {
      "timestamp": 1757893986017,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893986022,
      "category": "websocket_connected",
      "value": 201,
      "playerId": 19
    },
    {
      "timestamp": 1757893986023,
      "category": "submit_flag",
      "value": 66,
      "playerId": 96
    },
    {
      "timestamp": 1757893986023,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893986024,
      "category": "login_attempt",
      "value": 70,
      "playerId": 11
    },
    {
      "timestamp": 1757893986024,
      "category": "login_success",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893986026,
      "category": "submit_flag",
      "value": 69,
      "playerId": 1
    },
    {
      "timestamp": 1757893986026,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893986028,
      "category": "static_file_loaded",
      "value": 446,
      "playerId": 28
    },
    {
      "timestamp": 1757893986051,
      "category": "submit_flag",
      "value": 56,
      "playerId": 8
    },
    {
      "timestamp": 1757893986052,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893986060,
      "category": "login_attempt",
      "value": 65,
      "playerId": 54
    },
    {
      "timestamp": 1757893986060,
      "category": "login_success",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893986071,
      "category": "submit_flag",
      "value": 69,
      "playerId": 8
    },
    {
      "timestamp": 1757893986071,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893986073,
      "category": "static_file_loaded",
      "value": 905,
      "playerId": 88
    },
    {
      "timestamp": 1757893986082,
      "category": "submit_flag",
      "value": 330,
      "playerId": 13
    },
    {
      "timestamp": 1757893986082,
      "category": "flag_correct",
      "value": 1,
      "playerId": 13
    },
    {
      "timestamp": 1757893986083,
      "category": "static_file_loaded",
      "value": 312,
      "playerId": 100
    },
    {
      "timestamp": 1757893986092,
      "category": "submit_flag",
      "value": 58,
      "playerId": 42
    },
    {
      "timestamp": 1757893986092,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893986098,
      "category": "submit_flag",
      "value": 43,
      "playerId": 35
    },
    {
      "timestamp": 1757893986098,
      "category": "flag_correct",
      "value": 1,
      "playerId": 35
    },
    {
      "timestamp": 1757893986121,
      "category": "submit_flag",
      "value": 74,
      "playerId": 42
    },
    {
      "timestamp": 1757893986121,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893986133,
      "category": "submit_flag",
      "value": 74,
      "playerId": 51
    },
    {
      "timestamp": 1757893986133,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893986145,
      "category": "static_file_loaded",
      "value": 18487,
      "playerId": 25
    },
    {
      "timestamp": 1757893986154,
      "category": "login_attempt",
      "value": 55,
      "playerId": 76
    },
    {
      "timestamp": 1757893986154,
      "category": "login_success",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893986163,
      "category": "submit_flag",
      "value": 67,
      "playerId": 9
    },
    {
      "timestamp": 1757893986163,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893986164,
      "category": "submit_flag",
      "value": 88,
      "playerId": 42
    },
    {
      "timestamp": 1757893986164,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893986171,
      "category": "static_file_loaded",
      "value": 18473,
      "playerId": 14
    },
    {
      "timestamp": 1757893986178,
      "category": "submit_flag",
      "value": 54,
      "playerId": 51
    },
    {
      "timestamp": 1757893986178,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893986198,
      "category": "submit_flag",
      "value": 75,
      "playerId": 9
    },
    {
      "timestamp": 1757893986198,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893986201,
      "category": "submit_flag",
      "value": 91,
      "playerId": 23
    },
    {
      "timestamp": 1757893986201,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893986204,
      "category": "websocket_connected",
      "value": 195,
      "playerId": 97
    },
    {
      "timestamp": 1757893986206,
      "category": "submit_flag",
      "value": 63,
      "playerId": 32
    },
    {
      "timestamp": 1757893986206,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893986207,
      "category": "submit_flag",
      "value": 83,
      "playerId": 85
    },
    {
      "timestamp": 1757893986207,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893986208,
      "category": "static_file_loaded",
      "value": 580,
      "playerId": 45
    },
    {
      "timestamp": 1757893986211,
      "category": "submit_flag",
      "value": 78,
      "playerId": 23
    },
    {
      "timestamp": 1757893986211,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893986215,
      "category": "submit_flag",
      "value": 67,
      "playerId": 85
    },
    {
      "timestamp": 1757893986215,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893986218,
      "category": "login_attempt",
      "value": 84,
      "playerId": 28
    },
    {
      "timestamp": 1757893986218,
      "category": "login_success",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893986222,
      "category": "submit_flag",
      "value": 63,
      "playerId": 23
    },
    {
      "timestamp": 1757893986222,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893986229,
      "category": "submit_flag",
      "value": 69,
      "playerId": 32
    },
    {
      "timestamp": 1757893986229,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893986230,
      "category": "websocket_connected",
      "value": 195,
      "playerId": 92
    },
    {
      "timestamp": 1757893986235,
      "category": "submit_flag",
      "value": 75,
      "playerId": 85
    },
    {
      "timestamp": 1757893986235,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893986245,
      "category": "submit_flag",
      "value": 111,
      "playerId": 51
    },
    {
      "timestamp": 1757893986245,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893986254,
      "category": "websocket_connected",
      "value": 196,
      "playerId": 93
    },
    {
      "timestamp": 1757893986254,
      "category": "login_attempt",
      "value": 80,
      "playerId": 88
    },
    {
      "timestamp": 1757893986254,
      "category": "login_success",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893986255,
      "category": "submit_flag",
      "value": 68,
      "playerId": 43
    },
    {
      "timestamp": 1757893986255,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893986256,
      "category": "login_attempt",
      "value": 70,
      "playerId": 100
    },
    {
      "timestamp": 1757893986256,
      "category": "login_success",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893986260,
      "category": "static_file_loaded",
      "value": 18577,
      "playerId": 15
    },
    {
      "timestamp": 1757893986265,
      "category": "submit_flag",
      "value": 64,
      "playerId": 32
    },
    {
      "timestamp": 1757893986265,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893986269,
      "category": "submit_flag",
      "value": 67,
      "playerId": 43
    },
    {
      "timestamp": 1757893986269,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893986275,
      "category": "static_file_loaded",
      "value": 18610,
      "playerId": 58
    },
    {
      "timestamp": 1757893986277,
      "category": "static_file_loaded",
      "value": 477,
      "playerId": 77
    },
    {
      "timestamp": 1757893986284,
      "category": "static_file_loaded",
      "value": 18724,
      "playerId": 73
    },
    {
      "timestamp": 1757893986285,
      "category": "submit_flag",
      "value": 54,
      "playerId": 21
    },
    {
      "timestamp": 1757893986285,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893986287,
      "category": "submit_flag",
      "value": 75,
      "playerId": 21
    },
    {
      "timestamp": 1757893986288,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893986288,
      "category": "websocket_connected",
      "value": 211,
      "playerId": 11
    },
    {
      "timestamp": 1757893986297,
      "category": "submit_flag",
      "value": 66,
      "playerId": 12
    },
    {
      "timestamp": 1757893986297,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893986311,
      "category": "websocket_connected",
      "value": 200,
      "playerId": 54
    },
    {
      "timestamp": 1757893986313,
      "category": "submit_flag",
      "value": 67,
      "playerId": 43
    },
    {
      "timestamp": 1757893986313,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893986320,
      "category": "static_file_loaded",
      "value": 18416,
      "playerId": 18
    },
    {
      "timestamp": 1757893986324,
      "category": "submit_flag",
      "value": 68,
      "playerId": 12
    },
    {
      "timestamp": 1757893986324,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893986342,
      "category": "submit_flag",
      "value": 80,
      "playerId": 21
    },
    {
      "timestamp": 1757893986342,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893986348,
      "category": "submit_flag",
      "value": 51,
      "playerId": 75
    },
    {
      "timestamp": 1757893986348,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893986354,
      "category": "submit_flag",
      "value": 53,
      "playerId": 75
    },
    {
      "timestamp": 1757893986354,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893986355,
      "category": "submit_flag",
      "value": 76,
      "playerId": 12
    },
    {
      "timestamp": 1757893986355,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893986358,
      "category": "submit_flag",
      "value": 66,
      "playerId": 71
    },
    {
      "timestamp": 1757893986358,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893986369,
      "category": "login_attempt",
      "value": 59,
      "playerId": 45
    },
    {
      "timestamp": 1757893986369,
      "category": "login_success",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893986376,
      "category": "submit_flag",
      "value": 61,
      "playerId": 71
    },
    {
      "timestamp": 1757893986376,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893986386,
      "category": "submit_flag",
      "value": 61,
      "playerId": 71
    },
    {
      "timestamp": 1757893986386,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893986393,
      "category": "websocket_connected",
      "value": 181,
      "playerId": 76
    },
    {
      "timestamp": 1757893986414,
      "category": "static_file_loaded",
      "value": 18853,
      "playerId": 20
    },
    {
      "timestamp": 1757893986423,
      "category": "submit_flag",
      "value": 58,
      "playerId": 2
    },
    {
      "timestamp": 1757893986423,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893986429,
      "category": "submit_flag",
      "value": 64,
      "playerId": 2
    },
    {
      "timestamp": 1757893986429,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893986439,
      "category": "submit_flag",
      "value": 72,
      "playerId": 19
    },
    {
      "timestamp": 1757893986439,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893986453,
      "category": "submit_flag",
      "value": 82,
      "playerId": 19
    },
    {
      "timestamp": 1757893986453,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893986454,
      "category": "login_attempt",
      "value": 77,
      "playerId": 77
    },
    {
      "timestamp": 1757893986454,
      "category": "login_success",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893986462,
      "category": "static_file_loaded",
      "value": 316,
      "playerId": 25
    },
    {
      "timestamp": 1757893986462,
      "category": "submit_flag",
      "value": 82,
      "playerId": 19
    },
    {
      "timestamp": 1757893986462,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893986473,
      "category": "websocket_connected",
      "value": 203,
      "playerId": 28
    },
    {
      "timestamp": 1757893986474,
      "category": "submit_flag",
      "value": 67,
      "playerId": 16
    },
    {
      "timestamp": 1757893986474,
      "category": "flag_correct",
      "value": 1,
      "playerId": 16
    },
    {
      "timestamp": 1757893986476,
      "category": "submit_flag",
      "value": 68,
      "playerId": 33
    },
    {
      "timestamp": 1757893986476,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893986484,
      "category": "submit_flag",
      "value": 67,
      "playerId": 33
    },
    {
      "timestamp": 1757893986484,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893986495,
      "category": "submit_flag",
      "value": 180,
      "playerId": 75
    },
    {
      "timestamp": 1757893986495,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893986502,
      "category": "websocket_connected",
      "value": 197,
      "playerId": 88
    },
    {
      "timestamp": 1757893986507,
      "category": "submit_flag",
      "value": 73,
      "playerId": 2
    },
    {
      "timestamp": 1757893986507,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893986518,
      "category": "websocket_connected",
      "value": 210,
      "playerId": 100
    },
    {
      "timestamp": 1757893986523,
      "category": "submit_flag",
      "value": 72,
      "playerId": 60
    },
    {
      "timestamp": 1757893986523,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893986524,
      "category": "submit_flag",
      "value": 73,
      "playerId": 60
    },
    {
      "timestamp": 1757893986524,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893986528,
      "category": "submit_flag",
      "value": 63,
      "playerId": 83
    },
    {
      "timestamp": 1757893986528,
      "category": "flag_correct",
      "value": 1,
      "playerId": 83
    },
    {
      "timestamp": 1757893986542,
      "category": "static_file_loaded",
      "value": 17554,
      "playerId": 63
    },
    {
      "timestamp": 1757893986543,
      "category": "submit_flag",
      "value": 64,
      "playerId": 41
    },
    {
      "timestamp": 1757893986543,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893986545,
      "category": "submit_flag",
      "value": 65,
      "playerId": 60
    },
    {
      "timestamp": 1757893986545,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893986550,
      "category": "submit_flag",
      "value": 70,
      "playerId": 33
    },
    {
      "timestamp": 1757893986550,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893986563,
      "category": "submit_flag",
      "value": 63,
      "playerId": 41
    },
    {
      "timestamp": 1757893986563,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893986566,
      "category": "submit_flag",
      "value": 65,
      "playerId": 96
    },
    {
      "timestamp": 1757893986566,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893986575,
      "category": "submit_flag",
      "value": 62,
      "playerId": 41
    },
    {
      "timestamp": 1757893986575,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893986582,
      "category": "submit_flag",
      "value": 57,
      "playerId": 96
    },
    {
      "timestamp": 1757893986582,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893986585,
      "category": "submit_flag",
      "value": 60,
      "playerId": 96
    },
    {
      "timestamp": 1757893986585,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893986602,
      "category": "submit_flag",
      "value": 56,
      "playerId": 92
    },
    {
      "timestamp": 1757893986602,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893986604,
      "category": "submit_flag",
      "value": 58,
      "playerId": 97
    },
    {
      "timestamp": 1757893986604,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893986609,
      "category": "submit_flag",
      "value": 63,
      "playerId": 92
    },
    {
      "timestamp": 1757893986609,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893986613,
      "category": "submit_flag",
      "value": 61,
      "playerId": 62
    },
    {
      "timestamp": 1757893986613,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893986614,
      "category": "websocket_connected",
      "value": 196,
      "playerId": 45
    },
    {
      "timestamp": 1757893986621,
      "category": "static_file_loaded",
      "value": 18786,
      "playerId": 49
    },
    {
      "timestamp": 1757893986622,
      "category": "submit_flag",
      "value": 63,
      "playerId": 8
    },
    {
      "timestamp": 1757893986622,
      "category": "flag_correct",
      "value": 1,
      "playerId": 8
    },
    {
      "timestamp": 1757893986624,
      "category": "submit_flag",
      "value": 59,
      "playerId": 97
    },
    {
      "timestamp": 1757893986624,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893986624,
      "category": "login_attempt",
      "value": 59,
      "playerId": 25
    },
    {
      "timestamp": 1757893986624,
      "category": "login_success",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893986630,
      "category": "submit_flag",
      "value": 61,
      "playerId": 64
    },
    {
      "timestamp": 1757893986630,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893986637,
      "category": "static_file_loaded",
      "value": 18415,
      "playerId": 44
    },
    {
      "timestamp": 1757893986640,
      "category": "submit_flag",
      "value": 63,
      "playerId": 64
    },
    {
      "timestamp": 1757893986640,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893986645,
      "category": "submit_flag",
      "value": 67,
      "playerId": 97
    },
    {
      "timestamp": 1757893986645,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893986646,
      "category": "submit_flag",
      "value": 58,
      "playerId": 93
    },
    {
      "timestamp": 1757893986646,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893986646,
      "category": "submit_flag",
      "value": 62,
      "playerId": 64
    },
    {
      "timestamp": 1757893986647,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893986649,
      "category": "submit_flag",
      "value": 58,
      "playerId": 62
    },
    {
      "timestamp": 1757893986649,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893986668,
      "category": "submit_flag",
      "value": 54,
      "playerId": 11
    },
    {
      "timestamp": 1757893986668,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893986669,
      "category": "static_file_loaded",
      "value": 746,
      "playerId": 39
    },
    {
      "timestamp": 1757893986676,
      "category": "submit_flag",
      "value": 61,
      "playerId": 23
    },
    {
      "timestamp": 1757893986676,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893986680,
      "category": "static_file_loaded",
      "value": 419,
      "playerId": 15
    },
    {
      "timestamp": 1757893986688,
      "category": "submit_flag",
      "value": 62,
      "playerId": 23
    },
    {
      "timestamp": 1757893986688,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893986715,
      "category": "submit_flag",
      "value": 77,
      "playerId": 23
    },
    {
      "timestamp": 1757893986715,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893986717,
      "category": "submit_flag",
      "value": 80,
      "playerId": 54
    },
    {
      "timestamp": 1757893986717,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893986735,
      "category": "submit_flag",
      "value": 78,
      "playerId": 85
    },
    {
      "timestamp": 1757893986735,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893986740,
      "category": "submit_flag",
      "value": 77,
      "playerId": 93
    },
    {
      "timestamp": 1757893986740,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893986744,
      "category": "submit_flag",
      "value": 63,
      "playerId": 32
    },
    {
      "timestamp": 1757893986745,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893986746,
      "category": "submit_flag",
      "value": 65,
      "playerId": 99
    },
    {
      "timestamp": 1757893986746,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893986747,
      "category": "submit_flag",
      "value": 96,
      "playerId": 93
    },
    {
      "timestamp": 1757893986747,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893986749,
      "category": "submit_flag",
      "value": 62,
      "playerId": 11
    },
    {
      "timestamp": 1757893986749,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893986752,
      "category": "submit_flag",
      "value": 60,
      "playerId": 11
    },
    {
      "timestamp": 1757893986752,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893986757,
      "category": "static_file_loaded",
      "value": 473,
      "playerId": 73
    },
    {
      "timestamp": 1757893986761,
      "category": "submit_flag",
      "value": 91,
      "playerId": 32
    },
    {
      "timestamp": 1757893986761,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893986767,
      "category": "submit_flag",
      "value": 136,
      "playerId": 85
    },
    {
      "timestamp": 1757893986767,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893986768,
      "category": "submit_flag",
      "value": 82,
      "playerId": 54
    },
    {
      "timestamp": 1757893986768,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893986775,
      "category": "submit_flag",
      "value": 64,
      "playerId": 54
    },
    {
      "timestamp": 1757893986775,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893986775,
      "category": "submit_flag",
      "value": 128,
      "playerId": 85
    },
    {
      "timestamp": 1757893986775,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893986777,
      "category": "submit_flag",
      "value": 62,
      "playerId": 12
    },
    {
      "timestamp": 1757893986777,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893986778,
      "category": "submit_flag",
      "value": 62,
      "playerId": 76
    },
    {
      "timestamp": 1757893986778,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893986784,
      "category": "static_file_loaded",
      "value": 509,
      "playerId": 58
    },
    {
      "timestamp": 1757893986795,
      "category": "submit_flag",
      "value": 64,
      "playerId": 9
    },
    {
      "timestamp": 1757893986796,
      "category": "flag_correct",
      "value": 1,
      "playerId": 9
    },
    {
      "timestamp": 1757893986801,
      "category": "submit_flag",
      "value": 69,
      "playerId": 1
    },
    {
      "timestamp": 1757893986801,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893986803,
      "category": "submit_flag",
      "value": 150,
      "playerId": 99
    },
    {
      "timestamp": 1757893986803,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893986808,
      "category": "static_file_loaded",
      "value": 487,
      "playerId": 18
    },
    {
      "timestamp": 1757893986813,
      "category": "submit_flag",
      "value": 59,
      "playerId": 1
    },
    {
      "timestamp": 1757893986813,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893986813,
      "category": "submit_flag",
      "value": 71,
      "playerId": 76
    },
    {
      "timestamp": 1757893986813,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893986818,
      "category": "submit_flag",
      "value": 64,
      "playerId": 21
    },
    {
      "timestamp": 1757893986818,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893986826,
      "category": "submit_flag",
      "value": 63,
      "playerId": 1
    },
    {
      "timestamp": 1757893986826,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893986833,
      "category": "submit_flag",
      "value": 70,
      "playerId": 12
    },
    {
      "timestamp": 1757893986833,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893986834,
      "category": "static_file_loaded",
      "value": 420,
      "playerId": 20
    },
    {
      "timestamp": 1757893986843,
      "category": "submit_flag",
      "value": 70,
      "playerId": 12
    },
    {
      "timestamp": 1757893986843,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893986846,
      "category": "login_attempt",
      "value": 65,
      "playerId": 15
    },
    {
      "timestamp": 1757893986846,
      "category": "login_success",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893986847,
      "category": "submit_flag",
      "value": 60,
      "playerId": 76
    },
    {
      "timestamp": 1757893986847,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893986850,
      "category": "submit_flag",
      "value": 208,
      "playerId": 32
    },
    {
      "timestamp": 1757893986850,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893986854,
      "category": "submit_flag",
      "value": 57,
      "playerId": 79
    },
    {
      "timestamp": 1757893986854,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893986871,
      "category": "submit_flag",
      "value": 73,
      "playerId": 75
    },
    {
      "timestamp": 1757893986871,
      "category": "flag_correct",
      "value": 1,
      "playerId": 75
    },
    {
      "timestamp": 1757893986873,
      "category": "submit_flag",
      "value": 67,
      "playerId": 65
    },
    {
      "timestamp": 1757893986873,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893986874,
      "category": "submit_flag",
      "value": 349,
      "playerId": 62
    },
    {
      "timestamp": 1757893986874,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893986876,
      "category": "submit_flag",
      "value": 71,
      "playerId": 21
    },
    {
      "timestamp": 1757893986876,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893986876,
      "category": "submit_flag",
      "value": 70,
      "playerId": 65
    },
    {
      "timestamp": 1757893986876,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893986877,
      "category": "submit_flag",
      "value": 79,
      "playerId": 21
    },
    {
      "timestamp": 1757893986877,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893986878,
      "category": "submit_flag",
      "value": 63,
      "playerId": 65
    },
    {
      "timestamp": 1757893986878,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893986881,
      "category": "websocket_connected",
      "value": 207,
      "playerId": 25
    },
    {
      "timestamp": 1757893986884,
      "category": "submit_flag",
      "value": 241,
      "playerId": 99
    },
    {
      "timestamp": 1757893986884,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893986887,
      "category": "submit_flag",
      "value": 56,
      "playerId": 79
    },
    {
      "timestamp": 1757893986887,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893986902,
      "category": "static_file_loaded",
      "value": 18555,
      "playerId": 94
    },
    {
      "timestamp": 1757893986923,
      "category": "submit_flag",
      "value": 57,
      "playerId": 88
    },
    {
      "timestamp": 1757893986923,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893986928,
      "category": "submit_flag",
      "value": 48,
      "playerId": 100
    },
    {
      "timestamp": 1757893986928,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893986934,
      "category": "submit_flag",
      "value": 67,
      "playerId": 88
    },
    {
      "timestamp": 1757893986934,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893986942,
      "category": "static_file_loaded",
      "value": 19035,
      "playerId": 38
    },
    {
      "timestamp": 1757893986946,
      "category": "login_attempt",
      "value": 80,
      "playerId": 73
    },
    {
      "timestamp": 1757893986946,
      "category": "login_success",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893986947,
      "category": "static_file_loaded",
      "value": 776,
      "playerId": 14
    },
    {
      "timestamp": 1757893986947,
      "category": "submit_flag",
      "value": 61,
      "playerId": 88
    },
    {
      "timestamp": 1757893986948,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893986950,
      "category": "login_attempt",
      "value": 65,
      "playerId": 58
    },
    {
      "timestamp": 1757893986950,
      "category": "login_success",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893986952,
      "category": "submit_flag",
      "value": 327,
      "playerId": 92
    },
    {
      "timestamp": 1757893986952,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893986953,
      "category": "submit_flag",
      "value": 57,
      "playerId": 60
    },
    {
      "timestamp": 1757893986953,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893986968,
      "category": "submit_flag",
      "value": 66,
      "playerId": 100
    },
    {
      "timestamp": 1757893986968,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893986970,
      "category": "login_attempt",
      "value": 62,
      "playerId": 18
    },
    {
      "timestamp": 1757893986970,
      "category": "login_success",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893986970,
      "category": "submit_flag",
      "value": 66,
      "playerId": 60
    },
    {
      "timestamp": 1757893986970,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893986971,
      "category": "submit_flag",
      "value": 52,
      "playerId": 28
    },
    {
      "timestamp": 1757893986971,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893986973,
      "category": "submit_flag",
      "value": 58,
      "playerId": 100
    },
    {
      "timestamp": 1757893986973,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893986983,
      "category": "login_attempt",
      "value": 47,
      "playerId": 20
    },
    {
      "timestamp": 1757893986983,
      "category": "login_success",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893986984,
      "category": "submit_flag",
      "value": 52,
      "playerId": 43
    },
    {
      "timestamp": 1757893986984,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893987008,
      "category": "submit_flag",
      "value": 64,
      "playerId": 45
    },
    {
      "timestamp": 1757893987008,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893987010,
      "category": "submit_flag",
      "value": 72,
      "playerId": 71
    },
    {
      "timestamp": 1757893987010,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893987023,
      "category": "submit_flag",
      "value": 73,
      "playerId": 71
    },
    {
      "timestamp": 1757893987023,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893987062,
      "category": "submit_flag",
      "value": 87,
      "playerId": 43
    },
    {
      "timestamp": 1757893987062,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893987063,
      "category": "submit_flag",
      "value": 84,
      "playerId": 71
    },
    {
      "timestamp": 1757893987063,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893987069,
      "category": "submit_flag",
      "value": 86,
      "playerId": 45
    },
    {
      "timestamp": 1757893987069,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893987069,
      "category": "submit_flag",
      "value": 90,
      "playerId": 96
    },
    {
      "timestamp": 1757893987069,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893987071,
      "category": "submit_flag",
      "value": 105,
      "playerId": 43
    },
    {
      "timestamp": 1757893987071,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893987071,
      "category": "submit_flag",
      "value": 102,
      "playerId": 28
    },
    {
      "timestamp": 1757893987071,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893987072,
      "category": "submit_flag",
      "value": 93,
      "playerId": 60
    },
    {
      "timestamp": 1757893987072,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893987072,
      "category": "submit_flag",
      "value": 82,
      "playerId": 51
    },
    {
      "timestamp": 1757893987072,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893987072,
      "category": "submit_flag",
      "value": 95,
      "playerId": 28
    },
    {
      "timestamp": 1757893987072,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893987076,
      "category": "submit_flag",
      "value": 76,
      "playerId": 45
    },
    {
      "timestamp": 1757893987076,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893987077,
      "category": "static_file_loaded",
      "value": 440,
      "playerId": 44
    },
    {
      "timestamp": 1757893987082,
      "category": "submit_flag",
      "value": 64,
      "playerId": 51
    },
    {
      "timestamp": 1757893987082,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893987091,
      "category": "submit_flag",
      "value": 59,
      "playerId": 33
    },
    {
      "timestamp": 1757893987091,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893987096,
      "category": "login_attempt",
      "value": 323,
      "playerId": 39
    },
    {
      "timestamp": 1757893987096,
      "category": "login_success",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893987105,
      "category": "submit_flag",
      "value": 54,
      "playerId": 33
    },
    {
      "timestamp": 1757893987106,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893987108,
      "category": "login_attempt",
      "value": 54,
      "playerId": 14
    },
    {
      "timestamp": 1757893987108,
      "category": "login_success",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893987112,
      "category": "submit_flag",
      "value": 59,
      "playerId": 51
    },
    {
      "timestamp": 1757893987112,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893987129,
      "category": "submit_flag",
      "value": 54,
      "playerId": 96
    },
    {
      "timestamp": 1757893987129,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893987142,
      "category": "submit_flag",
      "value": 68,
      "playerId": 11
    },
    {
      "timestamp": 1757893987142,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893987146,
      "category": "submit_flag",
      "value": 62,
      "playerId": 33
    },
    {
      "timestamp": 1757893987146,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893987156,
      "category": "submit_flag",
      "value": 71,
      "playerId": 11
    },
    {
      "timestamp": 1757893987156,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893987160,
      "category": "submit_flag",
      "value": 60,
      "playerId": 97
    },
    {
      "timestamp": 1757893987160,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893987165,
      "category": "submit_flag",
      "value": 52,
      "playerId": 42
    },
    {
      "timestamp": 1757893987165,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893987173,
      "category": "websocket_connected",
      "value": 169,
      "playerId": 58
    },
    {
      "timestamp": 1757893987179,
      "category": "submit_flag",
      "value": 49,
      "playerId": 93
    },
    {
      "timestamp": 1757893987179,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893987184,
      "category": "submit_flag",
      "value": 56,
      "playerId": 97
    },
    {
      "timestamp": 1757893987185,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893987190,
      "category": "submit_flag",
      "value": 66,
      "playerId": 42
    },
    {
      "timestamp": 1757893987190,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893987191,
      "category": "submit_flag",
      "value": 61,
      "playerId": 42
    },
    {
      "timestamp": 1757893987191,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893987195,
      "category": "static_file_loaded",
      "value": 19531,
      "playerId": 27
    },
    {
      "timestamp": 1757893987202,
      "category": "websocket_connected",
      "value": 690,
      "playerId": 77
    },
    {
      "timestamp": 1757893987204,
      "category": "submit_flag",
      "value": 57,
      "playerId": 97
    },
    {
      "timestamp": 1757893987205,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893987209,
      "category": "static_file_loaded",
      "value": 19253,
      "playerId": 82
    },
    {
      "timestamp": 1757893987214,
      "category": "submit_flag",
      "value": 52,
      "playerId": 93
    },
    {
      "timestamp": 1757893987214,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893987216,
      "category": "submit_flag",
      "value": 61,
      "playerId": 41
    },
    {
      "timestamp": 1757893987216,
      "category": "flag_correct",
      "value": 1,
      "playerId": 41
    },
    {
      "timestamp": 1757893987219,
      "category": "static_file_loaded",
      "value": 18230,
      "playerId": 66
    },
    {
      "timestamp": 1757893987220,
      "category": "websocket_connected",
      "value": 169,
      "playerId": 20
    },
    {
      "timestamp": 1757893987222,
      "category": "websocket_connected",
      "value": 193,
      "playerId": 18
    },
    {
      "timestamp": 1757893987225,
      "category": "login_attempt",
      "value": 48,
      "playerId": 44
    },
    {
      "timestamp": 1757893987225,
      "category": "login_success",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893987230,
      "category": "submit_flag",
      "value": 48,
      "playerId": 93
    },
    {
      "timestamp": 1757893987230,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893987237,
      "category": "submit_flag",
      "value": 55,
      "playerId": 23
    },
    {
      "timestamp": 1757893987237,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893987254,
      "category": "submit_flag",
      "value": 49,
      "playerId": 25
    },
    {
      "timestamp": 1757893987254,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893987274,
      "category": "submit_flag",
      "value": 65,
      "playerId": 23
    },
    {
      "timestamp": 1757893987274,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893987287,
      "category": "submit_flag",
      "value": 62,
      "playerId": 2
    },
    {
      "timestamp": 1757893987287,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893987289,
      "category": "submit_flag",
      "value": 57,
      "playerId": 23
    },
    {
      "timestamp": 1757893987289,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893987289,
      "category": "submit_flag",
      "value": 57,
      "playerId": 65
    },
    {
      "timestamp": 1757893987289,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893987294,
      "category": "submit_flag",
      "value": 53,
      "playerId": 1
    },
    {
      "timestamp": 1757893987294,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893987298,
      "category": "static_file_loaded",
      "value": 19375,
      "playerId": 59
    },
    {
      "timestamp": 1757893987299,
      "category": "submit_flag",
      "value": 58,
      "playerId": 1
    },
    {
      "timestamp": 1757893987299,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893987301,
      "category": "static_file_loaded",
      "value": 759,
      "playerId": 63
    },
    {
      "timestamp": 1757893987302,
      "category": "submit_flag",
      "value": 61,
      "playerId": 54
    },
    {
      "timestamp": 1757893987302,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893987305,
      "category": "submit_flag",
      "value": 59,
      "playerId": 54
    },
    {
      "timestamp": 1757893987305,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893987307,
      "category": "submit_flag",
      "value": 62,
      "playerId": 76
    },
    {
      "timestamp": 1757893987307,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893987308,
      "category": "submit_flag",
      "value": 66,
      "playerId": 19
    },
    {
      "timestamp": 1757893987308,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893987314,
      "category": "submit_flag",
      "value": 59,
      "playerId": 19
    },
    {
      "timestamp": 1757893987314,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893987316,
      "category": "submit_flag",
      "value": 50,
      "playerId": 99
    },
    {
      "timestamp": 1757893987316,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893987318,
      "category": "submit_flag",
      "value": 50,
      "playerId": 65
    },
    {
      "timestamp": 1757893987319,
      "category": "flag_correct",
      "value": 1,
      "playerId": 65
    },
    {
      "timestamp": 1757893987320,
      "category": "submit_flag",
      "value": 74,
      "playerId": 2
    },
    {
      "timestamp": 1757893987320,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893987322,
      "category": "submit_flag",
      "value": 61,
      "playerId": 64
    },
    {
      "timestamp": 1757893987322,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893987323,
      "category": "websocket_connected",
      "value": 175,
      "playerId": 39
    },
    {
      "timestamp": 1757893987325,
      "category": "submit_flag",
      "value": 68,
      "playerId": 54
    },
    {
      "timestamp": 1757893987325,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893987340,
      "category": "submit_flag",
      "value": 63,
      "playerId": 25
    },
    {
      "timestamp": 1757893987340,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893987341,
      "category": "submit_flag",
      "value": 81,
      "playerId": 32
    },
    {
      "timestamp": 1757893987341,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893987346,
      "category": "submit_flag",
      "value": 64,
      "playerId": 79
    },
    {
      "timestamp": 1757893987346,
      "category": "flag_correct",
      "value": 1,
      "playerId": 79
    },
    {
      "timestamp": 1757893987349,
      "category": "submit_flag",
      "value": 53,
      "playerId": 88
    },
    {
      "timestamp": 1757893987349,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893987351,
      "category": "submit_flag",
      "value": 67,
      "playerId": 2
    },
    {
      "timestamp": 1757893987351,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893987352,
      "category": "submit_flag",
      "value": 64,
      "playerId": 32
    },
    {
      "timestamp": 1757893987352,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893987356,
      "category": "submit_flag",
      "value": 60,
      "playerId": 25
    },
    {
      "timestamp": 1757893987356,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893987362,
      "category": "submit_flag",
      "value": 84,
      "playerId": 64
    },
    {
      "timestamp": 1757893987362,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893987363,
      "category": "submit_flag",
      "value": 59,
      "playerId": 19
    },
    {
      "timestamp": 1757893987363,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893987378,
      "category": "submit_flag",
      "value": 69,
      "playerId": 21
    },
    {
      "timestamp": 1757893987378,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893987379,
      "category": "submit_flag",
      "value": 64,
      "playerId": 64
    },
    {
      "timestamp": 1757893987379,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893987384,
      "category": "submit_flag",
      "value": 76,
      "playerId": 76
    },
    {
      "timestamp": 1757893987384,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893987385,
      "category": "submit_flag",
      "value": 54,
      "playerId": 32
    },
    {
      "timestamp": 1757893987385,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893987389,
      "category": "submit_flag",
      "value": 58,
      "playerId": 76
    },
    {
      "timestamp": 1757893987389,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893987391,
      "category": "submit_flag",
      "value": 58,
      "playerId": 21
    },
    {
      "timestamp": 1757893987391,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893987400,
      "category": "submit_flag",
      "value": 47,
      "playerId": 88
    },
    {
      "timestamp": 1757893987401,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893987408,
      "category": "submit_flag",
      "value": 328,
      "playerId": 11
    },
    {
      "timestamp": 1757893987408,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893987421,
      "category": "submit_flag",
      "value": 63,
      "playerId": 62
    },
    {
      "timestamp": 1757893987421,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893987425,
      "category": "submit_flag",
      "value": 50,
      "playerId": 62
    },
    {
      "timestamp": 1757893987425,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893987433,
      "category": "submit_flag",
      "value": 57,
      "playerId": 62
    },
    {
      "timestamp": 1757893987433,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893987434,
      "category": "submit_flag",
      "value": 55,
      "playerId": 88
    },
    {
      "timestamp": 1757893987434,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893987443,
      "category": "static_file_loaded",
      "value": 19246,
      "playerId": 37
    },
    {
      "timestamp": 1757893987472,
      "category": "submit_flag",
      "value": 55,
      "playerId": 45
    },
    {
      "timestamp": 1757893987472,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893987503,
      "category": "submit_flag",
      "value": 53,
      "playerId": 12
    },
    {
      "timestamp": 1757893987503,
      "category": "flag_correct",
      "value": 1,
      "playerId": 12
    },
    {
      "timestamp": 1757893987508,
      "category": "submit_flag",
      "value": 58,
      "playerId": 45
    },
    {
      "timestamp": 1757893987508,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893987518,
      "category": "submit_flag",
      "value": 67,
      "playerId": 43
    },
    {
      "timestamp": 1757893987518,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893987529,
      "category": "submit_flag",
      "value": 66,
      "playerId": 43
    },
    {
      "timestamp": 1757893987529,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893987541,
      "category": "submit_flag",
      "value": 60,
      "playerId": 92
    },
    {
      "timestamp": 1757893987541,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893987546,
      "category": "websocket_connected",
      "value": 271,
      "playerId": 44
    },
    {
      "timestamp": 1757893987548,
      "category": "submit_flag",
      "value": 73,
      "playerId": 43
    },
    {
      "timestamp": 1757893987548,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893987556,
      "category": "submit_flag",
      "value": 54,
      "playerId": 100
    },
    {
      "timestamp": 1757893987556,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893987566,
      "category": "submit_flag",
      "value": 62,
      "playerId": 92
    },
    {
      "timestamp": 1757893987566,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893987572,
      "category": "submit_flag",
      "value": 62,
      "playerId": 92
    },
    {
      "timestamp": 1757893987572,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893987573,
      "category": "websocket_connected",
      "value": 676,
      "playerId": 15
    },
    {
      "timestamp": 1757893987582,
      "category": "submit_flag",
      "value": 68,
      "playerId": 100
    },
    {
      "timestamp": 1757893987582,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893987583,
      "category": "submit_flag",
      "value": 63,
      "playerId": 100
    },
    {
      "timestamp": 1757893987583,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893987585,
      "category": "submit_flag",
      "value": 60,
      "playerId": 20
    },
    {
      "timestamp": 1757893987585,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893987588,
      "category": "submit_flag",
      "value": 65,
      "playerId": 77
    },
    {
      "timestamp": 1757893987589,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893987597,
      "category": "submit_flag",
      "value": 48,
      "playerId": 18
    },
    {
      "timestamp": 1757893987597,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893987598,
      "category": "submit_flag",
      "value": 57,
      "playerId": 28
    },
    {
      "timestamp": 1757893987598,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893987603,
      "category": "submit_flag",
      "value": 57,
      "playerId": 96
    },
    {
      "timestamp": 1757893987603,
      "category": "flag_correct",
      "value": 1,
      "playerId": 96
    },
    {
      "timestamp": 1757893987605,
      "category": "submit_flag",
      "value": 299,
      "playerId": 21
    },
    {
      "timestamp": 1757893987605,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893987607,
      "category": "websocket_connected",
      "value": 606,
      "playerId": 73
    },
    {
      "timestamp": 1757893987614,
      "category": "websocket_connected",
      "value": 456,
      "playerId": 14
    },
    {
      "timestamp": 1757893987615,
      "category": "submit_flag",
      "value": 80,
      "playerId": 20
    },
    {
      "timestamp": 1757893987615,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893987621,
      "category": "submit_flag",
      "value": 114,
      "playerId": 77
    },
    {
      "timestamp": 1757893987621,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893987627,
      "category": "submit_flag",
      "value": 48,
      "playerId": 77
    },
    {
      "timestamp": 1757893987627,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893987629,
      "category": "submit_flag",
      "value": 64,
      "playerId": 28
    },
    {
      "timestamp": 1757893987629,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893987633,
      "category": "submit_flag",
      "value": 50,
      "playerId": 18
    },
    {
      "timestamp": 1757893987633,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893987635,
      "category": "submit_flag",
      "value": 312,
      "playerId": 99
    },
    {
      "timestamp": 1757893987635,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893987656,
      "category": "submit_flag",
      "value": 59,
      "playerId": 20
    },
    {
      "timestamp": 1757893987656,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893987659,
      "category": "submit_flag",
      "value": 60,
      "playerId": 28
    },
    {
      "timestamp": 1757893987659,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893987664,
      "category": "submit_flag",
      "value": 60,
      "playerId": 58
    },
    {
      "timestamp": 1757893987664,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893987672,
      "category": "submit_flag",
      "value": 49,
      "playerId": 39
    },
    {
      "timestamp": 1757893987672,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893987694,
      "category": "submit_flag",
      "value": 87,
      "playerId": 18
    },
    {
      "timestamp": 1757893987694,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893987702,
      "category": "submit_flag",
      "value": 50,
      "playerId": 58
    },
    {
      "timestamp": 1757893987702,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893987710,
      "category": "login_attempt",
      "value": 309,
      "playerId": 63
    },
    {
      "timestamp": 1757893987710,
      "category": "login_success",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893987717,
      "category": "submit_flag",
      "value": 57,
      "playerId": 58
    },
    {
      "timestamp": 1757893987717,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893987723,
      "category": "submit_flag",
      "value": 344,
      "playerId": 45
    },
    {
      "timestamp": 1757893987723,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893987727,
      "category": "submit_flag",
      "value": 52,
      "playerId": 39
    },
    {
      "timestamp": 1757893987727,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893987746,
      "category": "static_file_loaded",
      "value": 1124,
      "playerId": 49
    },
    {
      "timestamp": 1757893987752,
      "category": "submit_flag",
      "value": 60,
      "playerId": 39
    },
    {
      "timestamp": 1757893987752,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893987798,
      "category": "static_file_loaded",
      "value": 589,
      "playerId": 82
    },
    {
      "timestamp": 1757893987882,
      "category": "submit_flag",
      "value": 127,
      "playerId": 85
    },
    {
      "timestamp": 1757893987882,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893987884,
      "category": "static_file_loaded",
      "value": 19923,
      "playerId": 90
    },
    {
      "timestamp": 1757893987890,
      "category": "static_file_loaded",
      "value": 19381,
      "playerId": 84
    },
    {
      "timestamp": 1757893987893,
      "category": "submit_flag",
      "value": 99,
      "playerId": 85
    },
    {
      "timestamp": 1757893987893,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893987894,
      "category": "static_file_loaded",
      "value": 992,
      "playerId": 94
    },
    {
      "timestamp": 1757893988089,
      "category": "login_attempt",
      "value": 243,
      "playerId": 49
    },
    {
      "timestamp": 1757893988089,
      "category": "login_success",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893988094,
      "category": "submit_flag",
      "value": 235,
      "playerId": 44
    },
    {
      "timestamp": 1757893988094,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893988097,
      "category": "submit_flag",
      "value": 249,
      "playerId": 25
    },
    {
      "timestamp": 1757893988097,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893988098,
      "category": "submit_flag",
      "value": 276,
      "playerId": 93
    },
    {
      "timestamp": 1757893988098,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893988099,
      "category": "login_attempt",
      "value": 200,
      "playerId": 82
    },
    {
      "timestamp": 1757893988099,
      "category": "login_success",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893988099,
      "category": "submit_flag",
      "value": 249,
      "playerId": 93
    },
    {
      "timestamp": 1757893988099,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893988099,
      "category": "submit_flag",
      "value": 252,
      "playerId": 93
    },
    {
      "timestamp": 1757893988099,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893988099,
      "category": "submit_flag",
      "value": 205,
      "playerId": 44
    },
    {
      "timestamp": 1757893988099,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893988100,
      "category": "submit_flag",
      "value": 258,
      "playerId": 85
    },
    {
      "timestamp": 1757893988100,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893988143,
      "category": "submit_flag",
      "value": 221,
      "playerId": 54
    },
    {
      "timestamp": 1757893988143,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893988145,
      "category": "submit_flag",
      "value": 208,
      "playerId": 11
    },
    {
      "timestamp": 1757893988145,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893988145,
      "category": "submit_flag",
      "value": 223,
      "playerId": 44
    },
    {
      "timestamp": 1757893988145,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893988146,
      "category": "websocket_connected",
      "value": 384,
      "playerId": 63
    },
    {
      "timestamp": 1757893988158,
      "category": "submit_flag",
      "value": 195,
      "playerId": 54
    },
    {
      "timestamp": 1757893988158,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893988159,
      "category": "submit_flag",
      "value": 78,
      "playerId": 97
    },
    {
      "timestamp": 1757893988159,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893988164,
      "category": "submit_flag",
      "value": 217,
      "playerId": 54
    },
    {
      "timestamp": 1757893988164,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893988164,
      "category": "login_attempt",
      "value": 169,
      "playerId": 94
    },
    {
      "timestamp": 1757893988164,
      "category": "login_success",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893988165,
      "category": "submit_flag",
      "value": 178,
      "playerId": 76
    },
    {
      "timestamp": 1757893988165,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893988167,
      "category": "submit_flag",
      "value": 224,
      "playerId": 25
    },
    {
      "timestamp": 1757893988167,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893988170,
      "category": "submit_flag",
      "value": 67,
      "playerId": 42
    },
    {
      "timestamp": 1757893988170,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893988173,
      "category": "submit_flag",
      "value": 237,
      "playerId": 71
    },
    {
      "timestamp": 1757893988173,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893988174,
      "category": "submit_flag",
      "value": 207,
      "playerId": 76
    },
    {
      "timestamp": 1757893988174,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893988175,
      "category": "submit_flag",
      "value": 144,
      "playerId": 15
    },
    {
      "timestamp": 1757893988175,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893988175,
      "category": "submit_flag",
      "value": 62,
      "playerId": 97
    },
    {
      "timestamp": 1757893988175,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893988183,
      "category": "submit_flag",
      "value": 111,
      "playerId": 32
    },
    {
      "timestamp": 1757893988183,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893988183,
      "category": "submit_flag",
      "value": 111,
      "playerId": 32
    },
    {
      "timestamp": 1757893988183,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893988197,
      "category": "submit_flag",
      "value": 164,
      "playerId": 15
    },
    {
      "timestamp": 1757893988198,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893988204,
      "category": "submit_flag",
      "value": 287,
      "playerId": 71
    },
    {
      "timestamp": 1757893988204,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893988214,
      "category": "submit_flag",
      "value": 188,
      "playerId": 76
    },
    {
      "timestamp": 1757893988214,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893988219,
      "category": "submit_flag",
      "value": 242,
      "playerId": 15
    },
    {
      "timestamp": 1757893988220,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893988233,
      "category": "submit_flag",
      "value": 316,
      "playerId": 11
    },
    {
      "timestamp": 1757893988233,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893988237,
      "category": "submit_flag",
      "value": 66,
      "playerId": 73
    },
    {
      "timestamp": 1757893988237,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893988241,
      "category": "submit_flag",
      "value": 53,
      "playerId": 14
    },
    {
      "timestamp": 1757893988241,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893988246,
      "category": "submit_flag",
      "value": 327,
      "playerId": 11
    },
    {
      "timestamp": 1757893988246,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893988253,
      "category": "submit_flag",
      "value": 187,
      "playerId": 42
    },
    {
      "timestamp": 1757893988253,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893988260,
      "category": "static_file_loaded",
      "value": 1065,
      "playerId": 27
    },
    {
      "timestamp": 1757893988265,
      "category": "submit_flag",
      "value": 59,
      "playerId": 14
    },
    {
      "timestamp": 1757893988265,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893988273,
      "category": "submit_flag",
      "value": 330,
      "playerId": 25
    },
    {
      "timestamp": 1757893988273,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893988275,
      "category": "submit_flag",
      "value": 65,
      "playerId": 73
    },
    {
      "timestamp": 1757893988275,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893988280,
      "category": "submit_flag",
      "value": 49,
      "playerId": 14
    },
    {
      "timestamp": 1757893988280,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893988293,
      "category": "submit_flag",
      "value": 53,
      "playerId": 43
    },
    {
      "timestamp": 1757893988293,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893988295,
      "category": "submit_flag",
      "value": 57,
      "playerId": 23
    },
    {
      "timestamp": 1757893988295,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893988305,
      "category": "submit_flag",
      "value": 56,
      "playerId": 58
    },
    {
      "timestamp": 1757893988305,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893988308,
      "category": "submit_flag",
      "value": 56,
      "playerId": 77
    },
    {
      "timestamp": 1757893988308,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893988312,
      "category": "submit_flag",
      "value": 44,
      "playerId": 77
    },
    {
      "timestamp": 1757893988313,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893988315,
      "category": "websocket_connected",
      "value": 175,
      "playerId": 49
    },
    {
      "timestamp": 1757893988320,
      "category": "submit_flag",
      "value": 352,
      "playerId": 71
    },
    {
      "timestamp": 1757893988320,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893988325,
      "category": "submit_flag",
      "value": 61,
      "playerId": 58
    },
    {
      "timestamp": 1757893988326,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893988327,
      "category": "submit_flag",
      "value": 63,
      "playerId": 43
    },
    {
      "timestamp": 1757893988328,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893988331,
      "category": "submit_flag",
      "value": 63,
      "playerId": 43
    },
    {
      "timestamp": 1757893988331,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893988332,
      "category": "submit_flag",
      "value": 68,
      "playerId": 33
    },
    {
      "timestamp": 1757893988332,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893988346,
      "category": "submit_flag",
      "value": 53,
      "playerId": 39
    },
    {
      "timestamp": 1757893988346,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893988348,
      "category": "submit_flag",
      "value": 56,
      "playerId": 1
    },
    {
      "timestamp": 1757893988349,
      "category": "flag_correct",
      "value": 1,
      "playerId": 1
    },
    {
      "timestamp": 1757893988351,
      "category": "submit_flag",
      "value": 56,
      "playerId": 18
    },
    {
      "timestamp": 1757893988351,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893988366,
      "category": "submit_flag",
      "value": 52,
      "playerId": 45
    },
    {
      "timestamp": 1757893988366,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893988367,
      "category": "websocket_connected",
      "value": 152,
      "playerId": 94
    },
    {
      "timestamp": 1757893988371,
      "category": "submit_flag",
      "value": 65,
      "playerId": 2
    },
    {
      "timestamp": 1757893988371,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893988387,
      "category": "submit_flag",
      "value": 73,
      "playerId": 77
    },
    {
      "timestamp": 1757893988387,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893988392,
      "category": "submit_flag",
      "value": 62,
      "playerId": 23
    },
    {
      "timestamp": 1757893988392,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893988393,
      "category": "submit_flag",
      "value": 71,
      "playerId": 18
    },
    {
      "timestamp": 1757893988393,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893988394,
      "category": "submit_flag",
      "value": 72,
      "playerId": 23
    },
    {
      "timestamp": 1757893988394,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893988396,
      "category": "submit_flag",
      "value": 58,
      "playerId": 18
    },
    {
      "timestamp": 1757893988396,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893988399,
      "category": "submit_flag",
      "value": 73,
      "playerId": 2
    },
    {
      "timestamp": 1757893988399,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893988400,
      "category": "submit_flag",
      "value": 82,
      "playerId": 99
    },
    {
      "timestamp": 1757893988400,
      "category": "flag_correct",
      "value": 1,
      "playerId": 99
    },
    {
      "timestamp": 1757893988401,
      "category": "submit_flag",
      "value": 58,
      "playerId": 28
    },
    {
      "timestamp": 1757893988401,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893988403,
      "category": "submit_flag",
      "value": 58,
      "playerId": 28
    },
    {
      "timestamp": 1757893988403,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893988407,
      "category": "submit_flag",
      "value": 58,
      "playerId": 62
    },
    {
      "timestamp": 1757893988407,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893988411,
      "category": "submit_flag",
      "value": 60,
      "playerId": 92
    },
    {
      "timestamp": 1757893988411,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893988412,
      "category": "submit_flag",
      "value": 79,
      "playerId": 92
    },
    {
      "timestamp": 1757893988412,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893988413,
      "category": "submit_flag",
      "value": 51,
      "playerId": 92
    },
    {
      "timestamp": 1757893988413,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893988414,
      "category": "login_attempt",
      "value": 52,
      "playerId": 27
    },
    {
      "timestamp": 1757893988414,
      "category": "login_success",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893988418,
      "category": "submit_flag",
      "value": 52,
      "playerId": 51
    },
    {
      "timestamp": 1757893988418,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893988426,
      "category": "submit_flag",
      "value": 50,
      "playerId": 45
    },
    {
      "timestamp": 1757893988426,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893988428,
      "category": "submit_flag",
      "value": 67,
      "playerId": 2
    },
    {
      "timestamp": 1757893988428,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893988432,
      "category": "submit_flag",
      "value": 55,
      "playerId": 39
    },
    {
      "timestamp": 1757893988432,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893988432,
      "category": "submit_flag",
      "value": 62,
      "playerId": 62
    },
    {
      "timestamp": 1757893988432,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893988435,
      "category": "submit_flag",
      "value": 66,
      "playerId": 88
    },
    {
      "timestamp": 1757893988435,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893988437,
      "category": "submit_flag",
      "value": 51,
      "playerId": 88
    },
    {
      "timestamp": 1757893988437,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893988438,
      "category": "submit_flag",
      "value": 55,
      "playerId": 39
    },
    {
      "timestamp": 1757893988438,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893988445,
      "category": "static_file_loaded",
      "value": 1147,
      "playerId": 59
    },
    {
      "timestamp": 1757893988461,
      "category": "static_file_loaded",
      "value": 20267,
      "playerId": 52
    },
    {
      "timestamp": 1757893988468,
      "category": "submit_flag",
      "value": 72,
      "playerId": 62
    },
    {
      "timestamp": 1757893988468,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893988469,
      "category": "submit_flag",
      "value": 59,
      "playerId": 21
    },
    {
      "timestamp": 1757893988470,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893988473,
      "category": "submit_flag",
      "value": 44,
      "playerId": 51
    },
    {
      "timestamp": 1757893988473,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893988482,
      "category": "submit_flag",
      "value": 57,
      "playerId": 88
    },
    {
      "timestamp": 1757893988482,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893988485,
      "category": "submit_flag",
      "value": 51,
      "playerId": 21
    },
    {
      "timestamp": 1757893988485,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893988498,
      "category": "submit_flag",
      "value": 51,
      "playerId": 19
    },
    {
      "timestamp": 1757893988498,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893988541,
      "category": "submit_flag",
      "value": 335,
      "playerId": 73
    },
    {
      "timestamp": 1757893988542,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893988549,
      "category": "submit_flag",
      "value": 67,
      "playerId": 19
    },
    {
      "timestamp": 1757893988549,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893988559,
      "category": "submit_flag",
      "value": 66,
      "playerId": 19
    },
    {
      "timestamp": 1757893988559,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893988562,
      "category": "submit_flag",
      "value": 165,
      "playerId": 45
    },
    {
      "timestamp": 1757893988563,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893988577,
      "category": "submit_flag",
      "value": 56,
      "playerId": 63
    },
    {
      "timestamp": 1757893988577,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893988586,
      "category": "static_file_loaded",
      "value": 20671,
      "playerId": 95
    },
    {
      "timestamp": 1757893988588,
      "category": "submit_flag",
      "value": 60,
      "playerId": 63
    },
    {
      "timestamp": 1757893988588,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893988595,
      "category": "submit_flag",
      "value": 60,
      "playerId": 63
    },
    {
      "timestamp": 1757893988595,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893988597,
      "category": "login_attempt",
      "value": 52,
      "playerId": 59
    },
    {
      "timestamp": 1757893988597,
      "category": "login_success",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893988598,
      "category": "submit_flag",
      "value": 342,
      "playerId": 33
    },
    {
      "timestamp": 1757893988598,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893988602,
      "category": "websocket_connected",
      "value": 454,
      "playerId": 82
    },
    {
      "timestamp": 1757893988607,
      "category": "submit_flag",
      "value": 319,
      "playerId": 58
    },
    {
      "timestamp": 1757893988607,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893988619,
      "category": "submit_flag",
      "value": 166,
      "playerId": 21
    },
    {
      "timestamp": 1757893988620,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893988650,
      "category": "submit_flag",
      "value": 593,
      "playerId": 42
    },
    {
      "timestamp": 1757893988650,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893988652,
      "category": "submit_flag",
      "value": 164,
      "playerId": 100
    },
    {
      "timestamp": 1757893988652,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893988685,
      "category": "static_file_loaded",
      "value": 21023,
      "playerId": 57
    },
    {
      "timestamp": 1757893988695,
      "category": "websocket_connected",
      "value": 228,
      "playerId": 27
    },
    {
      "timestamp": 1757893988702,
      "category": "submit_flag",
      "value": 219,
      "playerId": 100
    },
    {
      "timestamp": 1757893988702,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893988734,
      "category": "static_file_loaded",
      "value": 1792,
      "playerId": 38
    },
    {
      "timestamp": 1757893988745,
      "category": "submit_flag",
      "value": 55,
      "playerId": 11
    },
    {
      "timestamp": 1757893988745,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893988772,
      "category": "submit_flag",
      "value": 55,
      "playerId": 49
    },
    {
      "timestamp": 1757893988772,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893988778,
      "category": "submit_flag",
      "value": 58,
      "playerId": 49
    },
    {
      "timestamp": 1757893988778,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893988780,
      "category": "submit_flag",
      "value": 56,
      "playerId": 49
    },
    {
      "timestamp": 1757893988780,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893988788,
      "category": "submit_flag",
      "value": 58,
      "playerId": 11
    },
    {
      "timestamp": 1757893988788,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893988796,
      "category": "submit_flag",
      "value": 66,
      "playerId": 11
    },
    {
      "timestamp": 1757893988796,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893988821,
      "category": "websocket_connected",
      "value": 174,
      "playerId": 59
    },
    {
      "timestamp": 1757893988825,
      "category": "submit_flag",
      "value": 60,
      "playerId": 64
    },
    {
      "timestamp": 1757893988825,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893988841,
      "category": "submit_flag",
      "value": 55,
      "playerId": 64
    },
    {
      "timestamp": 1757893988841,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893988889,
      "category": "login_attempt",
      "value": 54,
      "playerId": 38
    },
    {
      "timestamp": 1757893988889,
      "category": "login_success",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893988916,
      "category": "static_file_loaded",
      "value": 19887,
      "playerId": 80
    },
    {
      "timestamp": 1757893988933,
      "category": "submit_flag",
      "value": 59,
      "playerId": 45
    },
    {
      "timestamp": 1757893988933,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893988943,
      "category": "submit_flag",
      "value": 56,
      "playerId": 45
    },
    {
      "timestamp": 1757893988943,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893988948,
      "category": "submit_flag",
      "value": 55,
      "playerId": 58
    },
    {
      "timestamp": 1757893988948,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893988952,
      "category": "submit_flag",
      "value": 57,
      "playerId": 44
    },
    {
      "timestamp": 1757893988952,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893988957,
      "category": "submit_flag",
      "value": 50,
      "playerId": 44
    },
    {
      "timestamp": 1757893988957,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893988962,
      "category": "submit_flag",
      "value": 57,
      "playerId": 44
    },
    {
      "timestamp": 1757893988962,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893988964,
      "category": "submit_flag",
      "value": 507,
      "playerId": 100
    },
    {
      "timestamp": 1757893988964,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893988965,
      "category": "submit_flag",
      "value": 864,
      "playerId": 97
    },
    {
      "timestamp": 1757893988965,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893988967,
      "category": "submit_flag",
      "value": 53,
      "playerId": 58
    },
    {
      "timestamp": 1757893988967,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893989003,
      "category": "static_file_loaded",
      "value": 1784,
      "playerId": 66
    },
    {
      "timestamp": 1757893989004,
      "category": "submit_flag",
      "value": 53,
      "playerId": 2
    },
    {
      "timestamp": 1757893989004,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893989013,
      "category": "submit_flag",
      "value": 50,
      "playerId": 77
    },
    {
      "timestamp": 1757893989013,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893989018,
      "category": "submit_flag",
      "value": 57,
      "playerId": 45
    },
    {
      "timestamp": 1757893989018,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893989024,
      "category": "static_file_loaded",
      "value": 21062,
      "playerId": 36
    },
    {
      "timestamp": 1757893989026,
      "category": "submit_flag",
      "value": 72,
      "playerId": 2
    },
    {
      "timestamp": 1757893989026,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893989028,
      "category": "submit_flag",
      "value": 64,
      "playerId": 25
    },
    {
      "timestamp": 1757893989028,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893989029,
      "category": "submit_flag",
      "value": 50,
      "playerId": 77
    },
    {
      "timestamp": 1757893989029,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893989030,
      "category": "submit_flag",
      "value": 55,
      "playerId": 58
    },
    {
      "timestamp": 1757893989030,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893989031,
      "category": "submit_flag",
      "value": 59,
      "playerId": 25
    },
    {
      "timestamp": 1757893989031,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893989038,
      "category": "submit_flag",
      "value": 56,
      "playerId": 85
    },
    {
      "timestamp": 1757893989038,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893989038,
      "category": "submit_flag",
      "value": 54,
      "playerId": 32
    },
    {
      "timestamp": 1757893989038,
      "category": "flag_correct",
      "value": 1,
      "playerId": 32
    },
    {
      "timestamp": 1757893989050,
      "category": "submit_flag",
      "value": 60,
      "playerId": 25
    },
    {
      "timestamp": 1757893989050,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893989051,
      "category": "submit_flag",
      "value": 53,
      "playerId": 27
    },
    {
      "timestamp": 1757893989051,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893989055,
      "category": "submit_flag",
      "value": 47,
      "playerId": 51
    },
    {
      "timestamp": 1757893989055,
      "category": "flag_correct",
      "value": 1,
      "playerId": 51
    },
    {
      "timestamp": 1757893989057,
      "category": "submit_flag",
      "value": 61,
      "playerId": 2
    },
    {
      "timestamp": 1757893989057,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893989060,
      "category": "submit_flag",
      "value": 49,
      "playerId": 27
    },
    {
      "timestamp": 1757893989060,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893989079,
      "category": "submit_flag",
      "value": 60,
      "playerId": 85
    },
    {
      "timestamp": 1757893989079,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893989085,
      "category": "submit_flag",
      "value": 82,
      "playerId": 77
    },
    {
      "timestamp": 1757893989085,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893989090,
      "category": "submit_flag",
      "value": 56,
      "playerId": 85
    },
    {
      "timestamp": 1757893989090,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893989093,
      "category": "submit_flag",
      "value": 59,
      "playerId": 39
    },
    {
      "timestamp": 1757893989093,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893989110,
      "category": "static_file_loaded",
      "value": 21446,
      "playerId": 61
    },
    {
      "timestamp": 1757893989147,
      "category": "submit_flag",
      "value": 62,
      "playerId": 94
    },
    {
      "timestamp": 1757893989147,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893989154,
      "category": "submit_flag",
      "value": 62,
      "playerId": 73
    },
    {
      "timestamp": 1757893989154,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893989154,
      "category": "submit_flag",
      "value": 56,
      "playerId": 39
    },
    {
      "timestamp": 1757893989154,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893989157,
      "category": "websocket_connected",
      "value": 218,
      "playerId": 38
    },
    {
      "timestamp": 1757893989161,
      "category": "login_attempt",
      "value": 57,
      "playerId": 66
    },
    {
      "timestamp": 1757893989161,
      "category": "login_success",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893989162,
      "category": "submit_flag",
      "value": 856,
      "playerId": 28
    },
    {
      "timestamp": 1757893989162,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893989176,
      "category": "static_file_loaded",
      "value": 1286,
      "playerId": 84
    },
    {
      "timestamp": 1757893989187,
      "category": "submit_flag",
      "value": 58,
      "playerId": 39
    },
    {
      "timestamp": 1757893989187,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893989192,
      "category": "submit_flag",
      "value": 72,
      "playerId": 20
    },
    {
      "timestamp": 1757893989192,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893989195,
      "category": "submit_flag",
      "value": 55,
      "playerId": 54
    },
    {
      "timestamp": 1757893989195,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893989197,
      "category": "submit_flag",
      "value": 56,
      "playerId": 94
    },
    {
      "timestamp": 1757893989197,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893989197,
      "category": "submit_flag",
      "value": 56,
      "playerId": 54
    },
    {
      "timestamp": 1757893989198,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893989198,
      "category": "submit_flag",
      "value": 61,
      "playerId": 59
    },
    {
      "timestamp": 1757893989198,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893989204,
      "category": "submit_flag",
      "value": 91,
      "playerId": 94
    },
    {
      "timestamp": 1757893989204,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893989208,
      "category": "submit_flag",
      "value": 50,
      "playerId": 73
    },
    {
      "timestamp": 1757893989208,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893989210,
      "category": "submit_flag",
      "value": 50,
      "playerId": 71
    },
    {
      "timestamp": 1757893989210,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893989216,
      "category": "submit_flag",
      "value": 48,
      "playerId": 82
    },
    {
      "timestamp": 1757893989216,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893989230,
      "category": "submit_flag",
      "value": 57,
      "playerId": 71
    },
    {
      "timestamp": 1757893989230,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893989234,
      "category": "submit_flag",
      "value": 59,
      "playerId": 82
    },
    {
      "timestamp": 1757893989234,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893989235,
      "category": "submit_flag",
      "value": 52,
      "playerId": 82
    },
    {
      "timestamp": 1757893989235,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893989237,
      "category": "submit_flag",
      "value": 127,
      "playerId": 20
    },
    {
      "timestamp": 1757893989238,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893989252,
      "category": "submit_flag",
      "value": 45,
      "playerId": 23
    },
    {
      "timestamp": 1757893989252,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893989265,
      "category": "submit_flag",
      "value": 130,
      "playerId": 73
    },
    {
      "timestamp": 1757893989265,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893989267,
      "category": "submit_flag",
      "value": 50,
      "playerId": 19
    },
    {
      "timestamp": 1757893989267,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893989271,
      "category": "submit_flag",
      "value": 54,
      "playerId": 23
    },
    {
      "timestamp": 1757893989271,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893989289,
      "category": "submit_flag",
      "value": 164,
      "playerId": 54
    },
    {
      "timestamp": 1757893989289,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893989296,
      "category": "submit_flag",
      "value": 59,
      "playerId": 23
    },
    {
      "timestamp": 1757893989296,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893989304,
      "category": "submit_flag",
      "value": 71,
      "playerId": 59
    },
    {
      "timestamp": 1757893989304,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893989305,
      "category": "submit_flag",
      "value": 58,
      "playerId": 19
    },
    {
      "timestamp": 1757893989305,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893989307,
      "category": "submit_flag",
      "value": 73,
      "playerId": 59
    },
    {
      "timestamp": 1757893989307,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893989314,
      "category": "submit_flag",
      "value": 73,
      "playerId": 71
    },
    {
      "timestamp": 1757893989314,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893989331,
      "category": "submit_flag",
      "value": 323,
      "playerId": 27
    },
    {
      "timestamp": 1757893989331,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893989333,
      "category": "submit_flag",
      "value": 60,
      "playerId": 15
    },
    {
      "timestamp": 1757893989333,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893989335,
      "category": "submit_flag",
      "value": 64,
      "playerId": 19
    },
    {
      "timestamp": 1757893989335,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893989344,
      "category": "login_attempt",
      "value": 65,
      "playerId": 84
    },
    {
      "timestamp": 1757893989344,
      "category": "login_success",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893989344,
      "category": "submit_flag",
      "value": 65,
      "playerId": 42
    },
    {
      "timestamp": 1757893989344,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893989345,
      "category": "submit_flag",
      "value": 315,
      "playerId": 20
    },
    {
      "timestamp": 1757893989345,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893989348,
      "category": "submit_flag",
      "value": 52,
      "playerId": 15
    },
    {
      "timestamp": 1757893989348,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893989349,
      "category": "submit_flag",
      "value": 59,
      "playerId": 33
    },
    {
      "timestamp": 1757893989349,
      "category": "flag_correct",
      "value": 1,
      "playerId": 33
    },
    {
      "timestamp": 1757893989354,
      "category": "submit_flag",
      "value": 43,
      "playerId": 42
    },
    {
      "timestamp": 1757893989354,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893989364,
      "category": "static_file_loaded",
      "value": 777,
      "playerId": 95
    },
    {
      "timestamp": 1757893989373,
      "category": "websocket_connected",
      "value": 161,
      "playerId": 66
    },
    {
      "timestamp": 1757893989387,
      "category": "submit_flag",
      "value": 59,
      "playerId": 62
    },
    {
      "timestamp": 1757893989387,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893989387,
      "category": "submit_flag",
      "value": 56,
      "playerId": 42
    },
    {
      "timestamp": 1757893989387,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893989388,
      "category": "static_file_loaded",
      "value": 1945,
      "playerId": 37
    },
    {
      "timestamp": 1757893989409,
      "category": "submit_flag",
      "value": 49,
      "playerId": 100
    },
    {
      "timestamp": 1757893989409,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893989418,
      "category": "submit_flag",
      "value": 49,
      "playerId": 21
    },
    {
      "timestamp": 1757893989418,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893989420,
      "category": "submit_flag",
      "value": 56,
      "playerId": 100
    },
    {
      "timestamp": 1757893989420,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893989429,
      "category": "submit_flag",
      "value": 49,
      "playerId": 62
    },
    {
      "timestamp": 1757893989429,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893989432,
      "category": "submit_flag",
      "value": 49,
      "playerId": 88
    },
    {
      "timestamp": 1757893989432,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893989457,
      "category": "submit_flag",
      "value": 57,
      "playerId": 21
    },
    {
      "timestamp": 1757893989457,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893989460,
      "category": "submit_flag",
      "value": 55,
      "playerId": 88
    },
    {
      "timestamp": 1757893989460,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893989465,
      "category": "submit_flag",
      "value": 58,
      "playerId": 92
    },
    {
      "timestamp": 1757893989465,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893989477,
      "category": "static_file_loaded",
      "value": 792,
      "playerId": 57
    },
    {
      "timestamp": 1757893989483,
      "category": "submit_flag",
      "value": 51,
      "playerId": 43
    },
    {
      "timestamp": 1757893989483,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893989484,
      "category": "submit_flag",
      "value": 64,
      "playerId": 60
    },
    {
      "timestamp": 1757893989484,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893989488,
      "category": "submit_flag",
      "value": 58,
      "playerId": 92
    },
    {
      "timestamp": 1757893989488,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893989491,
      "category": "submit_flag",
      "value": 57,
      "playerId": 21
    },
    {
      "timestamp": 1757893989491,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893989498,
      "category": "submit_flag",
      "value": 62,
      "playerId": 43
    },
    {
      "timestamp": 1757893989498,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893989504,
      "category": "submit_flag",
      "value": 68,
      "playerId": 88
    },
    {
      "timestamp": 1757893989504,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893989516,
      "category": "submit_flag",
      "value": 49,
      "playerId": 60
    },
    {
      "timestamp": 1757893989516,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893989526,
      "category": "submit_flag",
      "value": 67,
      "playerId": 100
    },
    {
      "timestamp": 1757893989526,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893989527,
      "category": "login_attempt",
      "value": 63,
      "playerId": 95
    },
    {
      "timestamp": 1757893989527,
      "category": "login_success",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893989540,
      "category": "submit_flag",
      "value": 62,
      "playerId": 38
    },
    {
      "timestamp": 1757893989540,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893989542,
      "category": "submit_flag",
      "value": 58,
      "playerId": 64
    },
    {
      "timestamp": 1757893989542,
      "category": "flag_correct",
      "value": 1,
      "playerId": 64
    },
    {
      "timestamp": 1757893989543,
      "category": "submit_flag",
      "value": 57,
      "playerId": 92
    },
    {
      "timestamp": 1757893989543,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893989551,
      "category": "submit_flag",
      "value": 69,
      "playerId": 93
    },
    {
      "timestamp": 1757893989551,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893989557,
      "category": "submit_flag",
      "value": 68,
      "playerId": 60
    },
    {
      "timestamp": 1757893989558,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893989559,
      "category": "login_attempt",
      "value": 69,
      "playerId": 37
    },
    {
      "timestamp": 1757893989559,
      "category": "login_success",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893989559,
      "category": "static_file_loaded",
      "value": 643,
      "playerId": 80
    },
    {
      "timestamp": 1757893989571,
      "category": "websocket_connected",
      "value": 176,
      "playerId": 84
    },
    {
      "timestamp": 1757893989585,
      "category": "submit_flag",
      "value": 52,
      "playerId": 38
    },
    {
      "timestamp": 1757893989585,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893989587,
      "category": "submit_flag",
      "value": 314,
      "playerId": 15
    },
    {
      "timestamp": 1757893989587,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893989605,
      "category": "submit_flag",
      "value": 51,
      "playerId": 2
    },
    {
      "timestamp": 1757893989605,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893989606,
      "category": "static_file_loaded",
      "value": 1721,
      "playerId": 90
    },
    {
      "timestamp": 1757893989608,
      "category": "submit_flag",
      "value": 54,
      "playerId": 25
    },
    {
      "timestamp": 1757893989608,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893989611,
      "category": "static_file_loaded",
      "value": 501,
      "playerId": 61
    },
    {
      "timestamp": 1757893989614,
      "category": "submit_flag",
      "value": 65,
      "playerId": 38
    },
    {
      "timestamp": 1757893989614,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893989627,
      "category": "submit_flag",
      "value": 63,
      "playerId": 93
    },
    {
      "timestamp": 1757893989627,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893989628,
      "category": "submit_flag",
      "value": 73,
      "playerId": 25
    },
    {
      "timestamp": 1757893989628,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893989631,
      "category": "submit_flag",
      "value": 77,
      "playerId": 93
    },
    {
      "timestamp": 1757893989631,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893989631,
      "category": "submit_flag",
      "value": 71,
      "playerId": 85
    },
    {
      "timestamp": 1757893989631,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893989632,
      "category": "submit_flag",
      "value": 65,
      "playerId": 63
    },
    {
      "timestamp": 1757893989632,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893989640,
      "category": "submit_flag",
      "value": 76,
      "playerId": 63
    },
    {
      "timestamp": 1757893989640,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893989645,
      "category": "login_attempt",
      "value": 69,
      "playerId": 57
    },
    {
      "timestamp": 1757893989645,
      "category": "login_success",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893989647,
      "category": "static_file_loaded",
      "value": 623,
      "playerId": 36
    },
    {
      "timestamp": 1757893989648,
      "category": "submit_flag",
      "value": 68,
      "playerId": 63
    },
    {
      "timestamp": 1757893989648,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893989649,
      "category": "submit_flag",
      "value": 65,
      "playerId": 2
    },
    {
      "timestamp": 1757893989649,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893989659,
      "category": "submit_flag",
      "value": 58,
      "playerId": 25
    },
    {
      "timestamp": 1757893989659,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893989663,
      "category": "submit_flag",
      "value": 48,
      "playerId": 44
    },
    {
      "timestamp": 1757893989663,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893989671,
      "category": "submit_flag",
      "value": 59,
      "playerId": 85
    },
    {
      "timestamp": 1757893989671,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893989684,
      "category": "submit_flag",
      "value": 51,
      "playerId": 44
    },
    {
      "timestamp": 1757893989684,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893989685,
      "category": "submit_flag",
      "value": 52,
      "playerId": 97
    },
    {
      "timestamp": 1757893989685,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893989712,
      "category": "submit_flag",
      "value": 68,
      "playerId": 97
    },
    {
      "timestamp": 1757893989712,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893989714,
      "category": "submit_flag",
      "value": 64,
      "playerId": 76
    },
    {
      "timestamp": 1757893989714,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893989716,
      "category": "submit_flag",
      "value": 64,
      "playerId": 28
    },
    {
      "timestamp": 1757893989716,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893989718,
      "category": "login_attempt",
      "value": 59,
      "playerId": 80
    },
    {
      "timestamp": 1757893989718,
      "category": "login_success",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893989719,
      "category": "submit_flag",
      "value": 62,
      "playerId": 97
    },
    {
      "timestamp": 1757893989719,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893989724,
      "category": "submit_flag",
      "value": 67,
      "playerId": 45
    },
    {
      "timestamp": 1757893989724,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893989726,
      "category": "submit_flag",
      "value": 74,
      "playerId": 44
    },
    {
      "timestamp": 1757893989726,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893989732,
      "category": "submit_flag",
      "value": 62,
      "playerId": 27
    },
    {
      "timestamp": 1757893989732,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893989742,
      "category": "submit_flag",
      "value": 85,
      "playerId": 76
    },
    {
      "timestamp": 1757893989742,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893989743,
      "category": "submit_flag",
      "value": 67,
      "playerId": 73
    },
    {
      "timestamp": 1757893989743,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893989746,
      "category": "submit_flag",
      "value": 54,
      "playerId": 66
    },
    {
      "timestamp": 1757893989746,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893989749,
      "category": "submit_flag",
      "value": 55,
      "playerId": 28
    },
    {
      "timestamp": 1757893989749,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893989749,
      "category": "submit_flag",
      "value": 60,
      "playerId": 76
    },
    {
      "timestamp": 1757893989749,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893989755,
      "category": "websocket_connected",
      "value": 177,
      "playerId": 95
    },
    {
      "timestamp": 1757893989756,
      "category": "submit_flag",
      "value": 48,
      "playerId": 77
    },
    {
      "timestamp": 1757893989756,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893989762,
      "category": "submit_flag",
      "value": 70,
      "playerId": 23
    },
    {
      "timestamp": 1757893989762,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893989765,
      "category": "submit_flag",
      "value": 62,
      "playerId": 27
    },
    {
      "timestamp": 1757893989765,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893989770,
      "category": "submit_flag",
      "value": 61,
      "playerId": 58
    },
    {
      "timestamp": 1757893989770,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893989775,
      "category": "submit_flag",
      "value": 66,
      "playerId": 66
    },
    {
      "timestamp": 1757893989775,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893989777,
      "category": "submit_flag",
      "value": 74,
      "playerId": 77
    },
    {
      "timestamp": 1757893989777,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893989783,
      "category": "submit_flag",
      "value": 66,
      "playerId": 73
    },
    {
      "timestamp": 1757893989783,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893989784,
      "category": "submit_flag",
      "value": 64,
      "playerId": 58
    },
    {
      "timestamp": 1757893989784,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893989786,
      "category": "submit_flag",
      "value": 64,
      "playerId": 45
    },
    {
      "timestamp": 1757893989786,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893989791,
      "category": "submit_flag",
      "value": 101,
      "playerId": 58
    },
    {
      "timestamp": 1757893989791,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893989794,
      "category": "submit_flag",
      "value": 68,
      "playerId": 94
    },
    {
      "timestamp": 1757893989794,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893989797,
      "category": "submit_flag",
      "value": 68,
      "playerId": 73
    },
    {
      "timestamp": 1757893989797,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893989798,
      "category": "login_attempt",
      "value": 50,
      "playerId": 36
    },
    {
      "timestamp": 1757893989798,
      "category": "login_success",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893989803,
      "category": "submit_flag",
      "value": 70,
      "playerId": 23
    },
    {
      "timestamp": 1757893989803,
      "category": "flag_correct",
      "value": 1,
      "playerId": 23
    },
    {
      "timestamp": 1757893989807,
      "category": "submit_flag",
      "value": 77,
      "playerId": 20
    },
    {
      "timestamp": 1757893989807,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893989812,
      "category": "submit_flag",
      "value": 64,
      "playerId": 18
    },
    {
      "timestamp": 1757893989812,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893989816,
      "category": "static_file_loaded",
      "value": 22157,
      "playerId": 78
    },
    {
      "timestamp": 1757893989817,
      "category": "submit_flag",
      "value": 53,
      "playerId": 18
    },
    {
      "timestamp": 1757893989817,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893989819,
      "category": "submit_flag",
      "value": 88,
      "playerId": 94
    },
    {
      "timestamp": 1757893989819,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893989820,
      "category": "submit_flag",
      "value": 57,
      "playerId": 59
    },
    {
      "timestamp": 1757893989820,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893989821,
      "category": "submit_flag",
      "value": 135,
      "playerId": 27
    },
    {
      "timestamp": 1757893989821,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893989828,
      "category": "submit_flag",
      "value": 62,
      "playerId": 49
    },
    {
      "timestamp": 1757893989828,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893989833,
      "category": "submit_flag",
      "value": 61,
      "playerId": 39
    },
    {
      "timestamp": 1757893989833,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893989834,
      "category": "submit_flag",
      "value": 98,
      "playerId": 71
    },
    {
      "timestamp": 1757893989834,
      "category": "flag_correct",
      "value": 1,
      "playerId": 71
    },
    {
      "timestamp": 1757893989838,
      "category": "submit_flag",
      "value": 60,
      "playerId": 20
    },
    {
      "timestamp": 1757893989838,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893989839,
      "category": "submit_flag",
      "value": 54,
      "playerId": 59
    },
    {
      "timestamp": 1757893989839,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893989844,
      "category": "submit_flag",
      "value": 54,
      "playerId": 94
    },
    {
      "timestamp": 1757893989844,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893989848,
      "category": "submit_flag",
      "value": 63,
      "playerId": 49
    },
    {
      "timestamp": 1757893989848,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893989853,
      "category": "submit_flag",
      "value": 74,
      "playerId": 82
    },
    {
      "timestamp": 1757893989853,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893989855,
      "category": "submit_flag",
      "value": 71,
      "playerId": 39
    },
    {
      "timestamp": 1757893989855,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893989857,
      "category": "submit_flag",
      "value": 78,
      "playerId": 82
    },
    {
      "timestamp": 1757893989857,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893989861,
      "category": "submit_flag",
      "value": 65,
      "playerId": 49
    },
    {
      "timestamp": 1757893989861,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893989870,
      "category": "submit_flag",
      "value": 91,
      "playerId": 66
    },
    {
      "timestamp": 1757893989870,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893989873,
      "category": "websocket_connected",
      "value": 172,
      "playerId": 57
    },
    {
      "timestamp": 1757893989877,
      "category": "submit_flag",
      "value": 87,
      "playerId": 39
    },
    {
      "timestamp": 1757893989877,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893989889,
      "category": "submit_flag",
      "value": 71,
      "playerId": 59
    },
    {
      "timestamp": 1757893989889,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893989893,
      "category": "submit_flag",
      "value": 67,
      "playerId": 20
    },
    {
      "timestamp": 1757893989893,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893989915,
      "category": "submit_flag",
      "value": 85,
      "playerId": 42
    },
    {
      "timestamp": 1757893989915,
      "category": "flag_correct",
      "value": 1,
      "playerId": 42
    },
    {
      "timestamp": 1757893989921,
      "category": "static_file_loaded",
      "value": 21711,
      "playerId": 68
    },
    {
      "timestamp": 1757893989967,
      "category": "submit_flag",
      "value": 331,
      "playerId": 28
    },
    {
      "timestamp": 1757893989967,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893989974,
      "category": "static_file_loaded",
      "value": 21728,
      "playerId": 34
    },
    {
      "timestamp": 1757893989983,
      "category": "submit_flag",
      "value": 67,
      "playerId": 62
    },
    {
      "timestamp": 1757893989983,
      "category": "flag_correct",
      "value": 1,
      "playerId": 62
    },
    {
      "timestamp": 1757893989995,
      "category": "websocket_connected",
      "value": 224,
      "playerId": 80
    },
    {
      "timestamp": 1757893990007,
      "category": "websocket_connected",
      "value": 158,
      "playerId": 36
    },
    {
      "timestamp": 1757893990016,
      "category": "static_file_loaded",
      "value": 21803,
      "playerId": 74
    },
    {
      "timestamp": 1757893990022,
      "category": "submit_flag",
      "value": 308,
      "playerId": 82
    },
    {
      "timestamp": 1757893990022,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893990034,
      "category": "static_file_loaded",
      "value": 1573,
      "playerId": 52
    },
    {
      "timestamp": 1757893990045,
      "category": "submit_flag",
      "value": 333,
      "playerId": 77
    },
    {
      "timestamp": 1757893990045,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893990060,
      "category": "submit_flag",
      "value": 52,
      "playerId": 84
    },
    {
      "timestamp": 1757893990060,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893990062,
      "category": "login_attempt",
      "value": 350,
      "playerId": 61
    },
    {
      "timestamp": 1757893990062,
      "category": "login_success",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893990063,
      "category": "submit_flag",
      "value": 45,
      "playerId": 21
    },
    {
      "timestamp": 1757893990063,
      "category": "flag_correct",
      "value": 1,
      "playerId": 21
    },
    {
      "timestamp": 1757893990076,
      "category": "submit_flag",
      "value": 57,
      "playerId": 84
    },
    {
      "timestamp": 1757893990076,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893990081,
      "category": "submit_flag",
      "value": 49,
      "playerId": 84
    },
    {
      "timestamp": 1757893990081,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893990090,
      "category": "submit_flag",
      "value": 60,
      "playerId": 11
    },
    {
      "timestamp": 1757893990090,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893990119,
      "category": "submit_flag",
      "value": 61,
      "playerId": 60
    },
    {
      "timestamp": 1757893990119,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893990125,
      "category": "submit_flag",
      "value": 67,
      "playerId": 25
    },
    {
      "timestamp": 1757893990125,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893990132,
      "category": "submit_flag",
      "value": 80,
      "playerId": 25
    },
    {
      "timestamp": 1757893990132,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893990137,
      "category": "submit_flag",
      "value": 71,
      "playerId": 92
    },
    {
      "timestamp": 1757893990137,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893990144,
      "category": "submit_flag",
      "value": 77,
      "playerId": 95
    },
    {
      "timestamp": 1757893990144,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893990152,
      "category": "submit_flag",
      "value": 76,
      "playerId": 60
    },
    {
      "timestamp": 1757893990152,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893990155,
      "category": "submit_flag",
      "value": 97,
      "playerId": 92
    },
    {
      "timestamp": 1757893990155,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893990155,
      "category": "submit_flag",
      "value": 54,
      "playerId": 15
    },
    {
      "timestamp": 1757893990155,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893990158,
      "category": "websocket_connected",
      "value": 549,
      "playerId": 37
    },
    {
      "timestamp": 1757893990161,
      "category": "submit_flag",
      "value": 58,
      "playerId": 93
    },
    {
      "timestamp": 1757893990161,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893990165,
      "category": "submit_flag",
      "value": 80,
      "playerId": 11
    },
    {
      "timestamp": 1757893990165,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893990177,
      "category": "login_attempt",
      "value": 468,
      "playerId": 90
    },
    {
      "timestamp": 1757893990177,
      "category": "login_success",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893990184,
      "category": "submit_flag",
      "value": 105,
      "playerId": 88
    },
    {
      "timestamp": 1757893990184,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893990193,
      "category": "submit_flag",
      "value": 366,
      "playerId": 18
    },
    {
      "timestamp": 1757893990193,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893990195,
      "category": "submit_flag",
      "value": 68,
      "playerId": 95
    },
    {
      "timestamp": 1757893990195,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893990196,
      "category": "login_attempt",
      "value": 61,
      "playerId": 52
    },
    {
      "timestamp": 1757893990196,
      "category": "login_success",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893990197,
      "category": "submit_flag",
      "value": 68,
      "playerId": 54
    },
    {
      "timestamp": 1757893990197,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893990206,
      "category": "submit_flag",
      "value": 71,
      "playerId": 44
    },
    {
      "timestamp": 1757893990206,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893990207,
      "category": "submit_flag",
      "value": 72,
      "playerId": 45
    },
    {
      "timestamp": 1757893990207,
      "category": "flag_correct",
      "value": 1,
      "playerId": 45
    },
    {
      "timestamp": 1757893990210,
      "category": "submit_flag",
      "value": 76,
      "playerId": 88
    },
    {
      "timestamp": 1757893990210,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893990211,
      "category": "submit_flag",
      "value": 76,
      "playerId": 95
    },
    {
      "timestamp": 1757893990212,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893990212,
      "category": "submit_flag",
      "value": 85,
      "playerId": 44
    },
    {
      "timestamp": 1757893990212,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893990226,
      "category": "submit_flag",
      "value": 76,
      "playerId": 15
    },
    {
      "timestamp": 1757893990226,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893990238,
      "category": "submit_flag",
      "value": 80,
      "playerId": 97
    },
    {
      "timestamp": 1757893990238,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893990239,
      "category": "submit_flag",
      "value": 83,
      "playerId": 93
    },
    {
      "timestamp": 1757893990239,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893990240,
      "category": "submit_flag",
      "value": 70,
      "playerId": 14
    },
    {
      "timestamp": 1757893990240,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893990240,
      "category": "submit_flag",
      "value": 77,
      "playerId": 44
    },
    {
      "timestamp": 1757893990240,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893990241,
      "category": "submit_flag",
      "value": 65,
      "playerId": 97
    },
    {
      "timestamp": 1757893990241,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893990256,
      "category": "submit_flag",
      "value": 67,
      "playerId": 54
    },
    {
      "timestamp": 1757893990256,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893990263,
      "category": "submit_flag",
      "value": 60,
      "playerId": 57
    },
    {
      "timestamp": 1757893990263,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893990274,
      "category": "submit_flag",
      "value": 62,
      "playerId": 57
    },
    {
      "timestamp": 1757893990274,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893990281,
      "category": "submit_flag",
      "value": 53,
      "playerId": 27
    },
    {
      "timestamp": 1757893990281,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893990288,
      "category": "submit_flag",
      "value": 61,
      "playerId": 38
    },
    {
      "timestamp": 1757893990288,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893990293,
      "category": "submit_flag",
      "value": 64,
      "playerId": 27
    },
    {
      "timestamp": 1757893990293,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893990295,
      "category": "submit_flag",
      "value": 67,
      "playerId": 57
    },
    {
      "timestamp": 1757893990295,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893990302,
      "category": "websocket_connected",
      "value": 189,
      "playerId": 61
    },
    {
      "timestamp": 1757893990305,
      "category": "submit_flag",
      "value": 64,
      "playerId": 27
    },
    {
      "timestamp": 1757893990306,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893990318,
      "category": "submit_flag",
      "value": 77,
      "playerId": 14
    },
    {
      "timestamp": 1757893990318,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893990331,
      "category": "submit_flag",
      "value": 81,
      "playerId": 43
    },
    {
      "timestamp": 1757893990331,
      "category": "flag_correct",
      "value": 1,
      "playerId": 43
    },
    {
      "timestamp": 1757893990343,
      "category": "submit_flag",
      "value": 70,
      "playerId": 38
    },
    {
      "timestamp": 1757893990343,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893990356,
      "category": "submit_flag",
      "value": 62,
      "playerId": 38
    },
    {
      "timestamp": 1757893990356,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893990367,
      "category": "submit_flag",
      "value": 59,
      "playerId": 85
    },
    {
      "timestamp": 1757893990367,
      "category": "flag_correct",
      "value": 1,
      "playerId": 85
    },
    {
      "timestamp": 1757893990379,
      "category": "static_file_loaded",
      "value": 22193,
      "playerId": 46
    },
    {
      "timestamp": 1757893990395,
      "category": "submit_flag",
      "value": 61,
      "playerId": 36
    },
    {
      "timestamp": 1757893990395,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893990404,
      "category": "submit_flag",
      "value": 70,
      "playerId": 80
    },
    {
      "timestamp": 1757893990404,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893990409,
      "category": "submit_flag",
      "value": 74,
      "playerId": 36
    },
    {
      "timestamp": 1757893990409,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893990414,
      "category": "submit_flag",
      "value": 69,
      "playerId": 100
    },
    {
      "timestamp": 1757893990414,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893990418,
      "category": "websocket_connected",
      "value": 189,
      "playerId": 90
    },
    {
      "timestamp": 1757893990430,
      "category": "websocket_connected",
      "value": 181,
      "playerId": 52
    },
    {
      "timestamp": 1757893990430,
      "category": "submit_flag",
      "value": 62,
      "playerId": 20
    },
    {
      "timestamp": 1757893990430,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893990436,
      "category": "static_file_loaded",
      "value": 620,
      "playerId": 78
    },
    {
      "timestamp": 1757893990446,
      "category": "submit_flag",
      "value": 73,
      "playerId": 49
    },
    {
      "timestamp": 1757893990446,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893990447,
      "category": "submit_flag",
      "value": 55,
      "playerId": 36
    },
    {
      "timestamp": 1757893990447,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893990449,
      "category": "submit_flag",
      "value": 69,
      "playerId": 80
    },
    {
      "timestamp": 1757893990449,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893990453,
      "category": "submit_flag",
      "value": 55,
      "playerId": 49
    },
    {
      "timestamp": 1757893990453,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893990455,
      "category": "submit_flag",
      "value": 82,
      "playerId": 49
    },
    {
      "timestamp": 1757893990455,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893990456,
      "category": "submit_flag",
      "value": 58,
      "playerId": 76
    },
    {
      "timestamp": 1757893990456,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893990462,
      "category": "submit_flag",
      "value": 64,
      "playerId": 80
    },
    {
      "timestamp": 1757893990462,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893990466,
      "category": "submit_flag",
      "value": 73,
      "playerId": 76
    },
    {
      "timestamp": 1757893990466,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893990468,
      "category": "submit_flag",
      "value": 62,
      "playerId": 20
    },
    {
      "timestamp": 1757893990469,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893990480,
      "category": "submit_flag",
      "value": 329,
      "playerId": 15
    },
    {
      "timestamp": 1757893990480,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893990484,
      "category": "submit_flag",
      "value": 61,
      "playerId": 19
    },
    {
      "timestamp": 1757893990484,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893990496,
      "category": "submit_flag",
      "value": 57,
      "playerId": 19
    },
    {
      "timestamp": 1757893990496,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893990508,
      "category": "submit_flag",
      "value": 119,
      "playerId": 100
    },
    {
      "timestamp": 1757893990508,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893990549,
      "category": "submit_flag",
      "value": 61,
      "playerId": 94
    },
    {
      "timestamp": 1757893990549,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893990551,
      "category": "submit_flag",
      "value": 48,
      "playerId": 37
    },
    {
      "timestamp": 1757893990551,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893990557,
      "category": "submit_flag",
      "value": 54,
      "playerId": 94
    },
    {
      "timestamp": 1757893990557,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893990562,
      "category": "submit_flag",
      "value": 55,
      "playerId": 94
    },
    {
      "timestamp": 1757893990562,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893990573,
      "category": "submit_flag",
      "value": 315,
      "playerId": 14
    },
    {
      "timestamp": 1757893990573,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893990586,
      "category": "submit_flag",
      "value": 60,
      "playerId": 37
    },
    {
      "timestamp": 1757893990586,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893990588,
      "category": "submit_flag",
      "value": 52,
      "playerId": 37
    },
    {
      "timestamp": 1757893990588,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893990596,
      "category": "login_attempt",
      "value": 53,
      "playerId": 78
    },
    {
      "timestamp": 1757893990596,
      "category": "login_success",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893990606,
      "category": "submit_flag",
      "value": 64,
      "playerId": 2
    },
    {
      "timestamp": 1757893990606,
      "category": "flag_correct",
      "value": 1,
      "playerId": 2
    },
    {
      "timestamp": 1757893990628,
      "category": "submit_flag",
      "value": 60,
      "playerId": 77
    },
    {
      "timestamp": 1757893990628,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893990636,
      "category": "submit_flag",
      "value": 55,
      "playerId": 77
    },
    {
      "timestamp": 1757893990636,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893990671,
      "category": "submit_flag",
      "value": 56,
      "playerId": 63
    },
    {
      "timestamp": 1757893990671,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893990680,
      "category": "submit_flag",
      "value": 64,
      "playerId": 61
    },
    {
      "timestamp": 1757893990680,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893990681,
      "category": "submit_flag",
      "value": 59,
      "playerId": 77
    },
    {
      "timestamp": 1757893990681,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893990687,
      "category": "submit_flag",
      "value": 60,
      "playerId": 61
    },
    {
      "timestamp": 1757893990687,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893990695,
      "category": "submit_flag",
      "value": 61,
      "playerId": 82
    },
    {
      "timestamp": 1757893990695,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893990697,
      "category": "submit_flag",
      "value": 59,
      "playerId": 82
    },
    {
      "timestamp": 1757893990697,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893990717,
      "category": "submit_flag",
      "value": 55,
      "playerId": 93
    },
    {
      "timestamp": 1757893990717,
      "category": "flag_correct",
      "value": 1,
      "playerId": 93
    },
    {
      "timestamp": 1757893990734,
      "category": "submit_flag",
      "value": 353,
      "playerId": 20
    },
    {
      "timestamp": 1757893990734,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893990746,
      "category": "submit_flag",
      "value": 60,
      "playerId": 61
    },
    {
      "timestamp": 1757893990746,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893990751,
      "category": "submit_flag",
      "value": 69,
      "playerId": 82
    },
    {
      "timestamp": 1757893990751,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893990766,
      "category": "submit_flag",
      "value": 81,
      "playerId": 63
    },
    {
      "timestamp": 1757893990766,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893990798,
      "category": "submit_flag",
      "value": 62,
      "playerId": 84
    },
    {
      "timestamp": 1757893990798,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893990803,
      "category": "submit_flag",
      "value": 51,
      "playerId": 57
    },
    {
      "timestamp": 1757893990803,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893990809,
      "category": "submit_flag",
      "value": 64,
      "playerId": 59
    },
    {
      "timestamp": 1757893990809,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893990814,
      "category": "submit_flag",
      "value": 65,
      "playerId": 90
    },
    {
      "timestamp": 1757893990814,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893990824,
      "category": "submit_flag",
      "value": 60,
      "playerId": 90
    },
    {
      "timestamp": 1757893990824,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893990830,
      "category": "submit_flag",
      "value": 62,
      "playerId": 59
    },
    {
      "timestamp": 1757893990830,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893990831,
      "category": "submit_flag",
      "value": 58,
      "playerId": 58
    },
    {
      "timestamp": 1757893990831,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893990832,
      "category": "submit_flag",
      "value": 54,
      "playerId": 90
    },
    {
      "timestamp": 1757893990833,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893990834,
      "category": "submit_flag",
      "value": 68,
      "playerId": 84
    },
    {
      "timestamp": 1757893990834,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893990840,
      "category": "submit_flag",
      "value": 54,
      "playerId": 18
    },
    {
      "timestamp": 1757893990840,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893990841,
      "category": "submit_flag",
      "value": 49,
      "playerId": 18
    },
    {
      "timestamp": 1757893990841,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893990844,
      "category": "submit_flag",
      "value": 57,
      "playerId": 57
    },
    {
      "timestamp": 1757893990844,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893990851,
      "category": "submit_flag",
      "value": 55,
      "playerId": 58
    },
    {
      "timestamp": 1757893990851,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893990857,
      "category": "submit_flag",
      "value": 64,
      "playerId": 11
    },
    {
      "timestamp": 1757893990857,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893990859,
      "category": "submit_flag",
      "value": 71,
      "playerId": 84
    },
    {
      "timestamp": 1757893990859,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893990870,
      "category": "submit_flag",
      "value": 63,
      "playerId": 18
    },
    {
      "timestamp": 1757893990870,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893990883,
      "category": "submit_flag",
      "value": 66,
      "playerId": 66
    },
    {
      "timestamp": 1757893990883,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893990884,
      "category": "submit_flag",
      "value": 67,
      "playerId": 52
    },
    {
      "timestamp": 1757893990884,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893990885,
      "category": "submit_flag",
      "value": 66,
      "playerId": 58
    },
    {
      "timestamp": 1757893990885,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893990885,
      "category": "submit_flag",
      "value": 75,
      "playerId": 88
    },
    {
      "timestamp": 1757893990885,
      "category": "flag_correct",
      "value": 1,
      "playerId": 88
    },
    {
      "timestamp": 1757893990885,
      "category": "submit_flag",
      "value": 60,
      "playerId": 66
    },
    {
      "timestamp": 1757893990885,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893990892,
      "category": "submit_flag",
      "value": 69,
      "playerId": 28
    },
    {
      "timestamp": 1757893990892,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893990893,
      "category": "submit_flag",
      "value": 67,
      "playerId": 57
    },
    {
      "timestamp": 1757893990893,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893990895,
      "category": "submit_flag",
      "value": 65,
      "playerId": 59
    },
    {
      "timestamp": 1757893990895,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893990909,
      "category": "submit_flag",
      "value": 59,
      "playerId": 39
    },
    {
      "timestamp": 1757893990909,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893990923,
      "category": "websocket_connected",
      "value": 276,
      "playerId": 78
    },
    {
      "timestamp": 1757893990930,
      "category": "submit_flag",
      "value": 68,
      "playerId": 52
    },
    {
      "timestamp": 1757893990930,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893990933,
      "category": "submit_flag",
      "value": 55,
      "playerId": 39
    },
    {
      "timestamp": 1757893990933,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893990936,
      "category": "submit_flag",
      "value": 58,
      "playerId": 52
    },
    {
      "timestamp": 1757893990936,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893990937,
      "category": "submit_flag",
      "value": 60,
      "playerId": 66
    },
    {
      "timestamp": 1757893990938,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893990952,
      "category": "submit_flag",
      "value": 64,
      "playerId": 28
    },
    {
      "timestamp": 1757893990952,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893990968,
      "category": "submit_flag",
      "value": 55,
      "playerId": 54
    },
    {
      "timestamp": 1757893990968,
      "category": "flag_correct",
      "value": 1,
      "playerId": 54
    },
    {
      "timestamp": 1757893991000,
      "category": "submit_flag",
      "value": 328,
      "playerId": 63
    },
    {
      "timestamp": 1757893991000,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893991109,
      "category": "submit_flag",
      "value": 53,
      "playerId": 80
    },
    {
      "timestamp": 1757893991109,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893991114,
      "category": "static_file_loaded",
      "value": 1193,
      "playerId": 68
    },
    {
      "timestamp": 1757893991126,
      "category": "submit_flag",
      "value": 52,
      "playerId": 11
    },
    {
      "timestamp": 1757893991126,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893991139,
      "category": "submit_flag",
      "value": 48,
      "playerId": 73
    },
    {
      "timestamp": 1757893991140,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893991146,
      "category": "submit_flag",
      "value": 56,
      "playerId": 97
    },
    {
      "timestamp": 1757893991146,
      "category": "flag_correct",
      "value": 1,
      "playerId": 97
    },
    {
      "timestamp": 1757893991153,
      "category": "submit_flag",
      "value": 55,
      "playerId": 73
    },
    {
      "timestamp": 1757893991153,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893991179,
      "category": "submit_flag",
      "value": 63,
      "playerId": 80
    },
    {
      "timestamp": 1757893991179,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893991184,
      "category": "submit_flag",
      "value": 64,
      "playerId": 19
    },
    {
      "timestamp": 1757893991184,
      "category": "flag_correct",
      "value": 1,
      "playerId": 19
    },
    {
      "timestamp": 1757893991188,
      "category": "submit_flag",
      "value": 61,
      "playerId": 80
    },
    {
      "timestamp": 1757893991188,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893991192,
      "category": "submit_flag",
      "value": 51,
      "playerId": 27
    },
    {
      "timestamp": 1757893991192,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893991202,
      "category": "submit_flag",
      "value": 82,
      "playerId": 100
    },
    {
      "timestamp": 1757893991202,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893991204,
      "category": "submit_flag",
      "value": 326,
      "playerId": 39
    },
    {
      "timestamp": 1757893991204,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893991205,
      "category": "submit_flag",
      "value": 63,
      "playerId": 27
    },
    {
      "timestamp": 1757893991205,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893991214,
      "category": "submit_flag",
      "value": 86,
      "playerId": 73
    },
    {
      "timestamp": 1757893991214,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893991217,
      "category": "submit_flag",
      "value": 98,
      "playerId": 38
    },
    {
      "timestamp": 1757893991217,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893991219,
      "category": "submit_flag",
      "value": 53,
      "playerId": 100
    },
    {
      "timestamp": 1757893991219,
      "category": "flag_correct",
      "value": 1,
      "playerId": 100
    },
    {
      "timestamp": 1757893991224,
      "category": "submit_flag",
      "value": 336,
      "playerId": 25
    },
    {
      "timestamp": 1757893991224,
      "category": "flag_correct",
      "value": 1,
      "playerId": 25
    },
    {
      "timestamp": 1757893991259,
      "category": "login_attempt",
      "value": 44,
      "playerId": 68
    },
    {
      "timestamp": 1757893991259,
      "category": "login_success",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893991273,
      "category": "submit_flag",
      "value": 58,
      "playerId": 38
    },
    {
      "timestamp": 1757893991273,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893991376,
      "category": "submit_flag",
      "value": 74,
      "playerId": 49
    },
    {
      "timestamp": 1757893991376,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893991382,
      "category": "submit_flag",
      "value": 85,
      "playerId": 44
    },
    {
      "timestamp": 1757893991383,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893991384,
      "category": "submit_flag",
      "value": 99,
      "playerId": 78
    },
    {
      "timestamp": 1757893991384,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893991386,
      "category": "submit_flag",
      "value": 77,
      "playerId": 14
    },
    {
      "timestamp": 1757893991386,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893991390,
      "category": "submit_flag",
      "value": 67,
      "playerId": 18
    },
    {
      "timestamp": 1757893991390,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893991390,
      "category": "submit_flag",
      "value": 65,
      "playerId": 78
    },
    {
      "timestamp": 1757893991390,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893991392,
      "category": "submit_flag",
      "value": 63,
      "playerId": 78
    },
    {
      "timestamp": 1757893991392,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893991392,
      "category": "submit_flag",
      "value": 62,
      "playerId": 18
    },
    {
      "timestamp": 1757893991392,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893991394,
      "category": "submit_flag",
      "value": 66,
      "playerId": 49
    },
    {
      "timestamp": 1757893991394,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893991398,
      "category": "submit_flag",
      "value": 58,
      "playerId": 36
    },
    {
      "timestamp": 1757893991399,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893991403,
      "category": "submit_flag",
      "value": 77,
      "playerId": 14
    },
    {
      "timestamp": 1757893991403,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893991406,
      "category": "submit_flag",
      "value": 58,
      "playerId": 66
    },
    {
      "timestamp": 1757893991406,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893991409,
      "category": "submit_flag",
      "value": 123,
      "playerId": 44
    },
    {
      "timestamp": 1757893991410,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893991417,
      "category": "submit_flag",
      "value": 67,
      "playerId": 36
    },
    {
      "timestamp": 1757893991417,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893991418,
      "category": "submit_flag",
      "value": 60,
      "playerId": 49
    },
    {
      "timestamp": 1757893991418,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893991420,
      "category": "submit_flag",
      "value": 62,
      "playerId": 14
    },
    {
      "timestamp": 1757893991420,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893991422,
      "category": "submit_flag",
      "value": 44,
      "playerId": 20
    },
    {
      "timestamp": 1757893991422,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893991434,
      "category": "submit_flag",
      "value": 71,
      "playerId": 44
    },
    {
      "timestamp": 1757893991434,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893991435,
      "category": "submit_flag",
      "value": 66,
      "playerId": 11
    },
    {
      "timestamp": 1757893991435,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893991445,
      "category": "submit_flag",
      "value": 69,
      "playerId": 66
    },
    {
      "timestamp": 1757893991445,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893991448,
      "category": "submit_flag",
      "value": 69,
      "playerId": 66
    },
    {
      "timestamp": 1757893991448,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893991455,
      "category": "submit_flag",
      "value": 313,
      "playerId": 27
    },
    {
      "timestamp": 1757893991455,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893991461,
      "category": "submit_flag",
      "value": 64,
      "playerId": 36
    },
    {
      "timestamp": 1757893991461,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893991479,
      "category": "submit_flag",
      "value": 67,
      "playerId": 61
    },
    {
      "timestamp": 1757893991479,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893991486,
      "category": "submit_flag",
      "value": 67,
      "playerId": 15
    },
    {
      "timestamp": 1757893991486,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893991490,
      "category": "websocket_connected",
      "value": 180,
      "playerId": 68
    },
    {
      "timestamp": 1757893991491,
      "category": "submit_flag",
      "value": 61,
      "playerId": 84
    },
    {
      "timestamp": 1757893991491,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893991496,
      "category": "submit_flag",
      "value": 54,
      "playerId": 61
    },
    {
      "timestamp": 1757893991496,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893991505,
      "category": "submit_flag",
      "value": 70,
      "playerId": 20
    },
    {
      "timestamp": 1757893991505,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893991508,
      "category": "submit_flag",
      "value": 59,
      "playerId": 28
    },
    {
      "timestamp": 1757893991509,
      "category": "flag_correct",
      "value": 1,
      "playerId": 28
    },
    {
      "timestamp": 1757893991511,
      "category": "submit_flag",
      "value": 61,
      "playerId": 15
    },
    {
      "timestamp": 1757893991511,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893991512,
      "category": "submit_flag",
      "value": 315,
      "playerId": 38
    },
    {
      "timestamp": 1757893991512,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893991513,
      "category": "submit_flag",
      "value": 55,
      "playerId": 84
    },
    {
      "timestamp": 1757893991513,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893991517,
      "category": "submit_flag",
      "value": 59,
      "playerId": 15
    },
    {
      "timestamp": 1757893991517,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893991523,
      "category": "submit_flag",
      "value": 54,
      "playerId": 77
    },
    {
      "timestamp": 1757893991523,
      "category": "flag_correct",
      "value": 1,
      "playerId": 77
    },
    {
      "timestamp": 1757893991533,
      "category": "submit_flag",
      "value": 62,
      "playerId": 60
    },
    {
      "timestamp": 1757893991533,
      "category": "flag_correct",
      "value": 1,
      "playerId": 60
    },
    {
      "timestamp": 1757893991545,
      "category": "submit_flag",
      "value": 95,
      "playerId": 84
    },
    {
      "timestamp": 1757893991545,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893991567,
      "category": "submit_flag",
      "value": 118,
      "playerId": 61
    },
    {
      "timestamp": 1757893991567,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893991596,
      "category": "static_file_loaded",
      "value": 1622,
      "playerId": 34
    },
    {
      "timestamp": 1757893991627,
      "category": "submit_flag",
      "value": 60,
      "playerId": 76
    },
    {
      "timestamp": 1757893991627,
      "category": "flag_correct",
      "value": 1,
      "playerId": 76
    },
    {
      "timestamp": 1757893991641,
      "category": "submit_flag",
      "value": 330,
      "playerId": 18
    },
    {
      "timestamp": 1757893991641,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893991658,
      "category": "submit_flag",
      "value": 58,
      "playerId": 95
    },
    {
      "timestamp": 1757893991658,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893991672,
      "category": "submit_flag",
      "value": 46,
      "playerId": 95
    },
    {
      "timestamp": 1757893991672,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893991681,
      "category": "submit_flag",
      "value": 59,
      "playerId": 92
    },
    {
      "timestamp": 1757893991681,
      "category": "flag_correct",
      "value": 1,
      "playerId": 92
    },
    {
      "timestamp": 1757893991718,
      "category": "submit_flag",
      "value": 50,
      "playerId": 11
    },
    {
      "timestamp": 1757893991718,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893991737,
      "category": "submit_flag",
      "value": 54,
      "playerId": 90
    },
    {
      "timestamp": 1757893991737,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893991739,
      "category": "submit_flag",
      "value": 56,
      "playerId": 95
    },
    {
      "timestamp": 1757893991739,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893991746,
      "category": "login_attempt",
      "value": 49,
      "playerId": 34
    },
    {
      "timestamp": 1757893991746,
      "category": "login_success",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893991749,
      "category": "submit_flag",
      "value": 54,
      "playerId": 90
    },
    {
      "timestamp": 1757893991749,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893991762,
      "category": "submit_flag",
      "value": 52,
      "playerId": 63
    },
    {
      "timestamp": 1757893991762,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893991772,
      "category": "submit_flag",
      "value": 50,
      "playerId": 90
    },
    {
      "timestamp": 1757893991772,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893991791,
      "category": "submit_flag",
      "value": 62,
      "playerId": 58
    },
    {
      "timestamp": 1757893991791,
      "category": "flag_correct",
      "value": 1,
      "playerId": 58
    },
    {
      "timestamp": 1757893991802,
      "category": "static_file_loaded",
      "value": 1786,
      "playerId": 74
    },
    {
      "timestamp": 1757893991804,
      "category": "submit_flag",
      "value": 48,
      "playerId": 63
    },
    {
      "timestamp": 1757893991804,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893991839,
      "category": "submit_flag",
      "value": 61,
      "playerId": 63
    },
    {
      "timestamp": 1757893991839,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893991844,
      "category": "submit_flag",
      "value": 50,
      "playerId": 94
    },
    {
      "timestamp": 1757893991844,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893991849,
      "category": "submit_flag",
      "value": 63,
      "playerId": 94
    },
    {
      "timestamp": 1757893991849,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893991902,
      "category": "submit_flag",
      "value": 62,
      "playerId": 37
    },
    {
      "timestamp": 1757893991902,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893991916,
      "category": "submit_flag",
      "value": 52,
      "playerId": 68
    },
    {
      "timestamp": 1757893991916,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893991925,
      "category": "submit_flag",
      "value": 64,
      "playerId": 52
    },
    {
      "timestamp": 1757893991925,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893991925,
      "category": "submit_flag",
      "value": 56,
      "playerId": 68
    },
    {
      "timestamp": 1757893991925,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893991929,
      "category": "submit_flag",
      "value": 59,
      "playerId": 94
    },
    {
      "timestamp": 1757893991929,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893991930,
      "category": "submit_flag",
      "value": 70,
      "playerId": 37
    },
    {
      "timestamp": 1757893991930,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893991938,
      "category": "submit_flag",
      "value": 52,
      "playerId": 37
    },
    {
      "timestamp": 1757893991938,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893991940,
      "category": "submit_flag",
      "value": 82,
      "playerId": 52
    },
    {
      "timestamp": 1757893991940,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893991943,
      "category": "submit_flag",
      "value": 58,
      "playerId": 52
    },
    {
      "timestamp": 1757893991943,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893991947,
      "category": "submit_flag",
      "value": 59,
      "playerId": 49
    },
    {
      "timestamp": 1757893991947,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893991954,
      "category": "login_attempt",
      "value": 52,
      "playerId": 74
    },
    {
      "timestamp": 1757893991954,
      "category": "login_success",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893991971,
      "category": "submit_flag",
      "value": 63,
      "playerId": 73
    },
    {
      "timestamp": 1757893991971,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893991975,
      "category": "submit_flag",
      "value": 56,
      "playerId": 68
    },
    {
      "timestamp": 1757893991975,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893991991,
      "category": "submit_flag",
      "value": 62,
      "playerId": 73
    },
    {
      "timestamp": 1757893991991,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893991995,
      "category": "submit_flag",
      "value": 61,
      "playerId": 14
    },
    {
      "timestamp": 1757893991995,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893992002,
      "category": "submit_flag",
      "value": 57,
      "playerId": 73
    },
    {
      "timestamp": 1757893992002,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893992004,
      "category": "websocket_connected",
      "value": 206,
      "playerId": 34
    },
    {
      "timestamp": 1757893992008,
      "category": "submit_flag",
      "value": 78,
      "playerId": 49
    },
    {
      "timestamp": 1757893992009,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893992010,
      "category": "static_file_loaded",
      "value": 24342,
      "playerId": 56
    },
    {
      "timestamp": 1757893992014,
      "category": "submit_flag",
      "value": 62,
      "playerId": 20
    },
    {
      "timestamp": 1757893992014,
      "category": "flag_correct",
      "value": 1,
      "playerId": 20
    },
    {
      "timestamp": 1757893992017,
      "category": "submit_flag",
      "value": 64,
      "playerId": 11
    },
    {
      "timestamp": 1757893992018,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893992023,
      "category": "submit_flag",
      "value": 56,
      "playerId": 14
    },
    {
      "timestamp": 1757893992023,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893992046,
      "category": "submit_flag",
      "value": 56,
      "playerId": 14
    },
    {
      "timestamp": 1757893992046,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893992084,
      "category": "submit_flag",
      "value": 62,
      "playerId": 44
    },
    {
      "timestamp": 1757893992085,
      "category": "flag_correct",
      "value": 1,
      "playerId": 44
    },
    {
      "timestamp": 1757893992105,
      "category": "submit_flag",
      "value": 50,
      "playerId": 57
    },
    {
      "timestamp": 1757893992105,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893992125,
      "category": "submit_flag",
      "value": 55,
      "playerId": 61
    },
    {
      "timestamp": 1757893992125,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893992131,
      "category": "submit_flag",
      "value": 60,
      "playerId": 59
    },
    {
      "timestamp": 1757893992131,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893992138,
      "category": "submit_flag",
      "value": 62,
      "playerId": 78
    },
    {
      "timestamp": 1757893992138,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893992141,
      "category": "submit_flag",
      "value": 62,
      "playerId": 78
    },
    {
      "timestamp": 1757893992141,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893992143,
      "category": "submit_flag",
      "value": 61,
      "playerId": 78
    },
    {
      "timestamp": 1757893992143,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893992155,
      "category": "submit_flag",
      "value": 60,
      "playerId": 59
    },
    {
      "timestamp": 1757893992155,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893992163,
      "category": "submit_flag",
      "value": 62,
      "playerId": 57
    },
    {
      "timestamp": 1757893992163,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893992170,
      "category": "submit_flag",
      "value": 51,
      "playerId": 61
    },
    {
      "timestamp": 1757893992170,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893992173,
      "category": "websocket_connected",
      "value": 167,
      "playerId": 74
    },
    {
      "timestamp": 1757893992193,
      "category": "submit_flag",
      "value": 63,
      "playerId": 57
    },
    {
      "timestamp": 1757893992193,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893992194,
      "category": "submit_flag",
      "value": 68,
      "playerId": 80
    },
    {
      "timestamp": 1757893992194,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893992201,
      "category": "submit_flag",
      "value": 66,
      "playerId": 59
    },
    {
      "timestamp": 1757893992201,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893992203,
      "category": "submit_flag",
      "value": 71,
      "playerId": 61
    },
    {
      "timestamp": 1757893992203,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893992207,
      "category": "submit_flag",
      "value": 75,
      "playerId": 80
    },
    {
      "timestamp": 1757893992207,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893992215,
      "category": "submit_flag",
      "value": 65,
      "playerId": 84
    },
    {
      "timestamp": 1757893992215,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893992219,
      "category": "submit_flag",
      "value": 62,
      "playerId": 82
    },
    {
      "timestamp": 1757893992219,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893992231,
      "category": "submit_flag",
      "value": 67,
      "playerId": 39
    },
    {
      "timestamp": 1757893992231,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893992232,
      "category": "submit_flag",
      "value": 58,
      "playerId": 27
    },
    {
      "timestamp": 1757893992232,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893992236,
      "category": "submit_flag",
      "value": 61,
      "playerId": 84
    },
    {
      "timestamp": 1757893992236,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893992239,
      "category": "submit_flag",
      "value": 67,
      "playerId": 84
    },
    {
      "timestamp": 1757893992239,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893992240,
      "category": "submit_flag",
      "value": 63,
      "playerId": 27
    },
    {
      "timestamp": 1757893992240,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893992245,
      "category": "submit_flag",
      "value": 56,
      "playerId": 82
    },
    {
      "timestamp": 1757893992245,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893992260,
      "category": "submit_flag",
      "value": 65,
      "playerId": 36
    },
    {
      "timestamp": 1757893992260,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893992265,
      "category": "submit_flag",
      "value": 62,
      "playerId": 39
    },
    {
      "timestamp": 1757893992265,
      "category": "flag_correct",
      "value": 1,
      "playerId": 39
    },
    {
      "timestamp": 1757893992269,
      "category": "submit_flag",
      "value": 61,
      "playerId": 82
    },
    {
      "timestamp": 1757893992269,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893992276,
      "category": "submit_flag",
      "value": 79,
      "playerId": 36
    },
    {
      "timestamp": 1757893992276,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893992278,
      "category": "static_file_loaded",
      "value": 1899,
      "playerId": 46
    },
    {
      "timestamp": 1757893992282,
      "category": "submit_flag",
      "value": 53,
      "playerId": 27
    },
    {
      "timestamp": 1757893992282,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893992288,
      "category": "submit_flag",
      "value": 50,
      "playerId": 38
    },
    {
      "timestamp": 1757893992288,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893992290,
      "category": "submit_flag",
      "value": 94,
      "playerId": 36
    },
    {
      "timestamp": 1757893992290,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893992294,
      "category": "submit_flag",
      "value": 47,
      "playerId": 11
    },
    {
      "timestamp": 1757893992294,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893992305,
      "category": "submit_flag",
      "value": 50,
      "playerId": 38
    },
    {
      "timestamp": 1757893992305,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893992308,
      "category": "submit_flag",
      "value": 52,
      "playerId": 38
    },
    {
      "timestamp": 1757893992308,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893992330,
      "category": "static_file_loaded",
      "value": 320,
      "playerId": 56
    },
    {
      "timestamp": 1757893992348,
      "category": "submit_flag",
      "value": 48,
      "playerId": 94
    },
    {
      "timestamp": 1757893992348,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893992357,
      "category": "submit_flag",
      "value": 58,
      "playerId": 66
    },
    {
      "timestamp": 1757893992357,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893992367,
      "category": "submit_flag",
      "value": 49,
      "playerId": 66
    },
    {
      "timestamp": 1757893992367,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893992371,
      "category": "submit_flag",
      "value": 52,
      "playerId": 63
    },
    {
      "timestamp": 1757893992371,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893992376,
      "category": "submit_flag",
      "value": 54,
      "playerId": 52
    },
    {
      "timestamp": 1757893992376,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893992382,
      "category": "submit_flag",
      "value": 58,
      "playerId": 94
    },
    {
      "timestamp": 1757893992382,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893992389,
      "category": "submit_flag",
      "value": 52,
      "playerId": 63
    },
    {
      "timestamp": 1757893992389,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893992403,
      "category": "submit_flag",
      "value": 54,
      "playerId": 95
    },
    {
      "timestamp": 1757893992404,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893992417,
      "category": "submit_flag",
      "value": 68,
      "playerId": 66
    },
    {
      "timestamp": 1757893992417,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893992418,
      "category": "submit_flag",
      "value": 65,
      "playerId": 95
    },
    {
      "timestamp": 1757893992418,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893992419,
      "category": "submit_flag",
      "value": 77,
      "playerId": 95
    },
    {
      "timestamp": 1757893992419,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893992423,
      "category": "submit_flag",
      "value": 48,
      "playerId": 34
    },
    {
      "timestamp": 1757893992423,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893992428,
      "category": "login_attempt",
      "value": 49,
      "playerId": 46
    },
    {
      "timestamp": 1757893992428,
      "category": "login_success",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893992436,
      "category": "submit_flag",
      "value": 52,
      "playerId": 52
    },
    {
      "timestamp": 1757893992436,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893992440,
      "category": "submit_flag",
      "value": 50,
      "playerId": 90
    },
    {
      "timestamp": 1757893992440,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893992450,
      "category": "submit_flag",
      "value": 48,
      "playerId": 63
    },
    {
      "timestamp": 1757893992450,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893992454,
      "category": "submit_flag",
      "value": 48,
      "playerId": 68
    },
    {
      "timestamp": 1757893992454,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893992472,
      "category": "submit_flag",
      "value": 52,
      "playerId": 90
    },
    {
      "timestamp": 1757893992472,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893992478,
      "category": "submit_flag",
      "value": 66,
      "playerId": 34
    },
    {
      "timestamp": 1757893992478,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893992485,
      "category": "login_attempt",
      "value": 55,
      "playerId": 56
    },
    {
      "timestamp": 1757893992485,
      "category": "login_success",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893992492,
      "category": "submit_flag",
      "value": 59,
      "playerId": 34
    },
    {
      "timestamp": 1757893992492,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893992494,
      "category": "submit_flag",
      "value": 59,
      "playerId": 68
    },
    {
      "timestamp": 1757893992494,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893992494,
      "category": "submit_flag",
      "value": 56,
      "playerId": 37
    },
    {
      "timestamp": 1757893992494,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893992495,
      "category": "submit_flag",
      "value": 90,
      "playerId": 52
    },
    {
      "timestamp": 1757893992495,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893992495,
      "category": "submit_flag",
      "value": 49,
      "playerId": 73
    },
    {
      "timestamp": 1757893992496,
      "category": "flag_correct",
      "value": 1,
      "playerId": 73
    },
    {
      "timestamp": 1757893992501,
      "category": "submit_flag",
      "value": 55,
      "playerId": 15
    },
    {
      "timestamp": 1757893992501,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893992507,
      "category": "submit_flag",
      "value": 52,
      "playerId": 90
    },
    {
      "timestamp": 1757893992507,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893992509,
      "category": "submit_flag",
      "value": 50,
      "playerId": 37
    },
    {
      "timestamp": 1757893992509,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893992512,
      "category": "submit_flag",
      "value": 60,
      "playerId": 37
    },
    {
      "timestamp": 1757893992512,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893992514,
      "category": "submit_flag",
      "value": 53,
      "playerId": 15
    },
    {
      "timestamp": 1757893992514,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893992516,
      "category": "submit_flag",
      "value": 57,
      "playerId": 49
    },
    {
      "timestamp": 1757893992516,
      "category": "flag_correct",
      "value": 1,
      "playerId": 49
    },
    {
      "timestamp": 1757893992524,
      "category": "submit_flag",
      "value": 357,
      "playerId": 80
    },
    {
      "timestamp": 1757893992524,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893992533,
      "category": "submit_flag",
      "value": 54,
      "playerId": 68
    },
    {
      "timestamp": 1757893992533,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893992537,
      "category": "submit_flag",
      "value": 47,
      "playerId": 18
    },
    {
      "timestamp": 1757893992537,
      "category": "flag_correct",
      "value": 1,
      "playerId": 18
    },
    {
      "timestamp": 1757893992546,
      "category": "submit_flag",
      "value": 46,
      "playerId": 74
    },
    {
      "timestamp": 1757893992546,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893992556,
      "category": "submit_flag",
      "value": 67,
      "playerId": 78
    },
    {
      "timestamp": 1757893992556,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893992562,
      "category": "static_file_loaded",
      "value": 24149,
      "playerId": 70
    },
    {
      "timestamp": 1757893992563,
      "category": "submit_flag",
      "value": 56,
      "playerId": 14
    },
    {
      "timestamp": 1757893992563,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893992576,
      "category": "submit_flag",
      "value": 55,
      "playerId": 78
    },
    {
      "timestamp": 1757893992576,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893992608,
      "category": "submit_flag",
      "value": 53,
      "playerId": 61
    },
    {
      "timestamp": 1757893992608,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893992610,
      "category": "submit_flag",
      "value": 53,
      "playerId": 74
    },
    {
      "timestamp": 1757893992610,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893992618,
      "category": "submit_flag",
      "value": 53,
      "playerId": 74
    },
    {
      "timestamp": 1757893992618,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893992620,
      "category": "submit_flag",
      "value": 67,
      "playerId": 61
    },
    {
      "timestamp": 1757893992620,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893992629,
      "category": "submit_flag",
      "value": 47,
      "playerId": 14
    },
    {
      "timestamp": 1757893992629,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893992631,
      "category": "submit_flag",
      "value": 56,
      "playerId": 78
    },
    {
      "timestamp": 1757893992631,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893992635,
      "category": "submit_flag",
      "value": 52,
      "playerId": 59
    },
    {
      "timestamp": 1757893992635,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893992639,
      "category": "websocket_connected",
      "value": 159,
      "playerId": 46
    },
    {
      "timestamp": 1757893992649,
      "category": "submit_flag",
      "value": 56,
      "playerId": 82
    },
    {
      "timestamp": 1757893992649,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893992653,
      "category": "submit_flag",
      "value": 57,
      "playerId": 59
    },
    {
      "timestamp": 1757893992653,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893992664,
      "category": "submit_flag",
      "value": 55,
      "playerId": 61
    },
    {
      "timestamp": 1757893992665,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893992667,
      "category": "submit_flag",
      "value": 58,
      "playerId": 59
    },
    {
      "timestamp": 1757893992667,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893992675,
      "category": "submit_flag",
      "value": 70,
      "playerId": 82
    },
    {
      "timestamp": 1757893992675,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893992680,
      "category": "submit_flag",
      "value": 52,
      "playerId": 82
    },
    {
      "timestamp": 1757893992680,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893992705,
      "category": "websocket_connected",
      "value": 171,
      "playerId": 56
    },
    {
      "timestamp": 1757893992743,
      "category": "submit_flag",
      "value": 58,
      "playerId": 38
    },
    {
      "timestamp": 1757893992744,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893992748,
      "category": "submit_flag",
      "value": 60,
      "playerId": 57
    },
    {
      "timestamp": 1757893992748,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893992754,
      "category": "submit_flag",
      "value": 63,
      "playerId": 57
    },
    {
      "timestamp": 1757893992754,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893992758,
      "category": "submit_flag",
      "value": 95,
      "playerId": 84
    },
    {
      "timestamp": 1757893992758,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893992759,
      "category": "submit_flag",
      "value": 66,
      "playerId": 84
    },
    {
      "timestamp": 1757893992760,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893992766,
      "category": "submit_flag",
      "value": 55,
      "playerId": 38
    },
    {
      "timestamp": 1757893992766,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893992779,
      "category": "submit_flag",
      "value": 62,
      "playerId": 57
    },
    {
      "timestamp": 1757893992779,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893992799,
      "category": "submit_flag",
      "value": 62,
      "playerId": 36
    },
    {
      "timestamp": 1757893992799,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893992804,
      "category": "static_file_loaded",
      "value": 25136,
      "playerId": 47
    },
    {
      "timestamp": 1757893992807,
      "category": "static_file_loaded",
      "value": 24244,
      "playerId": 86
    },
    {
      "timestamp": 1757893992811,
      "category": "submit_flag",
      "value": 50,
      "playerId": 36
    },
    {
      "timestamp": 1757893992811,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893992858,
      "category": "submit_flag",
      "value": 52,
      "playerId": 95
    },
    {
      "timestamp": 1757893992858,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893992859,
      "category": "submit_flag",
      "value": 57,
      "playerId": 66
    },
    {
      "timestamp": 1757893992859,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893992871,
      "category": "submit_flag",
      "value": 54,
      "playerId": 90
    },
    {
      "timestamp": 1757893992872,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893992872,
      "category": "submit_flag",
      "value": 67,
      "playerId": 63
    },
    {
      "timestamp": 1757893992872,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893992885,
      "category": "submit_flag",
      "value": 68,
      "playerId": 36
    },
    {
      "timestamp": 1757893992885,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893992891,
      "category": "submit_flag",
      "value": 75,
      "playerId": 15
    },
    {
      "timestamp": 1757893992891,
      "category": "flag_correct",
      "value": 1,
      "playerId": 15
    },
    {
      "timestamp": 1757893992892,
      "category": "static_file_loaded",
      "value": 330,
      "playerId": 70
    },
    {
      "timestamp": 1757893992892,
      "category": "submit_flag",
      "value": 62,
      "playerId": 66
    },
    {
      "timestamp": 1757893992892,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893992893,
      "category": "submit_flag",
      "value": 53,
      "playerId": 90
    },
    {
      "timestamp": 1757893992893,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893992898,
      "category": "submit_flag",
      "value": 50,
      "playerId": 63
    },
    {
      "timestamp": 1757893992898,
      "category": "flag_correct",
      "value": 1,
      "playerId": 63
    },
    {
      "timestamp": 1757893992898,
      "category": "submit_flag",
      "value": 49,
      "playerId": 68
    },
    {
      "timestamp": 1757893992898,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893992906,
      "category": "submit_flag",
      "value": 56,
      "playerId": 52
    },
    {
      "timestamp": 1757893992906,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893992918,
      "category": "submit_flag",
      "value": 48,
      "playerId": 90
    },
    {
      "timestamp": 1757893992918,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893992923,
      "category": "submit_flag",
      "value": 63,
      "playerId": 95
    },
    {
      "timestamp": 1757893992924,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893992931,
      "category": "submit_flag",
      "value": 55,
      "playerId": 34
    },
    {
      "timestamp": 1757893992931,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893992939,
      "category": "submit_flag",
      "value": 69,
      "playerId": 80
    },
    {
      "timestamp": 1757893992939,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893992940,
      "category": "submit_flag",
      "value": 77,
      "playerId": 80
    },
    {
      "timestamp": 1757893992940,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893992940,
      "category": "submit_flag",
      "value": 70,
      "playerId": 68
    },
    {
      "timestamp": 1757893992940,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893992945,
      "category": "submit_flag",
      "value": 68,
      "playerId": 34
    },
    {
      "timestamp": 1757893992945,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893992950,
      "category": "submit_flag",
      "value": 61,
      "playerId": 34
    },
    {
      "timestamp": 1757893992950,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893992952,
      "category": "submit_flag",
      "value": 59,
      "playerId": 95
    },
    {
      "timestamp": 1757893992952,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893992960,
      "category": "submit_flag",
      "value": 72,
      "playerId": 27
    },
    {
      "timestamp": 1757893992960,
      "category": "flag_correct",
      "value": 1,
      "playerId": 27
    },
    {
      "timestamp": 1757893992983,
      "category": "submit_flag",
      "value": 55,
      "playerId": 68
    },
    {
      "timestamp": 1757893992983,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893992987,
      "category": "submit_flag",
      "value": 51,
      "playerId": 52
    },
    {
      "timestamp": 1757893992987,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893992991,
      "category": "submit_flag",
      "value": 56,
      "playerId": 14
    },
    {
      "timestamp": 1757893992991,
      "category": "flag_correct",
      "value": 1,
      "playerId": 14
    },
    {
      "timestamp": 1757893992992,
      "category": "submit_flag",
      "value": 51,
      "playerId": 52
    },
    {
      "timestamp": 1757893992992,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893992996,
      "category": "submit_flag",
      "value": 68,
      "playerId": 80
    },
    {
      "timestamp": 1757893992997,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893993004,
      "category": "static_file_loaded",
      "value": 196,
      "playerId": 86
    },
    {
      "timestamp": 1757893993019,
      "category": "submit_flag",
      "value": 65,
      "playerId": 74
    },
    {
      "timestamp": 1757893993019,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893993026,
      "category": "submit_flag",
      "value": 56,
      "playerId": 74
    },
    {
      "timestamp": 1757893993026,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893993029,
      "category": "submit_flag",
      "value": 66,
      "playerId": 94
    },
    {
      "timestamp": 1757893993029,
      "category": "flag_correct",
      "value": 1,
      "playerId": 94
    },
    {
      "timestamp": 1757893993035,
      "category": "submit_flag",
      "value": 55,
      "playerId": 74
    },
    {
      "timestamp": 1757893993035,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893993040,
      "category": "submit_flag",
      "value": 54,
      "playerId": 78
    },
    {
      "timestamp": 1757893993040,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893993049,
      "category": "submit_flag",
      "value": 47,
      "playerId": 78
    },
    {
      "timestamp": 1757893993049,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893993058,
      "category": "submit_flag",
      "value": 68,
      "playerId": 46
    },
    {
      "timestamp": 1757893993058,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893993062,
      "category": "login_attempt",
      "value": 70,
      "playerId": 70
    },
    {
      "timestamp": 1757893993062,
      "category": "login_success",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893993063,
      "category": "submit_flag",
      "value": 51,
      "playerId": 61
    },
    {
      "timestamp": 1757893993063,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893993063,
      "category": "submit_flag",
      "value": 49,
      "playerId": 46
    },
    {
      "timestamp": 1757893993064,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893993068,
      "category": "submit_flag",
      "value": 54,
      "playerId": 82
    },
    {
      "timestamp": 1757893993068,
      "category": "flag_correct",
      "value": 1,
      "playerId": 82
    },
    {
      "timestamp": 1757893993086,
      "category": "static_file_loaded",
      "value": 282,
      "playerId": 47
    },
    {
      "timestamp": 1757893993090,
      "category": "submit_flag",
      "value": 55,
      "playerId": 78
    },
    {
      "timestamp": 1757893993090,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893993101,
      "category": "submit_flag",
      "value": 62,
      "playerId": 46
    },
    {
      "timestamp": 1757893993101,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893993103,
      "category": "submit_flag",
      "value": 47,
      "playerId": 61
    },
    {
      "timestamp": 1757893993103,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893993134,
      "category": "static_file_loaded",
      "value": 23792,
      "playerId": 91
    },
    {
      "timestamp": 1757893993140,
      "category": "submit_flag",
      "value": 48,
      "playerId": 38
    },
    {
      "timestamp": 1757893993140,
      "category": "flag_correct",
      "value": 1,
      "playerId": 38
    },
    {
      "timestamp": 1757893993151,
      "category": "submit_flag",
      "value": 51,
      "playerId": 59
    },
    {
      "timestamp": 1757893993151,
      "category": "flag_correct",
      "value": 1,
      "playerId": 59
    },
    {
      "timestamp": 1757893993154,
      "category": "login_attempt",
      "value": 50,
      "playerId": 86
    },
    {
      "timestamp": 1757893993154,
      "category": "login_success",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893993157,
      "category": "submit_flag",
      "value": 55,
      "playerId": 57
    },
    {
      "timestamp": 1757893993157,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893993161,
      "category": "submit_flag",
      "value": 46,
      "playerId": 56
    },
    {
      "timestamp": 1757893993161,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893993180,
      "category": "submit_flag",
      "value": 55,
      "playerId": 57
    },
    {
      "timestamp": 1757893993180,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893993192,
      "category": "submit_flag",
      "value": 64,
      "playerId": 84
    },
    {
      "timestamp": 1757893993192,
      "category": "flag_correct",
      "value": 1,
      "playerId": 84
    },
    {
      "timestamp": 1757893993196,
      "category": "submit_flag",
      "value": 71,
      "playerId": 56
    },
    {
      "timestamp": 1757893993196,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893993205,
      "category": "submit_flag",
      "value": 63,
      "playerId": 57
    },
    {
      "timestamp": 1757893993205,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893993206,
      "category": "submit_flag",
      "value": 51,
      "playerId": 56
    },
    {
      "timestamp": 1757893993206,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893993215,
      "category": "submit_flag",
      "value": 70,
      "playerId": 37
    },
    {
      "timestamp": 1757893993215,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893993221,
      "category": "submit_flag",
      "value": 84,
      "playerId": 37
    },
    {
      "timestamp": 1757893993221,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893993251,
      "category": "submit_flag",
      "value": 54,
      "playerId": 37
    },
    {
      "timestamp": 1757893993252,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893993263,
      "category": "login_attempt",
      "value": 76,
      "playerId": 47
    },
    {
      "timestamp": 1757893993263,
      "category": "login_success",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893993271,
      "category": "websocket_connected",
      "value": 159,
      "playerId": 70
    },
    {
      "timestamp": 1757893993295,
      "category": "submit_flag",
      "value": 72,
      "playerId": 90
    },
    {
      "timestamp": 1757893993295,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893993307,
      "category": "submit_flag",
      "value": 60,
      "playerId": 36
    },
    {
      "timestamp": 1757893993307,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893993310,
      "category": "submit_flag",
      "value": 49,
      "playerId": 36
    },
    {
      "timestamp": 1757893993310,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893993318,
      "category": "submit_flag",
      "value": 55,
      "playerId": 90
    },
    {
      "timestamp": 1757893993319,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893993334,
      "category": "submit_flag",
      "value": 62,
      "playerId": 34
    },
    {
      "timestamp": 1757893993334,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893993336,
      "category": "submit_flag",
      "value": 71,
      "playerId": 34
    },
    {
      "timestamp": 1757893993336,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893993351,
      "category": "static_file_loaded",
      "value": 217,
      "playerId": 91
    },
    {
      "timestamp": 1757893993367,
      "category": "submit_flag",
      "value": 55,
      "playerId": 34
    },
    {
      "timestamp": 1757893993367,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893993371,
      "category": "submit_flag",
      "value": 59,
      "playerId": 68
    },
    {
      "timestamp": 1757893993372,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893993374,
      "category": "submit_flag",
      "value": 56,
      "playerId": 95
    },
    {
      "timestamp": 1757893993374,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893993376,
      "category": "submit_flag",
      "value": 51,
      "playerId": 80
    },
    {
      "timestamp": 1757893993376,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893993382,
      "category": "submit_flag",
      "value": 52,
      "playerId": 95
    },
    {
      "timestamp": 1757893993382,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893993385,
      "category": "websocket_connected",
      "value": 178,
      "playerId": 86
    },
    {
      "timestamp": 1757893993398,
      "category": "submit_flag",
      "value": 68,
      "playerId": 52
    },
    {
      "timestamp": 1757893993398,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893993410,
      "category": "submit_flag",
      "value": 86,
      "playerId": 80
    },
    {
      "timestamp": 1757893993410,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893993415,
      "category": "submit_flag",
      "value": 59,
      "playerId": 66
    },
    {
      "timestamp": 1757893993415,
      "category": "flag_correct",
      "value": 1,
      "playerId": 66
    },
    {
      "timestamp": 1757893993430,
      "category": "submit_flag",
      "value": 46,
      "playerId": 68
    },
    {
      "timestamp": 1757893993430,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893993432,
      "category": "submit_flag",
      "value": 55,
      "playerId": 68
    },
    {
      "timestamp": 1757893993432,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893993455,
      "category": "submit_flag",
      "value": 51,
      "playerId": 46
    },
    {
      "timestamp": 1757893993455,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893993462,
      "category": "submit_flag",
      "value": 55,
      "playerId": 52
    },
    {
      "timestamp": 1757893993462,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893993475,
      "category": "submit_flag",
      "value": 52,
      "playerId": 61
    },
    {
      "timestamp": 1757893993475,
      "category": "flag_correct",
      "value": 1,
      "playerId": 61
    },
    {
      "timestamp": 1757893993486,
      "category": "submit_flag",
      "value": 47,
      "playerId": 46
    },
    {
      "timestamp": 1757893993486,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893993490,
      "category": "websocket_connected",
      "value": 175,
      "playerId": 47
    },
    {
      "timestamp": 1757893993499,
      "category": "submit_flag",
      "value": 49,
      "playerId": 46
    },
    {
      "timestamp": 1757893993499,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893993503,
      "category": "login_attempt",
      "value": 50,
      "playerId": 91
    },
    {
      "timestamp": 1757893993503,
      "category": "login_success",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893993517,
      "category": "submit_flag",
      "value": 45,
      "playerId": 56
    },
    {
      "timestamp": 1757893993517,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893993546,
      "category": "submit_flag",
      "value": 69,
      "playerId": 57
    },
    {
      "timestamp": 1757893993546,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893993559,
      "category": "submit_flag",
      "value": 55,
      "playerId": 56
    },
    {
      "timestamp": 1757893993559,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893993560,
      "category": "submit_flag",
      "value": 58,
      "playerId": 56
    },
    {
      "timestamp": 1757893993560,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893993596,
      "category": "submit_flag",
      "value": 52,
      "playerId": 78
    },
    {
      "timestamp": 1757893993596,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893993611,
      "category": "submit_flag",
      "value": 64,
      "playerId": 57
    },
    {
      "timestamp": 1757893993611,
      "category": "flag_correct",
      "value": 1,
      "playerId": 57
    },
    {
      "timestamp": 1757893993611,
      "category": "submit_flag",
      "value": 64,
      "playerId": 78
    },
    {
      "timestamp": 1757893993611,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893993652,
      "category": "submit_flag",
      "value": 45,
      "playerId": 36
    },
    {
      "timestamp": 1757893993652,
      "category": "flag_correct",
      "value": 1,
      "playerId": 36
    },
    {
      "timestamp": 1757893993661,
      "category": "submit_flag",
      "value": 48,
      "playerId": 70
    },
    {
      "timestamp": 1757893993661,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893993665,
      "category": "submit_flag",
      "value": 59,
      "playerId": 74
    },
    {
      "timestamp": 1757893993665,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893993690,
      "category": "submit_flag",
      "value": 65,
      "playerId": 70
    },
    {
      "timestamp": 1757893993690,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893993693,
      "category": "submit_flag",
      "value": 60,
      "playerId": 34
    },
    {
      "timestamp": 1757893993693,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893993705,
      "category": "submit_flag",
      "value": 55,
      "playerId": 70
    },
    {
      "timestamp": 1757893993705,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893993726,
      "category": "submit_flag",
      "value": 57,
      "playerId": 74
    },
    {
      "timestamp": 1757893993726,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893993731,
      "category": "submit_flag",
      "value": 62,
      "playerId": 74
    },
    {
      "timestamp": 1757893993731,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893993732,
      "category": "submit_flag",
      "value": 335,
      "playerId": 95
    },
    {
      "timestamp": 1757893993732,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893993735,
      "category": "websocket_connected",
      "value": 180,
      "playerId": 91
    },
    {
      "timestamp": 1757893993744,
      "category": "submit_flag",
      "value": 53,
      "playerId": 86
    },
    {
      "timestamp": 1757893993744,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893993762,
      "category": "submit_flag",
      "value": 56,
      "playerId": 34
    },
    {
      "timestamp": 1757893993762,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893993765,
      "category": "submit_flag",
      "value": 59,
      "playerId": 34
    },
    {
      "timestamp": 1757893993765,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893993769,
      "category": "submit_flag",
      "value": 48,
      "playerId": 90
    },
    {
      "timestamp": 1757893993769,
      "category": "flag_correct",
      "value": 1,
      "playerId": 90
    },
    {
      "timestamp": 1757893993770,
      "category": "submit_flag",
      "value": 54,
      "playerId": 86
    },
    {
      "timestamp": 1757893993770,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893993808,
      "category": "submit_flag",
      "value": 48,
      "playerId": 86
    },
    {
      "timestamp": 1757893993808,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893993818,
      "category": "submit_flag",
      "value": 47,
      "playerId": 46
    },
    {
      "timestamp": 1757893993818,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893993830,
      "category": "submit_flag",
      "value": 59,
      "playerId": 46
    },
    {
      "timestamp": 1757893993830,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893993831,
      "category": "submit_flag",
      "value": 53,
      "playerId": 80
    },
    {
      "timestamp": 1757893993831,
      "category": "flag_correct",
      "value": 1,
      "playerId": 80
    },
    {
      "timestamp": 1757893993843,
      "category": "submit_flag",
      "value": 46,
      "playerId": 37
    },
    {
      "timestamp": 1757893993843,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893993851,
      "category": "submit_flag",
      "value": 46,
      "playerId": 52
    },
    {
      "timestamp": 1757893993851,
      "category": "flag_correct",
      "value": 1,
      "playerId": 52
    },
    {
      "timestamp": 1757893993858,
      "category": "submit_flag",
      "value": 54,
      "playerId": 46
    },
    {
      "timestamp": 1757893993858,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893993872,
      "category": "submit_flag",
      "value": 52,
      "playerId": 37
    },
    {
      "timestamp": 1757893993872,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893993880,
      "category": "submit_flag",
      "value": 52,
      "playerId": 68
    },
    {
      "timestamp": 1757893993880,
      "category": "flag_incorrect",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893993880,
      "category": "submit_flag",
      "value": 53,
      "playerId": 47
    },
    {
      "timestamp": 1757893993880,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893993887,
      "category": "submit_flag",
      "value": 55,
      "playerId": 56
    },
    {
      "timestamp": 1757893993887,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893993892,
      "category": "submit_flag",
      "value": 45,
      "playerId": 56
    },
    {
      "timestamp": 1757893993892,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893993912,
      "category": "submit_flag",
      "value": 46,
      "playerId": 68
    },
    {
      "timestamp": 1757893993912,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893993922,
      "category": "submit_flag",
      "value": 69,
      "playerId": 56
    },
    {
      "timestamp": 1757893993922,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893993928,
      "category": "submit_flag",
      "value": 66,
      "playerId": 47
    },
    {
      "timestamp": 1757893993928,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893993934,
      "category": "submit_flag",
      "value": 56,
      "playerId": 47
    },
    {
      "timestamp": 1757893993934,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893993944,
      "category": "submit_flag",
      "value": 46,
      "playerId": 68
    },
    {
      "timestamp": 1757893993944,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893993976,
      "category": "submit_flag",
      "value": 53,
      "playerId": 78
    },
    {
      "timestamp": 1757893993976,
      "category": "flag_correct",
      "value": 1,
      "playerId": 78
    },
    {
      "timestamp": 1757893994049,
      "category": "submit_flag",
      "value": 47,
      "playerId": 70
    },
    {
      "timestamp": 1757893994050,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893994074,
      "category": "submit_flag",
      "value": 50,
      "playerId": 70
    },
    {
      "timestamp": 1757893994075,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893994081,
      "category": "submit_flag",
      "value": 52,
      "playerId": 70
    },
    {
      "timestamp": 1757893994081,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893994082,
      "category": "submit_flag",
      "value": 52,
      "playerId": 74
    },
    {
      "timestamp": 1757893994082,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893994121,
      "category": "submit_flag",
      "value": 66,
      "playerId": 91
    },
    {
      "timestamp": 1757893994121,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893994125,
      "category": "submit_flag",
      "value": 68,
      "playerId": 74
    },
    {
      "timestamp": 1757893994125,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893994126,
      "category": "submit_flag",
      "value": 54,
      "playerId": 74
    },
    {
      "timestamp": 1757893994126,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893994138,
      "category": "submit_flag",
      "value": 56,
      "playerId": 86
    },
    {
      "timestamp": 1757893994138,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893994146,
      "category": "submit_flag",
      "value": 60,
      "playerId": 91
    },
    {
      "timestamp": 1757893994146,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893994153,
      "category": "submit_flag",
      "value": 48,
      "playerId": 86
    },
    {
      "timestamp": 1757893994153,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893994162,
      "category": "submit_flag",
      "value": 50,
      "playerId": 86
    },
    {
      "timestamp": 1757893994162,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893994178,
      "category": "submit_flag",
      "value": 48,
      "playerId": 34
    },
    {
      "timestamp": 1757893994178,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893994181,
      "category": "submit_flag",
      "value": 54,
      "playerId": 91
    },
    {
      "timestamp": 1757893994181,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893994187,
      "category": "submit_flag",
      "value": 51,
      "playerId": 34
    },
    {
      "timestamp": 1757893994187,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893994202,
      "category": "submit_flag",
      "value": 48,
      "playerId": 95
    },
    {
      "timestamp": 1757893994202,
      "category": "flag_correct",
      "value": 1,
      "playerId": 95
    },
    {
      "timestamp": 1757893994218,
      "category": "submit_flag",
      "value": 46,
      "playerId": 37
    },
    {
      "timestamp": 1757893994218,
      "category": "flag_correct",
      "value": 1,
      "playerId": 37
    },
    {
      "timestamp": 1757893994264,
      "category": "submit_flag",
      "value": 55,
      "playerId": 47
    },
    {
      "timestamp": 1757893994264,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893994271,
      "category": "submit_flag",
      "value": 50,
      "playerId": 47
    },
    {
      "timestamp": 1757893994271,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893994305,
      "category": "submit_flag",
      "value": 64,
      "playerId": 46
    },
    {
      "timestamp": 1757893994305,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893994313,
      "category": "submit_flag",
      "value": 65,
      "playerId": 46
    },
    {
      "timestamp": 1757893994313,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893994325,
      "category": "submit_flag",
      "value": 71,
      "playerId": 56
    },
    {
      "timestamp": 1757893994325,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893994329,
      "category": "submit_flag",
      "value": 50,
      "playerId": 47
    },
    {
      "timestamp": 1757893994329,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893994332,
      "category": "submit_flag",
      "value": 57,
      "playerId": 56
    },
    {
      "timestamp": 1757893994332,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893994341,
      "category": "submit_flag",
      "value": 49,
      "playerId": 68
    },
    {
      "timestamp": 1757893994341,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893994352,
      "category": "submit_flag",
      "value": 62,
      "playerId": 56
    },
    {
      "timestamp": 1757893994352,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893994356,
      "category": "submit_flag",
      "value": 44,
      "playerId": 68
    },
    {
      "timestamp": 1757893994356,
      "category": "flag_correct",
      "value": 1,
      "playerId": 68
    },
    {
      "timestamp": 1757893994455,
      "category": "submit_flag",
      "value": 53,
      "playerId": 70
    },
    {
      "timestamp": 1757893994455,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893994473,
      "category": "submit_flag",
      "value": 61,
      "playerId": 70
    },
    {
      "timestamp": 1757893994473,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893994480,
      "category": "submit_flag",
      "value": 51,
      "playerId": 86
    },
    {
      "timestamp": 1757893994480,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893994489,
      "category": "submit_flag",
      "value": 305,
      "playerId": 46
    },
    {
      "timestamp": 1757893994489,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893994504,
      "category": "submit_flag",
      "value": 80,
      "playerId": 70
    },
    {
      "timestamp": 1757893994504,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893994531,
      "category": "submit_flag",
      "value": 59,
      "playerId": 34
    },
    {
      "timestamp": 1757893994531,
      "category": "flag_correct",
      "value": 1,
      "playerId": 34
    },
    {
      "timestamp": 1757893994535,
      "category": "submit_flag",
      "value": 53,
      "playerId": 74
    },
    {
      "timestamp": 1757893994535,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893994550,
      "category": "submit_flag",
      "value": 71,
      "playerId": 86
    },
    {
      "timestamp": 1757893994550,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893994553,
      "category": "submit_flag",
      "value": 60,
      "playerId": 86
    },
    {
      "timestamp": 1757893994553,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893994553,
      "category": "submit_flag",
      "value": 139,
      "playerId": 74
    },
    {
      "timestamp": 1757893994553,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893994559,
      "category": "submit_flag",
      "value": 50,
      "playerId": 91
    },
    {
      "timestamp": 1757893994559,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893994577,
      "category": "submit_flag",
      "value": 47,
      "playerId": 91
    },
    {
      "timestamp": 1757893994577,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893994609,
      "category": "submit_flag",
      "value": 49,
      "playerId": 91
    },
    {
      "timestamp": 1757893994609,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893994652,
      "category": "submit_flag",
      "value": 47,
      "playerId": 47
    },
    {
      "timestamp": 1757893994652,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893994660,
      "category": "submit_flag",
      "value": 51,
      "playerId": 47
    },
    {
      "timestamp": 1757893994660,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893994662,
      "category": "submit_flag",
      "value": 47,
      "playerId": 11
    },
    {
      "timestamp": 1757893994662,
      "category": "flag_correct",
      "value": 1,
      "playerId": 11
    },
    {
      "timestamp": 1757893994708,
      "category": "submit_flag",
      "value": 50,
      "playerId": 56
    },
    {
      "timestamp": 1757893994708,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893994717,
      "category": "submit_flag",
      "value": 70,
      "playerId": 47
    },
    {
      "timestamp": 1757893994717,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893994761,
      "category": "submit_flag",
      "value": 48,
      "playerId": 56
    },
    {
      "timestamp": 1757893994761,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893994798,
      "category": "submit_flag",
      "value": 48,
      "playerId": 46
    },
    {
      "timestamp": 1757893994798,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893994818,
      "category": "submit_flag",
      "value": 47,
      "playerId": 46
    },
    {
      "timestamp": 1757893994818,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893994859,
      "category": "submit_flag",
      "value": 48,
      "playerId": 70
    },
    {
      "timestamp": 1757893994859,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893994873,
      "category": "submit_flag",
      "value": 51,
      "playerId": 70
    },
    {
      "timestamp": 1757893994873,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893994909,
      "category": "submit_flag",
      "value": 52,
      "playerId": 70
    },
    {
      "timestamp": 1757893994909,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893994931,
      "category": "submit_flag",
      "value": 59,
      "playerId": 91
    },
    {
      "timestamp": 1757893994931,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893994943,
      "category": "submit_flag",
      "value": 60,
      "playerId": 74
    },
    {
      "timestamp": 1757893994943,
      "category": "flag_correct",
      "value": 1,
      "playerId": 74
    },
    {
      "timestamp": 1757893994944,
      "category": "submit_flag",
      "value": 61,
      "playerId": 86
    },
    {
      "timestamp": 1757893994944,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893994961,
      "category": "submit_flag",
      "value": 51,
      "playerId": 86
    },
    {
      "timestamp": 1757893994961,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893994983,
      "category": "submit_flag",
      "value": 51,
      "playerId": 91
    },
    {
      "timestamp": 1757893994983,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893994983,
      "category": "submit_flag",
      "value": 57,
      "playerId": 86
    },
    {
      "timestamp": 1757893994983,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893994993,
      "category": "submit_flag",
      "value": 46,
      "playerId": 91
    },
    {
      "timestamp": 1757893994993,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893995063,
      "category": "submit_flag",
      "value": 46,
      "playerId": 47
    },
    {
      "timestamp": 1757893995063,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893995071,
      "category": "submit_flag",
      "value": 46,
      "playerId": 47
    },
    {
      "timestamp": 1757893995071,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893995088,
      "category": "submit_flag",
      "value": 55,
      "playerId": 47
    },
    {
      "timestamp": 1757893995088,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893995140,
      "category": "submit_flag",
      "value": 46,
      "playerId": 46
    },
    {
      "timestamp": 1757893995140,
      "category": "flag_correct",
      "value": 1,
      "playerId": 46
    },
    {
      "timestamp": 1757893995145,
      "category": "submit_flag",
      "value": 50,
      "playerId": 56
    },
    {
      "timestamp": 1757893995145,
      "category": "flag_correct",
      "value": 1,
      "playerId": 56
    },
    {
      "timestamp": 1757893995237,
      "category": "submit_flag",
      "value": 42,
      "playerId": 70
    },
    {
      "timestamp": 1757893995238,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893995294,
      "category": "submit_flag",
      "value": 44,
      "playerId": 70
    },
    {
      "timestamp": 1757893995295,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893995329,
      "category": "submit_flag",
      "value": 49,
      "playerId": 91
    },
    {
      "timestamp": 1757893995329,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893995361,
      "category": "submit_flag",
      "value": 50,
      "playerId": 86
    },
    {
      "timestamp": 1757893995361,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893995370,
      "category": "submit_flag",
      "value": 47,
      "playerId": 91
    },
    {
      "timestamp": 1757893995370,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893995382,
      "category": "submit_flag",
      "value": 53,
      "playerId": 86
    },
    {
      "timestamp": 1757893995382,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893995396,
      "category": "submit_flag",
      "value": 55,
      "playerId": 91
    },
    {
      "timestamp": 1757893995396,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893995434,
      "category": "submit_flag",
      "value": 63,
      "playerId": 47
    },
    {
      "timestamp": 1757893995434,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893995457,
      "category": "submit_flag",
      "value": 54,
      "playerId": 47
    },
    {
      "timestamp": 1757893995457,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893995667,
      "category": "submit_flag",
      "value": 46,
      "playerId": 70
    },
    {
      "timestamp": 1757893995667,
      "category": "flag_correct",
      "value": 1,
      "playerId": 70
    },
    {
      "timestamp": 1757893995685,
      "category": "submit_flag",
      "value": 56,
      "playerId": 86
    },
    {
      "timestamp": 1757893995685,
      "category": "flag_correct",
      "value": 1,
      "playerId": 86
    },
    {
      "timestamp": 1757893995725,
      "category": "submit_flag",
      "value": 62,
      "playerId": 91
    },
    {
      "timestamp": 1757893995726,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893995758,
      "category": "submit_flag",
      "value": 51,
      "playerId": 91
    },
    {
      "timestamp": 1757893995758,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    },
    {
      "timestamp": 1757893995825,
      "category": "submit_flag",
      "value": 48,
      "playerId": 47
    },
    {
      "timestamp": 1757893995825,
      "category": "flag_correct",
      "value": 1,
      "playerId": 47
    },
    {
      "timestamp": 1757893996134,
      "category": "submit_flag",
      "value": 47,
      "playerId": 91
    },
    {
      "timestamp": 1757893996134,
      "category": "flag_correct",
      "value": 1,
      "playerId": 91
    }
  ],
  "responseTimes": {
    "staticFiles": [
      483,
      496,
      575,
      591,
      526,
      498,
      521,
      538,
      515,
      565,
      542,
      623,
      601,
      49,
      52,
      53,
      51,
      53,
      50,
      52,
      52,
      42,
      47,
      580,
      43,
      650,
      571,
      673,
      587,
      648,
      699,
      708,
      706,
      661,
      644,
      606,
      672,
      657,
      643,
      686,
      687,
      651,
      651,
      665,
      700,
      684,
      679,
      630,
      718,
      689,
      712,
      679,
      679,
      708,
      736,
      736,
      698,
      718,
      734,
      730,
      101,
      74,
      757,
      61,
      85,
      50,
      62,
      55,
      60,
      53,
      53,
      50,
      54,
      51,
      55,
      54,
      40,
      47,
      44,
      51,
      52,
      56,
      772,
      704,
      57,
      55,
      55,
      59,
      56,
      59,
      52,
      52,
      51,
      729,
      720,
      709,
      46,
      46,
      838,
      824,
      900,
      53,
      794,
      55,
      759,
      818,
      894,
      194,
      49,
      49,
      895,
      50,
      917,
      50,
      222,
      226,
      53,
      287,
      233,
      909,
      233,
      257,
      937,
      914,
      58,
      844,
      53,
      854,
      214,
      858,
      853,
      904,
      50,
      883,
      913,
      53,
      904,
      52,
      54,
      971,
      51,
      55,
      59,
      54,
      55,
      48,
      55,
      246,
      54,
      410,
      269,
      1132,
      1177,
      1174,
      1182,
      1232,
      1205,
      47,
      1177,
      1171,
      1219,
      47,
      59,
      1258,
      55,
      53,
      57,
      56,
      55,
      55,
      1258,
      117,
      1277,
      1323,
      58,
      55,
      1380,
      1491,
      53,
      553,
      52,
      251,
      1508,
      53,
      1678,
      1619,
      56,
      57,
      1967,
      1975,
      1985,
      42,
      47,
      2112,
      50,
      46,
      2090,
      244,
      3651,
      48,
      6472,
      5959,
      6902,
      7438,
      922,
      575,
      7661,
      7612,
      7842,
      7902,
      533,
      1406,
      468,
      8257,
      315,
      599,
      8323,
      8087,
      7559,
      398,
      648,
      504,
      8570,
      8645,
      1228,
      630,
      9028,
      693,
      9142,
      819,
      624,
      10431,
      10504,
      2032,
      10986,
      10826,
      11484,
      515,
      1049,
      1074,
      1401,
      959,
      12611,
      12586,
      12754,
      12632,
      12905,
      12811,
      432,
      12619,
      391,
      13593,
      527,
      908,
      13639,
      13766,
      13853,
      665,
      1233,
      1432,
      14265,
      13645,
      777,
      14514,
      14741,
      1230,
      1009,
      14851,
      602,
      506,
      740,
      1430,
      699,
      15357,
      15441,
      15540,
      296,
      16048,
      1136,
      15950,
      459,
      393,
      15979,
      432,
      16049,
      16419,
      637,
      446,
      13903,
      16495,
      16995,
      17017,
      16711,
      16907,
      569,
      16888,
      1142,
      17185,
      461,
      17236,
      16073,
      16692,
      17600,
      536,
      16547,
      230,
      645,
      683,
      585,
      797,
      17926,
      17884,
      18043,
      518,
      17943,
      18216,
      983,
      18236,
      214,
      1190,
      709,
      398,
      18229,
      786,
      446,
      905,
      312,
      18487,
      18473,
      580,
      18577,
      18610,
      477,
      18724,
      18416,
      18853,
      316,
      17554,
      18786,
      18415,
      746,
      419,
      473,
      509,
      487,
      420,
      18555,
      19035,
      776,
      440,
      19531,
      19253,
      18230,
      19375,
      759,
      19246,
      1124,
      589,
      19923,
      19381,
      992,
      1065,
      1147,
      20267,
      20671,
      21023,
      1792,
      19887,
      1784,
      21062,
      21446,
      1286,
      777,
      1945,
      792,
      643,
      1721,
      501,
      623,
      22157,
      21711,
      21728,
      21803,
      1573,
      22193,
      620,
      1193,
      1622,
      1786,
      24342,
      1899,
      320,
      24149,
      25136,
      24244,
      330,
      196,
      282,
      23792,
      217
    ],
    "login": [
      72,
      45,
      60,
      57,
      63,
      52,
      53,
      53,
      62,
      68,
      102,
      104,
      49,
      54,
      56,
      56,
      217,
      307,
      53,
      48,
      56,
      50,
      61,
      50,
      57,
      60,
      67,
      53,
      64,
      62,
      83,
      387,
      61,
      73,
      60,
      51,
      56,
      54,
      53,
      252,
      47,
      54,
      52,
      61,
      61,
      50,
      61,
      55,
      51,
      58,
      71,
      59,
      53,
      61,
      72,
      60,
      70,
      65,
      55,
      84,
      80,
      70,
      59,
      77,
      59,
      65,
      80,
      65,
      62,
      47,
      323,
      54,
      48,
      309,
      243,
      200,
      169,
      52,
      52,
      54,
      57,
      65,
      63,
      69,
      69,
      59,
      50,
      350,
      468,
      61,
      53,
      44,
      49,
      52,
      49,
      55,
      70,
      50,
      76,
      50
    ],
    "challenges": [],
    "submit": [
      61,
      52,
      57,
      61,
      54,
      307,
      47,
      57,
      45,
      57,
      72,
      58,
      63,
      180,
      178,
      77,
      86,
      77,
      318,
      234,
      316,
      351,
      342,
      137,
      360,
      94,
      97,
      51,
      51,
      72,
      62,
      64,
      61,
      52,
      65,
      51,
      51,
      73,
      59,
      52,
      66,
      51,
      54,
      57,
      55,
      53,
      50,
      47,
      55,
      52,
      50,
      48,
      52,
      48,
      51,
      57,
      54,
      58,
      54,
      76,
      49,
      55,
      58,
      55,
      59,
      53,
      55,
      58,
      62,
      50,
      60,
      67,
      61,
      53,
      52,
      156,
      102,
      57,
      243,
      62,
      41,
      58,
      54,
      49,
      65,
      56,
      58,
      55,
      55,
      52,
      80,
      61,
      53,
      516,
      56,
      50,
      49,
      56,
      46,
      53,
      59,
      55,
      44,
      52,
      59,
      52,
      53,
      63,
      45,
      55,
      66,
      68,
      193,
      49,
      47,
      170,
      54,
      61,
      50,
      51,
      52,
      49,
      52,
      56,
      47,
      54,
      57,
      63,
      46,
      56,
      50,
      48,
      48,
      50,
      50,
      73,
      144,
      142,
      106,
      150,
      94,
      97,
      125,
      166,
      85,
      308,
      312,
      207,
      316,
      239,
      281,
      267,
      271,
      198,
      349,
      306,
      324,
      329,
      454,
      308,
      49,
      64,
      56,
      59,
      76,
      50,
      46,
      53,
      59,
      81,
      57,
      134,
      62,
      61,
      48,
      54,
      61,
      51,
      47,
      52,
      60,
      50,
      52,
      67,
      72,
      77,
      51,
      55,
      50,
      74,
      49,
      56,
      919,
      61,
      49,
      51,
      51,
      66,
      62,
      66,
      61,
      53,
      51,
      81,
      49,
      67,
      56,
      57,
      62,
      66,
      167,
      73,
      53,
      1194,
      79,
      50,
      56,
      55,
      67,
      58,
      62,
      72,
      71,
      52,
      58,
      65,
      74,
      391,
      63,
      65,
      62,
      62,
      56,
      77,
      88,
      59,
      49,
      58,
      56,
      56,
      78,
      53,
      49,
      49,
      71,
      52,
      68,
      82,
      60,
      47,
      51,
      66,
      66,
      58,
      67,
      45,
      65,
      78,
      62,
      55,
      59,
      59,
      53,
      48,
      57,
      65,
      55,
      46,
      49,
      48,
      51,
      68,
      64,
      46,
      61,
      64,
      80,
      58,
      76,
      56,
      62,
      53,
      60,
      55,
      65,
      69,
      53,
      68,
      82,
      91,
      72,
      74,
      89,
      70,
      56,
      67,
      54,
      63,
      48,
      46,
      71,
      64,
      57,
      59,
      58,
      56,
      62,
      60,
      72,
      64,
      56,
      48,
      66,
      71,
      60,
      50,
      57,
      77,
      53,
      86,
      61,
      55,
      70,
      53,
      77,
      60,
      66,
      65,
      67,
      112,
      55,
      109,
      60,
      112,
      55,
      48,
      60,
      65,
      58,
      52,
      72,
      49,
      89,
      128,
      86,
      66,
      88,
      68,
      54,
      68,
      71,
      55,
      128,
      50,
      47,
      54,
      69,
      60,
      54,
      61,
      58,
      64,
      53,
      57,
      62,
      66,
      71,
      62,
      68,
      67,
      61,
      51,
      56,
      61,
      53,
      56,
      66,
      60,
      71,
      80,
      57,
      50,
      64,
      51,
      60,
      53,
      90,
      65,
      49,
      69,
      87,
      83,
      69,
      73,
      50,
      70,
      115,
      90,
      64,
      63,
      137,
      55,
      51,
      52,
      69,
      47,
      52,
      53,
      65,
      66,
      81,
      93,
      187,
      53,
      63,
      67,
      77,
      324,
      51,
      72,
      57,
      88,
      60,
      51,
      115,
      62,
      49,
      49,
      51,
      50,
      67,
      61,
      75,
      69,
      57,
      68,
      62,
      56,
      89,
      66,
      65,
      67,
      59,
      132,
      83,
      62,
      85,
      47,
      61,
      46,
      64,
      53,
      78,
      76,
      241,
      62,
      70,
      58,
      59,
      58,
      57,
      57,
      292,
      53,
      59,
      63,
      47,
      47,
      54,
      55,
      62,
      70,
      54,
      59,
      58,
      60,
      59,
      52,
      62,
      70,
      52,
      327,
      61,
      56,
      46,
      60,
      57,
      47,
      61,
      75,
      63,
      61,
      93,
      54,
      67,
      50,
      63,
      64,
      62,
      99,
      62,
      115,
      54,
      60,
      69,
      63,
      54,
      72,
      61,
      57,
      88,
      63,
      53,
      66,
      48,
      57,
      68,
      54,
      50,
      68,
      52,
      64,
      57,
      67,
      56,
      56,
      47,
      60,
      62,
      62,
      65,
      52,
      62,
      67,
      73,
      61,
      80,
      65,
      59,
      52,
      56,
      52,
      51,
      54,
      48,
      51,
      49,
      56,
      59,
      59,
      62,
      52,
      52,
      57,
      60,
      49,
      60,
      66,
      53,
      59,
      60,
      65,
      66,
      71,
      62,
      57,
      54,
      68,
      62,
      69,
      73,
      60,
      320,
      64,
      60,
      62,
      66,
      73,
      71,
      52,
      61,
      53,
      70,
      318,
      61,
      53,
      68,
      70,
      72,
      68,
      64,
      62,
      76,
      80,
      82,
      65,
      63,
      59,
      101,
      66,
      69,
      56,
      69,
      330,
      58,
      43,
      74,
      74,
      67,
      88,
      54,
      75,
      91,
      63,
      83,
      78,
      67,
      63,
      69,
      75,
      111,
      68,
      64,
      67,
      54,
      75,
      66,
      67,
      68,
      80,
      51,
      53,
      76,
      66,
      61,
      61,
      58,
      64,
      72,
      82,
      82,
      67,
      68,
      67,
      180,
      73,
      72,
      73,
      63,
      64,
      65,
      70,
      63,
      65,
      62,
      57,
      60,
      56,
      58,
      63,
      61,
      63,
      59,
      61,
      63,
      67,
      58,
      62,
      58,
      54,
      61,
      62,
      77,
      80,
      78,
      77,
      63,
      65,
      96,
      62,
      60,
      91,
      136,
      82,
      64,
      128,
      62,
      62,
      64,
      69,
      150,
      59,
      71,
      64,
      63,
      70,
      70,
      60,
      208,
      57,
      73,
      67,
      349,
      71,
      70,
      79,
      63,
      241,
      56,
      57,
      48,
      67,
      61,
      327,
      57,
      66,
      66,
      52,
      58,
      52,
      64,
      72,
      73,
      87,
      84,
      86,
      90,
      105,
      102,
      93,
      82,
      95,
      76,
      64,
      59,
      54,
      59,
      54,
      68,
      62,
      71,
      60,
      52,
      49,
      56,
      66,
      61,
      57,
      52,
      61,
      48,
      55,
      49,
      65,
      62,
      57,
      57,
      53,
      58,
      61,
      59,
      62,
      66,
      59,
      50,
      50,
      74,
      61,
      68,
      63,
      81,
      64,
      53,
      67,
      64,
      60,
      84,
      59,
      69,
      64,
      76,
      54,
      58,
      58,
      47,
      328,
      63,
      50,
      57,
      55,
      55,
      53,
      58,
      67,
      66,
      60,
      73,
      54,
      62,
      62,
      68,
      63,
      60,
      65,
      48,
      57,
      57,
      299,
      80,
      114,
      48,
      64,
      50,
      312,
      59,
      60,
      60,
      49,
      87,
      50,
      57,
      344,
      52,
      60,
      127,
      99,
      235,
      249,
      276,
      249,
      252,
      205,
      258,
      221,
      208,
      223,
      195,
      78,
      217,
      178,
      224,
      67,
      237,
      207,
      144,
      62,
      111,
      111,
      164,
      287,
      188,
      242,
      316,
      66,
      53,
      327,
      187,
      59,
      330,
      65,
      49,
      53,
      57,
      56,
      56,
      44,
      352,
      61,
      63,
      63,
      68,
      53,
      56,
      56,
      52,
      65,
      73,
      62,
      71,
      72,
      58,
      73,
      82,
      58,
      58,
      58,
      60,
      79,
      51,
      52,
      50,
      67,
      55,
      62,
      66,
      51,
      55,
      72,
      59,
      44,
      57,
      51,
      51,
      335,
      67,
      66,
      165,
      56,
      60,
      60,
      342,
      319,
      166,
      593,
      164,
      219,
      55,
      55,
      58,
      56,
      58,
      66,
      60,
      55,
      59,
      56,
      55,
      57,
      50,
      57,
      507,
      864,
      53,
      53,
      50,
      57,
      72,
      64,
      50,
      55,
      59,
      56,
      54,
      60,
      53,
      47,
      61,
      49,
      60,
      82,
      56,
      59,
      62,
      62,
      56,
      856,
      58,
      72,
      55,
      56,
      56,
      61,
      91,
      50,
      50,
      48,
      57,
      59,
      52,
      127,
      45,
      130,
      50,
      54,
      164,
      59,
      71,
      58,
      73,
      73,
      323,
      60,
      64,
      65,
      315,
      52,
      59,
      43,
      59,
      56,
      49,
      49,
      56,
      49,
      49,
      57,
      55,
      58,
      51,
      64,
      58,
      57,
      62,
      68,
      49,
      67,
      62,
      58,
      57,
      69,
      68,
      52,
      314,
      51,
      54,
      65,
      63,
      73,
      77,
      71,
      65,
      76,
      68,
      65,
      58,
      48,
      59,
      51,
      52,
      68,
      64,
      64,
      62,
      67,
      74,
      62,
      85,
      67,
      54,
      55,
      60,
      48,
      70,
      62,
      61,
      66,
      74,
      66,
      64,
      64,
      101,
      68,
      68,
      70,
      77,
      64,
      53,
      88,
      57,
      135,
      62,
      61,
      98,
      60,
      54,
      54,
      63,
      74,
      71,
      78,
      65,
      91,
      87,
      71,
      67,
      85,
      331,
      67,
      308,
      333,
      52,
      45,
      57,
      49,
      60,
      61,
      67,
      80,
      71,
      77,
      76,
      97,
      54,
      58,
      80,
      105,
      366,
      68,
      68,
      71,
      72,
      76,
      76,
      85,
      76,
      80,
      83,
      70,
      77,
      65,
      67,
      60,
      62,
      53,
      61,
      64,
      67,
      64,
      77,
      81,
      70,
      62,
      59,
      61,
      70,
      74,
      69,
      62,
      73,
      55,
      69,
      55,
      82,
      58,
      64,
      73,
      62,
      329,
      61,
      57,
      119,
      61,
      48,
      54,
      55,
      315,
      60,
      52,
      64,
      60,
      55,
      56,
      64,
      59,
      60,
      61,
      59,
      55,
      353,
      60,
      69,
      81,
      62,
      51,
      64,
      65,
      60,
      62,
      58,
      54,
      68,
      54,
      49,
      57,
      55,
      64,
      71,
      63,
      66,
      67,
      66,
      75,
      60,
      69,
      67,
      65,
      59,
      68,
      55,
      58,
      60,
      64,
      55,
      328,
      53,
      52,
      48,
      56,
      55,
      63,
      64,
      61,
      51,
      82,
      326,
      63,
      86,
      98,
      53,
      336,
      58,
      74,
      85,
      99,
      77,
      67,
      65,
      63,
      62,
      66,
      58,
      77,
      58,
      123,
      67,
      60,
      62,
      44,
      71,
      66,
      69,
      69,
      313,
      64,
      67,
      67,
      61,
      54,
      70,
      59,
      61,
      315,
      55,
      59,
      54,
      62,
      95,
      118,
      60,
      330,
      58,
      46,
      59,
      50,
      54,
      56,
      54,
      52,
      50,
      62,
      48,
      61,
      50,
      63,
      62,
      52,
      64,
      56,
      59,
      70,
      52,
      82,
      58,
      59,
      63,
      56,
      62,
      61,
      57,
      78,
      62,
      64,
      56,
      56,
      62,
      50,
      55,
      60,
      62,
      62,
      61,
      60,
      62,
      51,
      63,
      68,
      66,
      71,
      75,
      65,
      62,
      67,
      58,
      61,
      67,
      63,
      56,
      65,
      62,
      61,
      79,
      53,
      50,
      94,
      47,
      50,
      52,
      48,
      58,
      49,
      52,
      54,
      58,
      52,
      54,
      68,
      65,
      77,
      48,
      52,
      50,
      48,
      48,
      52,
      66,
      59,
      59,
      56,
      90,
      49,
      55,
      52,
      50,
      60,
      53,
      57,
      357,
      54,
      47,
      46,
      67,
      56,
      55,
      53,
      53,
      53,
      67,
      47,
      56,
      52,
      56,
      57,
      55,
      58,
      70,
      52,
      58,
      60,
      63,
      95,
      66,
      55,
      62,
      62,
      50,
      52,
      57,
      54,
      67,
      68,
      75,
      62,
      53,
      50,
      49,
      56,
      48,
      63,
      55,
      69,
      77,
      70,
      68,
      61,
      59,
      72,
      55,
      51,
      56,
      51,
      68,
      65,
      56,
      66,
      55,
      54,
      47,
      68,
      51,
      49,
      54,
      55,
      62,
      47,
      48,
      51,
      55,
      46,
      55,
      64,
      71,
      63,
      51,
      70,
      84,
      54,
      72,
      60,
      49,
      55,
      62,
      71,
      55,
      59,
      56,
      51,
      52,
      68,
      86,
      59,
      46,
      55,
      51,
      55,
      52,
      47,
      49,
      45,
      69,
      55,
      58,
      52,
      64,
      64,
      45,
      48,
      59,
      65,
      60,
      55,
      57,
      62,
      335,
      53,
      56,
      59,
      48,
      54,
      48,
      47,
      59,
      53,
      46,
      46,
      54,
      52,
      52,
      53,
      55,
      45,
      46,
      69,
      66,
      56,
      46,
      53,
      47,
      50,
      52,
      52,
      66,
      68,
      54,
      56,
      60,
      48,
      50,
      48,
      54,
      51,
      48,
      46,
      55,
      50,
      64,
      65,
      71,
      50,
      57,
      49,
      62,
      44,
      53,
      61,
      51,
      305,
      80,
      59,
      53,
      71,
      60,
      139,
      50,
      47,
      49,
      47,
      51,
      47,
      50,
      70,
      48,
      48,
      47,
      48,
      51,
      52,
      59,
      60,
      61,
      51,
      51,
      57,
      46,
      46,
      46,
      55,
      46,
      50,
      42,
      44,
      49,
      50,
      47,
      53,
      55,
      63,
      54,
      46,
      56,
      62,
      51,
      48,
      47
    ],
    "websocket": [
      219,
      233,
      162,
      153,
      275,
      165,
      166,
      263,
      332,
      313,
      195,
      195,
      157,
      177,
      446,
      178,
      181,
      179,
      161,
      166,
      177,
      164,
      235,
      163,
      156,
      189,
      176,
      179,
      167,
      175,
      165,
      183,
      223,
      169,
      175,
      1238,
      194,
      178,
      220,
      163,
      161,
      186,
      161,
      173,
      168,
      171,
      157,
      170,
      167,
      179,
      176,
      182,
      201,
      195,
      195,
      196,
      211,
      200,
      181,
      203,
      197,
      210,
      196,
      207,
      169,
      690,
      169,
      193,
      175,
      271,
      676,
      606,
      456,
      384,
      175,
      152,
      454,
      228,
      174,
      218,
      161,
      176,
      177,
      172,
      224,
      158,
      549,
      189,
      189,
      181,
      276,
      180,
      206,
      167,
      159,
      171,
      159,
      178,
      175,
      180
    ]
  },
  "staticFileBreakdown": {
    "index.html": [
      483,
      496,
      575,
      591,
      526,
      498,
      521,
      538,
      515,
      565,
      542,
      623,
      601,
      580,
      650,
      571,
      673,
      587,
      648,
      699,
      708,
      706,
      661,
      644,
      606,
      672,
      657,
      643,
      686,
      687,
      651,
      651,
      665,
      700,
      684,
      679,
      630,
      718,
      689,
      712,
      679,
      679,
      708,
      736,
      736,
      698,
      718,
      734,
      730,
      757,
      772,
      704,
      729,
      720,
      709,
      838,
      824,
      900,
      794,
      759,
      818,
      894,
      895,
      917,
      909,
      937,
      914,
      844,
      854,
      858,
      853,
      904,
      883,
      913,
      904,
      971,
      1132,
      1177,
      1174,
      1182,
      1232,
      1205,
      1177,
      1171,
      1219,
      1258,
      1258,
      1277,
      1323,
      1380,
      1491,
      1508,
      1678,
      1619,
      1967,
      1975,
      1985,
      2112,
      2090,
      3651
    ],
    "CSS": [
      49,
      52,
      53,
      51,
      53,
      50,
      52,
      52,
      42,
      47,
      43,
      101,
      74,
      61,
      85,
      50,
      62,
      55,
      60,
      53,
      53,
      50,
      54,
      51,
      55,
      54,
      40,
      47,
      44,
      51,
      52,
      56,
      57,
      55,
      55,
      59,
      56,
      59,
      52,
      52,
      51,
      46,
      46,
      53,
      55,
      194,
      49,
      49,
      50,
      50,
      222,
      226,
      53,
      287,
      233,
      233,
      257,
      58,
      53,
      214,
      50,
      53,
      52,
      54,
      51,
      55,
      59,
      54,
      55,
      48,
      55,
      246,
      54,
      410,
      269,
      47,
      47,
      59,
      55,
      53,
      57,
      56,
      55,
      55,
      117,
      58,
      55,
      53,
      553,
      52,
      251,
      53,
      56,
      57,
      42,
      47,
      50,
      46,
      244,
      48
    ],
    "banner image": [
      6472,
      5959,
      6902,
      7438,
      7661,
      7612,
      7842,
      7902,
      8257,
      8323,
      8087,
      7559,
      8570,
      8645,
      9028,
      9142,
      10431,
      10504,
      10986,
      10826,
      11484,
      12611,
      12586,
      12754,
      12632,
      12905,
      12811,
      12619,
      13593,
      13639,
      13766,
      13853,
      14265,
      13645,
      14514,
      14741,
      14851,
      15357,
      15441,
      15540,
      16048,
      15950,
      15979,
      16049,
      16419,
      13903,
      16495,
      16995,
      17017,
      16711,
      16907,
      16888,
      17185,
      17236,
      16073,
      16692,
      17600,
      16547,
      17926,
      17884,
      18043,
      17943,
      18216,
      18236,
      18229,
      18487,
      18473,
      18577,
      18610,
      18724,
      18416,
      18853,
      17554,
      18786,
      18415,
      18555,
      19035,
      19531,
      19253,
      18230,
      19375,
      19246,
      19923,
      19381,
      20267,
      20671,
      21023,
      19887,
      21062,
      21446,
      22157,
      21711,
      21728,
      21803,
      22193,
      24342,
      24149,
      25136,
      24244,
      23792
    ],
    "app.js": [
      922,
      575,
      533,
      1406,
      468,
      315,
      599,
      398,
      648,
      504,
      1228,
      630,
      693,
      819,
      624,
      2032,
      515,
      1049,
      1074,
      1401,
      959,
      432,
      391,
      527,
      908,
      665,
      1233,
      1432,
      777,
      1230,
      1009,
      602,
      506,
      740,
      1430,
      699,
      296,
      1136,
      459,
      393,
      432,
      637,
      446,
      569,
      1142,
      461,
      536,
      230,
      645,
      683,
      585,
      797,
      518,
      983,
      214,
      1190,
      709,
      398,
      786,
      446,
      905,
      312,
      580,
      477,
      316,
      746,
      419,
      473,
      509,
      487,
      420,
      776,
      440,
      759,
      1124,
      589,
      992,
      1065,
      1147,
      1792,
      1784,
      1286,
      777,
      1945,
      792,
      643,
      1721,
      501,
      623,
      1573,
      620,
      1193,
      1622,
      1786,
      1899,
      320,
      330,
      196,
      282,
      217
    ]
  }
}